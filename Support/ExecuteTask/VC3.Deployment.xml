<?xml version="1.0"?>
<doc>
    <assembly>
        <name>VC3.Deployment</name>
    </assembly>
    <members>
        <member name="T:VC3.Deployment.Install.IDownloader">
            <summary>
            The interface used to abstract the downloaded.
            </summary>
        </member>
        <member name="M:VC3.Deployment.Install.IDownloader.Download(System.String,System.String,System.TimeSpan)">
            <summary>
            Synchronously downloads a file.
            </summary>
            <param name="source">The source url to download from</param>
            <param name="destination">The local path to download to</param>
            <param name="timeout">The maximum time to wait for the download</param>
        </member>
        <member name="T:VC3.Deployment.Web.WebTask">
            <summary>
            Base class for tasks that create or modify web sites.
            </summary>
        </member>
        <member name="T:VC3.Deployment.AuthenticatedTask">
            <summary>
            Base class for tasks that require authentication.
            </summary>
        </member>
        <member name="T:VC3.Deployment.DeploymentTask">
            <summary>
            Base class for tasks performed as part of the deployment process.
            </summary>
        </member>
        <member name="T:VC3.Deployment.DeploymentItem">
            <summary>
            Base class for items that are part of the deployment process.
            </summary>
        </member>
        <member name="M:VC3.Deployment.DeploymentItem.ClearErrorLog">
            <summary>
            Clears the <see cref="P:VC3.Deployment.DeploymentItem.ErrorLog"/>
            </summary>
        </member>
        <member name="M:VC3.Deployment.DeploymentItem.Validate">
            <summary>
            Verifies that the properties of the task have been initialized
            correctly and the task is ready to be executed.
            </summary>
            <returns>True if the task is ready to be executed, otherwise false</returns>
        </member>
        <member name="M:VC3.Deployment.DeploymentItem.GetItem(System.String)">
            <summary>
            Creates a new deployment task that has a <see cref="T:VC3.Deployment.TaskNameAttribute"/>
            that corresponds to the specified name.
            </summary>
            <param name="name">The name of the task to create</param>
            <returns>The new deployment task</returns>
        </member>
        <member name="M:VC3.Deployment.DeploymentItem.Log(VC3.Deployment.DeploymentEventType,System.String,System.Object[])">
            <summary>
            Raises the <see cref="E:VC3.Deployment.DeploymentItem.DeploymentEvent"/> based on the specifed log request.
            </summary>
            <param name="eventType">The type of deployment log event</param>
            <param name="message">The log message</param>
            <param name="args">Values to use to customize the message</param>
        </member>
        <member name="M:VC3.Deployment.DeploymentItem.LogComment(System.String,System.Object[])">
            <summary>
            Logs a comment message from a deployment task.
            </summary>
            <param name="message">The log message</param>
            <param name="args">Values to use to customize the message</param>
        </member>
        <member name="M:VC3.Deployment.DeploymentItem.LogDebug(System.String,System.Object[])">
            <summary>
            Logs a debug message from a deployment task.
            </summary>
            <param name="message">The log message</param>
            <param name="args">Values to use to customize the message</param>
        </member>
        <member name="M:VC3.Deployment.DeploymentItem.LogWarning(System.String,System.Object[])">
            <summary>
            Logs a warning message from a deployment task.
            </summary>
            <param name="message">The log message</param>
            <param name="args">Values to use to customize the message</param>
        </member>
        <member name="M:VC3.Deployment.DeploymentItem.LogError(System.String,System.Object[])">
            <summary>
            Logs an error message from a deployment task.
            </summary>
            <param name="message">The log message</param>
            <param name="args">Values to use to customize the message</param>
        </member>
        <member name="M:VC3.Deployment.DeploymentItem.LogError(System.Exception)">
            <summary>
            Logs an error message from a deployment task.
            </summary>
            <param name="error">The error to log</param>
        </member>
        <member name="M:VC3.Deployment.DeploymentItem.SetProperty(System.String,System.String)">
            <summary>
            Sets the property for the task with the specified name.
            </summary>
            <param name="name">The name of the property</param>
            <param name="value">The new value of the property</param>
            <returns>True if the property was set, otherwise false</returns>
        </member>
        <member name="P:VC3.Deployment.DeploymentItem.Context">
            <summary>
            Gets or sets the deployment context the task is running in.
            </summary>
        </member>
        <member name="E:VC3.Deployment.DeploymentItem.DeploymentEvent">
            <summary>
            Allows external processes to subscribe to notifications that occur
            as part of the execution of deployment tasks.
            </summary>
        </member>
        <member name="P:VC3.Deployment.DeploymentItem.Properties">
            <summary>
            Gets the public properties exposes by the task.
            </summary>
        </member>
        <member name="P:VC3.Deployment.DeploymentItem.Description">
            <summary>
            Gets or sets the decription of the task being performed.
            </summary>
        </member>
        <member name="P:VC3.Deployment.DeploymentItem.If">
            <summary>
            If true, the task will be executed.
            </summary>
        </member>
        <member name="P:VC3.Deployment.DeploymentItem.Unless">
            <summary>
            If true, the task will NOT be executed
            </summary>
        </member>
        <member name="P:VC3.Deployment.DeploymentItem.CanExecute">
            <summary>
            If true, the task will be executed. Based on the
            <see cref="P:VC3.Deployment.DeploymentItem.If"/> and <see cref="P:VC3.Deployment.DeploymentItem.Unless"/> properties.
            </summary>
        </member>
        <member name="P:VC3.Deployment.DeploymentItem.ErrorLog">
            <summary>
            Gets the error log, if any.
            </summary>
        </member>
        <member name="T:VC3.Deployment.DeploymentItem.DefaultContext">
            <summary>
            Default implementation of <see cref="T:VC3.Deployment.IDeploymentContext"/> for use
            by <see cref="T:VC3.Deployment.DeploymentItem"/> subclasses that are consumed by
            classes that do not provide an implementation of this interface.
            </summary>
        </member>
        <member name="T:VC3.Deployment.IDeploymentContext">
            <summary>
            Stores and exposes information about the current deployment
            environment.
            </summary>
        </member>
        <member name="M:VC3.Deployment.IDeploymentContext.GetFullPath(System.String)">
            <summary>
            Resolves a relative path into an absolute path for
            the current deployment environment.
            </summary>
            <param name="path">The relative path to resolve</param>
            <returns>The absolute path</returns>
        </member>
        <member name="P:VC3.Deployment.IDeploymentContext.Item(System.String)">
            <summary>
            Gets or sets global properties shared by all deployment
            tasks in the current deployment environment.
            </summary>
        </member>
        <member name="P:VC3.Deployment.IDeploymentContext.Keys">
            <summary>
            Gets all the keys of all values in this context.
            </summary>
        </member>
        <member name="M:VC3.Deployment.DeploymentItem.DefaultContext.GetFullPath(System.String)">
            <summary>
            Resolves a relative path into an absolute path for
            the current deployment environment.
            </summary>
            <param name="path">The relative path to resolve</param>
            <returns>The absolute path</returns>
        </member>
        <member name="P:VC3.Deployment.DeploymentItem.DefaultContext.Item(System.String)">
            <summary>
            Gets or sets global properties shared by all deployment
            tasks in the current deployment environment.
            </summary>
        </member>
        <member name="P:VC3.Deployment.DeploymentItem.DefaultContext.Keys">
            <summary>
            Gets the keys for values in this context
            </summary>
        </member>
        <member name="M:VC3.Deployment.DeploymentTask.Execute">
            <summary>
            Method that must be implemented by subclasses to cause the
            deployment task to be performed.
            </summary>
            <returns>True if the task completed successfully, otherwise false</returns>
        </member>
        <member name="M:VC3.Deployment.DeploymentTask.Commit">
            <summary>
            Commits changes performed by the task.
            </summary>
        </member>
        <member name="M:VC3.Deployment.DeploymentTask.Rollback">
            <summary>
            Rolls back changes performed by the task.
            </summary>
        </member>
        <member name="M:VC3.Deployment.DeploymentTask.GetTask(System.String)">
            <summary>
            Creates a new deployment task that has a <see cref="T:VC3.Deployment.TaskNameAttribute"/>
            that corresponds to the specified name.
            </summary>
            <param name="name">The name of the task to create</param>
            <returns>The new deployment task</returns>
        </member>
        <member name="M:VC3.Deployment.DeploymentTask.GetFiles(System.String[])">
            <summary>
            Gets the set of file paths being applied.
            </summary>
            <returns>An array of file paths</returns>
        </member>
        <member name="P:VC3.Deployment.AuthenticatedTask.Credentials">
            <summary>
            Gets or sets the <see cref="T:System.Net.NetworkCredential"/> to authenticate with.
            </summary>
        </member>
        <member name="P:VC3.Deployment.AuthenticatedTask.Domain">
            <summary>
            Gets or sets the domain of the user account.
            </summary>
        </member>
        <member name="P:VC3.Deployment.AuthenticatedTask.Username">
            <summary>
            Gets or sets the username to authenticate with.
            </summary>
        </member>
        <member name="P:VC3.Deployment.AuthenticatedTask.Password">
            <summary>
            Gets or sets the password to authenticate with.
            </summary>
        </member>
        <member name="M:VC3.Deployment.Web.WebTask.Commit">
            <summary>
            Commits IIS changes performed by the task.
            </summary>
        </member>
        <member name="M:VC3.Deployment.Web.WebTask.Rollback">
            <summary>
            Rolls back IIS changes performed by the task.
            </summary>
        </member>
        <member name="M:VC3.Deployment.Web.WebTask.FindSite">
            <summary>
            Finds the site based on the <see cref="P:VC3.Deployment.Web.WebTask.HostNames"/>.
            </summary>
            <returns>The <see cref="T:VC3.Deployment.Web.TransactedDirectoryEntry"/> for the site if found, otherwise null</returns>
        </member>
        <member name="M:VC3.Deployment.Web.WebTask.FindSite(System.Boolean)">
            <summary>
            Finds the site based on the <see cref="P:VC3.Deployment.Web.WebTask.HostNames"/>.
            </summary>
            <returns>The <see cref="T:VC3.Deployment.Web.TransactedDirectoryEntry"/> for the site if found, otherwise null</returns>
        </member>
        <member name="M:VC3.Deployment.Web.WebTask.CreateSite">
            <summary>
            Creates or updates a web site based on the current settings.
            </summary>
            <returns>The new or updated web site</returns>
        </member>
        <member name="M:VC3.Deployment.Web.WebTask.DeleteSite">
            <summary>
            Deletes a web site based on the current settings.
            </summary>
            <returns>The deleted web site</returns>
        </member>
        <member name="M:VC3.Deployment.Web.WebTask.FindVirtualDirectory">
            <summary>
            Finds the virtual directory the task should create or update.
            </summary>
            <returns>The directory, or null if the directory does not exist</returns>
        </member>
        <member name="M:VC3.Deployment.Web.WebTask.CreateVirtualDirectory">
            <summary>
            Creates or updates a virtual directory based on the current settings.
            </summary>
            <returns>The new or updated virtual directory</returns>
        </member>
        <member name="M:VC3.Deployment.Web.WebTask.DeleteVirtualDirectory">
            <summary>
            Deletes a virtual directory based on the current settings.
            </summary>
            <returns>The deleted virtual directory</returns>
        </member>
        <member name="M:VC3.Deployment.Web.WebTask.UpdateDirectory(VC3.Deployment.Web.TransactedDirectoryEntry)">
            <summary>
            Updates the specified directory based on current settings.
            </summary>
            <param name="directory">The directory to update</param>
        </member>
        <member name="M:VC3.Deployment.Web.WebTask.SetProperty(System.String,System.String)">
            <summary>
            Adds unknown properties to the <see cref="P:VC3.Deployment.Web.WebTask.Properties"/> collection.
            </summary>
            <param name="name">The name of the property</param>
            <param name="value">The value of the property</param>
            <returns>True to indicate that all properties are set</returns>
        </member>
        <member name="P:VC3.Deployment.Web.WebTask.Url">
            <summary>
            Gets or sets the url of the application.
            Setting this property will affect the <see cref="P:VC3.Deployment.Web.WebTask.HostNames"/>
            and <see cref="P:VC3.Deployment.Web.WebTask.VirtualPath"/> properties.
            </summary>
        </member>
        <member name="P:VC3.Deployment.Web.WebTask.Server">
            <summary>
            Gets or sets the name of the web server.
            </summary>
        </member>
        <member name="P:VC3.Deployment.Web.WebTask.VirtualPath">
            <summary>
            Gets or sets the virtual path for the virtual directory.
            </summary>
        </member>
        <member name="P:VC3.Deployment.Web.WebTask.PhysicalPath">
            <summary>
            Gets or sets the physical path to the web site or virtual directory.
            </summary>
        </member>
        <member name="P:VC3.Deployment.Web.WebTask.HostNames">
            <summary>
            Gets or sets the host names for the site.
            </summary>
        </member>
        <member name="P:VC3.Deployment.Web.WebTask.MakeApplication">
            <summary>
            Indicates whether to make the directory an application.
            </summary>
        </member>
        <member name="P:VC3.Deployment.Web.WebTask.Properties">
            <summary>
            Gets the set of properties that will be applied to the web site
            or virtual directory when the task is executed.
            </summary>
        </member>
        <member name="P:VC3.Deployment.Web.WebTask.Service">
            <summary>
            Gets the IIS web service directory entry for the web server.
            </summary>
        </member>
        <member name="T:VC3.Deployment.Web.WebServerStatus">
            <summary>
            Enum status.
            see: http://msdn.microsoft.com/library/en-us/iissdk/iis/ref_prog_iaorefiwsstat.asp?frame=true
            </summary>
        </member>
        <member name="T:VC3.Deployment.Web.StartSite">
            <summary>
            Starts an IIS website
            </summary>
        </member>
        <member name="T:VC3.Deployment.Web.StopSite">
            <summary>
            Base class for tasks for controling an IIS web site
            </summary>
            <example>
            VC3.Deployment.Web.StopSite /p Url=http://localhost/VC3.TestView.WebUI
            </example>
        </member>
        <member name="T:VC3.Deployment.Text.RegexTask">
            <summary>
            Base class for <see cref="T:VC3.Deployment.DeploymentTask"/>s that use a regular expression
            pattern and replace string.
            	Regex - the regular expression (or simple text) patthern to 
            		search.  If UseSimpleReplace is true, a simple string.Replace 
            		will be used rather than a regular expression match and replace.
            	ReplaceExpr - value to use when replacing matches.  If Regex is 
            		a regular expression, this value can be regular expression 
            		replacement string.
            	UseSimpleReplace - if true, a simple string.Replace will be 
            		used rather than a regular expression match and replace.  Default 
            		usage is regular expression.
            	IgnoreCase - when using regular expression, specifies that case 
            		should be ignored.
            	IgnoreWhitespace - when using regular expression, specifies that 
            		whitespace should be ignored.
            </summary>
        </member>
        <member name="T:VC3.Deployment.Service.ControlService">
            <summary>
            Summary description for StartService.
            </summary>
        </member>
        <member name="M:VC3.Deployment.Service.ControlService.Execute">
            <summary>
            Changes the service's status to <see cref="P:VC3.Deployment.Service.ControlService.Status"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VC3.Deployment.Service.ControlService.ChangeStatus(System.ServiceProcess.ServiceControllerStatus)">
            <summary>
            Changes status. Returns prior status
            </summary>
            <returns>Original status</returns>
        </member>
        <member name="M:VC3.Deployment.Service.ControlService.AssertStatus(System.ServiceProcess.ServiceControllerStatus,System.Int32)">
            <summary>
            Waits for service to enter into the specified status. Throws an exception if
            after maxWait the service is not in the state.
            </summary>
            <returns></returns>
        </member>
        <member name="P:VC3.Deployment.Service.ControlService.MachineName">
            <summary>
            Gets or sets the machine the service is running on.
            Defaults to the local machine (.).
            </summary>
        </member>
        <member name="P:VC3.Deployment.Service.ControlService.ServiceName">
            <summary>
            Gets or sets the name of the service. Used to identify the service.
            </summary>
        </member>
        <member name="P:VC3.Deployment.Service.ControlService.WaitSeconds">
            <summary>
            Amount of time to wait for the service to respond to control commands.
            Defaults to 30 seconds.
            </summary>
        </member>
        <member name="P:VC3.Deployment.Service.ControlService.Status">
            <summary>
            Gets or sets the new status of the service
            </summary>
        </member>
        <member name="T:VC3.Deployment.Service.StartService">
            <summary>
            Task to start a Windows service
            </summary>
            <example>
            VC3.Deployment.Service.StartService /r /p "ServiceName=Messenger"
            </example>
            <example>
            VC3.Deployment.Service.StartService /r /p "ServiceName=Messenger" WaitSeconds=1
            </example>
        </member>
        <member name="T:VC3.Deployment.Service.StopService">
            <summary>
            Task to stop a Windows service
            </summary>
            <example>
            VC3.Deployment.Service.StopService /r /p "ServiceName=Messenger"
            </example>
        </member>
        <member name="T:VC3.Deployment.Service.PauseService">
            <summary>
            Task to pause a Windows service
            </summary>
            <example>
            VC3.Deployment.Service.PauseService /r /p "ServiceName=Messenger"
            </example>
        </member>
        <member name="T:VC3.Deployment.Database.ScriptObjects">
            <summary>
            Task for generating scripts for creating objects in a database.
            </summary>
        </member>
        <member name="T:VC3.Deployment.Database.DatabaseTask">
            <summary>
            Base class for tasks that perform operations on a database.
            </summary>
        </member>
        <member name="M:VC3.Deployment.Database.DatabaseTask.Execute">
            <summary>
            Starts a database transaction for the current task.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VC3.Deployment.Database.DatabaseTask.Commit">
            <summary>
            Commits the database transaction for the current task.
            </summary>
        </member>
        <member name="M:VC3.Deployment.Database.DatabaseTask.Rollback">
            <summary>
            Rolls back the database transaction for the current task.
            </summary>
        </member>
        <member name="P:VC3.Deployment.Database.DatabaseTask.Server">
            <summary>
            Gets or sets the database server to perform the task on.
            </summary>
        </member>
        <member name="P:VC3.Deployment.Database.DatabaseTask.Database">
            <summary>
            Gets or sets the database to perform the task on.
            </summary>
        </member>
        <member name="P:VC3.Deployment.Database.DatabaseTask.Username">
            <summary>
            Gets or sets the username to use to connect to the database.
            </summary>
        </member>
        <member name="P:VC3.Deployment.Database.DatabaseTask.Password">
            <summary>
            Gets or sets the password to use to connect to the database.
            </summary>
        </member>
        <member name="P:VC3.Deployment.Database.DatabaseTask.IsUsernameRequired">
            <summary>
            
            </summary>
        </member>
        <member name="P:VC3.Deployment.Database.DatabaseTask.UseIntegratedSecurity">
            <summary>
            Specifies whether to use integrated security or use the specified
            <see cref="P:VC3.Deployment.Database.DatabaseTask.Username"/> and <see cref="P:VC3.Deployment.Database.DatabaseTask.Password"/>.
            </summary>
        </member>
        <member name="P:VC3.Deployment.Database.DatabaseTask.IsTransacted">
            <summary>
            Indicates if the task is performed within a transaction.
            Default = true.
            </summary>
        </member>
        <member name="P:VC3.Deployment.Database.DatabaseTask.NoConnectionString">
            <summary>
            Indicates whether a connection string has been specified.
            </summary>
        </member>
        <member name="P:VC3.Deployment.Database.DatabaseTask.ConnectionString">
            <summary>
            Gets or sets the connection string to use when connecting
            to the database to perform the task on.
            </summary>
        </member>
        <member name="M:VC3.Deployment.Database.ScriptObjects.IsScriptedSchema(System.String)">
            <summary>
            Determines if schema name is to be scripted
            </summary>
            <param name="owner">Name of schema to check</param>
            <returns>True if schema is specifically set to empty string</returns>
        </member>
        <member name="M:VC3.Deployment.Database.ScriptObjects.Execute">
            <summary>
            Generates the object create scripts based on the specified files
            and outputs the scripts to the specified directory.
            </summary>
            <returns>True if the script files were created successfully, otherwise false</returns>
        </member>
        <member name="P:VC3.Deployment.Database.ScriptObjects.OutputDirectory">
            <summary>
            Gets or sets the directory to output the scripts to.
            </summary>
        </member>
        <member name="P:VC3.Deployment.Database.ScriptObjects.Filter">
            <summary>
            Gets or sets the filter used to specify the set of
            objects to be scripted.
            </summary>
        </member>
        <member name="P:VC3.Deployment.Database.ScriptObjects.MaximumDaysOld">
            <summary>
            Gets or sets maximum age in days of objects to script
            </summary>
        </member>
        <member name="P:VC3.Deployment.Database.ScriptObjects.Schema">
            <summary>
            Gets or sets the schema(s) to script.  Schema names should be comma-delimited.  
            If Schema is explicitly set to an empty string, all schemas will be scripted.
            If Schema is not set, defaults to "dbo"
            </summary>
        </member>
        <member name="P:VC3.Deployment.Database.ScriptObjects.SchemaList">
            <summary>
            Gets an ArrayList of the schema name(s) to be scripted
            </summary>
        </member>
        <member name="T:VC3.Deployment.ApplicationManager.InstallationService">
            <remarks/>
        </member>
        <member name="M:VC3.Deployment.ApplicationManager.InstallationService.#ctor">
            <remarks/>
        </member>
        <member name="M:VC3.Deployment.ApplicationManager.InstallationService.GetCustomerName(System.String)">
            <remarks/>
        </member>
        <member name="M:VC3.Deployment.ApplicationManager.InstallationService.BeginGetCustomerName(System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:VC3.Deployment.ApplicationManager.InstallationService.EndGetCustomerName(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:VC3.Deployment.ApplicationManager.InstallationService.GetCustomerNameAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:VC3.Deployment.ApplicationManager.InstallationService.GetCustomerNameAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:VC3.Deployment.ApplicationManager.InstallationService.GetInstallationSettings(System.String)">
            <remarks/>
        </member>
        <member name="M:VC3.Deployment.ApplicationManager.InstallationService.BeginGetInstallationSettings(System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:VC3.Deployment.ApplicationManager.InstallationService.EndGetInstallationSettings(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:VC3.Deployment.ApplicationManager.InstallationService.GetInstallationSettingsAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:VC3.Deployment.ApplicationManager.InstallationService.GetInstallationSettingsAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:VC3.Deployment.ApplicationManager.InstallationService.GetManifest(System.String)">
            <remarks/>
        </member>
        <member name="M:VC3.Deployment.ApplicationManager.InstallationService.BeginGetManifest(System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:VC3.Deployment.ApplicationManager.InstallationService.EndGetManifest(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:VC3.Deployment.ApplicationManager.InstallationService.GetManifestAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:VC3.Deployment.ApplicationManager.InstallationService.GetManifestAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:VC3.Deployment.ApplicationManager.InstallationService.GetLicense(System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:VC3.Deployment.ApplicationManager.InstallationService.BeginGetLicense(System.String,System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:VC3.Deployment.ApplicationManager.InstallationService.EndGetLicense(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:VC3.Deployment.ApplicationManager.InstallationService.GetLicenseAsync(System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:VC3.Deployment.ApplicationManager.InstallationService.GetLicenseAsync(System.String,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:VC3.Deployment.ApplicationManager.InstallationService.GetEnvironmentSetting(System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:VC3.Deployment.ApplicationManager.InstallationService.BeginGetEnvironmentSetting(System.String,System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:VC3.Deployment.ApplicationManager.InstallationService.EndGetEnvironmentSetting(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:VC3.Deployment.ApplicationManager.InstallationService.GetEnvironmentSettingAsync(System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:VC3.Deployment.ApplicationManager.InstallationService.GetEnvironmentSettingAsync(System.String,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:VC3.Deployment.ApplicationManager.InstallationService.SetEnvironmentSetting(System.String,System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:VC3.Deployment.ApplicationManager.InstallationService.BeginSetEnvironmentSetting(System.String,System.String,System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:VC3.Deployment.ApplicationManager.InstallationService.EndSetEnvironmentSetting(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:VC3.Deployment.ApplicationManager.InstallationService.SetEnvironmentSettingAsync(System.String,System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:VC3.Deployment.ApplicationManager.InstallationService.SetEnvironmentSettingAsync(System.String,System.String,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:VC3.Deployment.ApplicationManager.InstallationService.NotifyDownloadComplete(System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:VC3.Deployment.ApplicationManager.InstallationService.BeginNotifyDownloadComplete(System.String,System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:VC3.Deployment.ApplicationManager.InstallationService.EndNotifyDownloadComplete(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:VC3.Deployment.ApplicationManager.InstallationService.NotifyDownloadCompleteAsync(System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:VC3.Deployment.ApplicationManager.InstallationService.NotifyDownloadCompleteAsync(System.String,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:VC3.Deployment.ApplicationManager.InstallationService.NotifyInstallComplete(System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:VC3.Deployment.ApplicationManager.InstallationService.BeginNotifyInstallComplete(System.String,System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:VC3.Deployment.ApplicationManager.InstallationService.EndNotifyInstallComplete(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:VC3.Deployment.ApplicationManager.InstallationService.NotifyInstallCompleteAsync(System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:VC3.Deployment.ApplicationManager.InstallationService.NotifyInstallCompleteAsync(System.String,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:VC3.Deployment.ApplicationManager.InstallationService.NotifyUninstallComplete(System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:VC3.Deployment.ApplicationManager.InstallationService.BeginNotifyUninstallComplete(System.String,System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:VC3.Deployment.ApplicationManager.InstallationService.EndNotifyUninstallComplete(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:VC3.Deployment.ApplicationManager.InstallationService.NotifyUninstallCompleteAsync(System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:VC3.Deployment.ApplicationManager.InstallationService.NotifyUninstallCompleteAsync(System.String,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:VC3.Deployment.ApplicationManager.InstallationService.NotifyMetric(System.String,System.String,System.DateTime,System.Double)">
            <remarks/>
        </member>
        <member name="M:VC3.Deployment.ApplicationManager.InstallationService.BeginNotifyMetric(System.String,System.String,System.DateTime,System.Double,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:VC3.Deployment.ApplicationManager.InstallationService.EndNotifyMetric(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:VC3.Deployment.ApplicationManager.InstallationService.NotifyMetricAsync(System.String,System.String,System.DateTime,System.Double)">
            <remarks/>
        </member>
        <member name="M:VC3.Deployment.ApplicationManager.InstallationService.NotifyMetricAsync(System.String,System.String,System.DateTime,System.Double,System.Object)">
            <remarks/>
        </member>
        <member name="M:VC3.Deployment.ApplicationManager.InstallationService.CancelAsync(System.Object)">
            <remarks/>
        </member>
        <member name="E:VC3.Deployment.ApplicationManager.InstallationService.GetCustomerNameCompleted">
            <remarks/>
        </member>
        <member name="E:VC3.Deployment.ApplicationManager.InstallationService.GetInstallationSettingsCompleted">
            <remarks/>
        </member>
        <member name="E:VC3.Deployment.ApplicationManager.InstallationService.GetManifestCompleted">
            <remarks/>
        </member>
        <member name="E:VC3.Deployment.ApplicationManager.InstallationService.GetLicenseCompleted">
            <remarks/>
        </member>
        <member name="E:VC3.Deployment.ApplicationManager.InstallationService.GetEnvironmentSettingCompleted">
            <remarks/>
        </member>
        <member name="E:VC3.Deployment.ApplicationManager.InstallationService.SetEnvironmentSettingCompleted">
            <remarks/>
        </member>
        <member name="E:VC3.Deployment.ApplicationManager.InstallationService.NotifyDownloadCompleteCompleted">
            <remarks/>
        </member>
        <member name="E:VC3.Deployment.ApplicationManager.InstallationService.NotifyInstallCompleteCompleted">
            <remarks/>
        </member>
        <member name="E:VC3.Deployment.ApplicationManager.InstallationService.NotifyUninstallCompleteCompleted">
            <remarks/>
        </member>
        <member name="E:VC3.Deployment.ApplicationManager.InstallationService.NotifyMetricCompleted">
            <remarks/>
        </member>
        <member name="T:VC3.Deployment.ApplicationManager.InstallationSettings">
            <remarks/>
        </member>
        <member name="P:VC3.Deployment.ApplicationManager.InstallationSettings.ProductKey">
            <remarks/>
        </member>
        <member name="P:VC3.Deployment.ApplicationManager.InstallationSettings.CustomerName">
            <remarks/>
        </member>
        <member name="P:VC3.Deployment.ApplicationManager.InstallationSettings.CustomerCode">
            <remarks/>
        </member>
        <member name="P:VC3.Deployment.ApplicationManager.InstallationSettings.ApplicationName">
            <remarks/>
        </member>
        <member name="P:VC3.Deployment.ApplicationManager.InstallationSettings.ApplicationVersion">
            <remarks/>
        </member>
        <member name="P:VC3.Deployment.ApplicationManager.InstallationSettings.ApplicationReleaseNotes">
            <remarks/>
        </member>
        <member name="T:VC3.Deployment.ApplicationManager.GetCustomerNameCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:VC3.Deployment.ApplicationManager.GetCustomerNameCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:VC3.Deployment.ApplicationManager.GetCustomerNameCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:VC3.Deployment.ApplicationManager.GetInstallationSettingsCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:VC3.Deployment.ApplicationManager.GetInstallationSettingsCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:VC3.Deployment.ApplicationManager.GetInstallationSettingsCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:VC3.Deployment.ApplicationManager.GetManifestCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:VC3.Deployment.ApplicationManager.GetManifestCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:VC3.Deployment.ApplicationManager.GetManifestCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:VC3.Deployment.ApplicationManager.GetLicenseCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:VC3.Deployment.ApplicationManager.GetLicenseCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:VC3.Deployment.ApplicationManager.GetLicenseCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:VC3.Deployment.ApplicationManager.GetEnvironmentSettingCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:VC3.Deployment.ApplicationManager.GetEnvironmentSettingCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:VC3.Deployment.ApplicationManager.GetEnvironmentSettingCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:VC3.Deployment.ApplicationManager.SetEnvironmentSettingCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:VC3.Deployment.ApplicationManager.SetEnvironmentSettingCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:VC3.Deployment.ApplicationManager.SetEnvironmentSettingCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:VC3.Deployment.ApplicationManager.NotifyDownloadCompleteCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:VC3.Deployment.ApplicationManager.NotifyInstallCompleteCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:VC3.Deployment.ApplicationManager.NotifyUninstallCompleteCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:VC3.Deployment.ApplicationManager.NotifyMetricCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:VC3.Deployment.Web.GetValue">
            <summary>
            Task for retrieving values from IIS.
            </summary>
        </member>
        <member name="M:VC3.Deployment.Web.GetValue.Execute">
            <summary>
            Searches IIS for entries matching the specified search criteria
            and retrieves the value of a property.
            </summary>
            <returns>True if the script file was created successfully, otherwise false</returns>
        </member>
        <member name="P:VC3.Deployment.Web.GetValue.Prefix">
            <summary>
            Gets or sets the prefix to prepend to the property name was storing
            the value in the current context.
            </summary>
        </member>
        <member name="P:VC3.Deployment.Web.GetValue.Property">
            <summary>
            Gets or sets the name of the property that will be initialized
            when the search is performed.
            </summary>
        </member>
        <member name="P:VC3.Deployment.Web.GetValue.Value">
            <summary>
            Gets the value retrieved when the task was executed.
            </summary>
        </member>
        <member name="P:VC3.Deployment.Web.GetValue.RootDirectory">
            <summary>
            Gets the root directory for the current web task.
            </summary>
        </member>
        <member name="T:VC3.Deployment.Install.DownloadPackage">
            <summary>
            Task for downling a package from the web service.
            </summary>
            <example>
            ExecuteTask.exe VC3.Deployment.Install.DownloadPackage ServiceUrl=http://appmansvc.test.vc3.com/installationservice.asmx ProductKey=2065-5629-8582-6115 ApplicationDirectory=C:\Program Files\AppDirectory SetupDirectory=
            </example>
        </member>
        <member name="P:VC3.Deployment.Install.ApplicationManagerTask.ServiceUrl">
            <summary>
            Url to the installation web service
            </summary>
        </member>
        <member name="P:VC3.Deployment.Install.ApplicationManagerTask.VersionNumber">
            <summary>
            Version number to generate a license for
            </summary>
        </member>
        <member name="P:VC3.Deployment.Install.ApplicationManagerTask.ProductKey">
            <summary>
            Product key used to identify the license.
            </summary>
        </member>
        <member name="P:VC3.Deployment.Install.DownloadPackage.LogDownloadProgress">
            <summary>
            Will log process milestones, as well as individual file download progress. 
            Impacts performance dramatically for sufficiently large packages and increases log size.
            </summary>
        </member>
        <member name="T:VC3.Deployment.Database.RunScript">
            <summary>
            Task for executing a SQL script on a database.
            </summary>
        </member>
        <member name="M:VC3.Deployment.Database.RunScript.Execute">
            <summary>
            Generates the data synchronization scripts for the specified
            tables and outputs them to the specified file path.
            </summary>
            <returns>True if the script file was created successfully, otherwise false</returns>
        </member>
        <member name="M:VC3.Deployment.Database.RunScript.SetProperty(System.String,System.String)">
            <summary>
            Adds unknown property values to a parameter collection that will
            be used to initialize script parameters.
            </summary>
            <param name="name">The name of the property</param>
            <param name="value">The value of the property</param>
            <returns>True, because all properties will be consumed</returns>
        </member>
        <member name="P:VC3.Deployment.Database.RunScript.Sql">
            <summary>
            Gets or sets the SQL expression to run.
            </summary>
        </member>
        <member name="P:VC3.Deployment.Database.RunScript.Parameters">
            <summary>
            Gets or sets a set of name/value pairs that will be used as parameters
            when the SQL script is executed.
            </summary>
        </member>
        <member name="T:VC3.Deployment.Web.CreateApplication">
            <summary>
            Task for creating IIS web sites.
            </summary>
            <remarks>
            VC3.Deployment.Web.CreateApplication /r /p "PhysicalPath=D:\InetPub\VC3 TestView\WebUI" Url=http://testview.test.vc3.com
            </remarks>
        </member>
        <member name="M:VC3.Deployment.Web.CreateApplication.Execute">
            <summary>
            Creates or updates an IIS web site using the current settings.
            </summary>
            <returns>True if the site was created or updated successfully, otherwise false</returns>
        </member>
        <member name="T:VC3.Deployment.Database.GetValue">
            <summary>
            Task for generating script to syncronize data in one or more tables
            in a destination database based on the data in a source database,
            without having to connect to the source database when the script is run.
            </summary>
        </member>
        <member name="M:VC3.Deployment.Database.GetValue.Execute">
            <summary>
            Generates the data synchronization scripts for the specified
            tables and outputs them to the specified file path.
            </summary>
            <returns>True if the script file was created successfully, otherwise false</returns>
        </member>
        <member name="P:VC3.Deployment.Database.GetValue.Sql">
            <summary>
            Gets or sets the SQL expression to use to retrieve the value.
            </summary>
        </member>
        <member name="P:VC3.Deployment.Database.GetValue.Property">
            <summary>
            Gets or sets the name of the property that will be initialized
            when the SQL statement is executed.
            </summary>
        </member>
        <member name="P:VC3.Deployment.Database.GetValue.Value">
            <summary>
            Gets the value retrieved when the task was executed.
            </summary>
        </member>
        <member name="P:VC3.Deployment.Database.GetValue.Parameters">
            <summary>
            Gets or sets a set of name/value pairs that will be used as parameters
            when the SQL script is executed.
            </summary>
        </member>
        <member name="P:VC3.Deployment.Windows.RunProcess.StartIn">
            <summary>
            Current working directory for commands
            </summary>
        </member>
        <member name="P:VC3.Deployment.Windows.RunProcess.Exe">
            <summary>
            Path to executable to run
            </summary>
        </member>
        <member name="P:VC3.Deployment.Windows.RunProcess.Args">
            <summary>
            Args passed to <see cref="P:VC3.Deployment.Windows.RunProcess.Exe"/>
            </summary>
        </member>
        <member name="P:VC3.Deployment.Windows.RunProcess.RollbackExe">
            <summary>
            Optional. Executable to run on a <see cref="M:VC3.Deployment.Windows.RunProcess.Rollback"/>
            </summary>
        </member>
        <member name="P:VC3.Deployment.Windows.RunProcess.RollbackArgs">
            <summary>
            Optional. Args to use during a <see cref="M:VC3.Deployment.Windows.RunProcess.Rollback"/>.  Passed to either
            <see cref="P:VC3.Deployment.Windows.RunProcess.RollbackExe"/>, if specified, or <see cref="P:VC3.Deployment.Windows.RunProcess.Exe"/>.
            </summary>
        </member>
        <member name="P:VC3.Deployment.Windows.RunProcess.CommitExe">
            <summary>
            Optional. Executable to run on a <see cref="M:VC3.Deployment.Windows.RunProcess.Commit"/>.
            </summary>
        </member>
        <member name="P:VC3.Deployment.Windows.RunProcess.CommitArgs">
            <summary>
            Optional. Args to use during a <see cref="M:VC3.Deployment.Windows.RunProcess.Commit"/>.  Passed to either
            <see cref="P:VC3.Deployment.Windows.RunProcess.CommitExe"/>, if specified, or <see cref="P:VC3.Deployment.Windows.RunProcess.Exe"/>.
            </summary>
        </member>
        <member name="T:VC3.Deployment.Install.SetupInstaller">
            <summary>
            <see cref="T:System.Configuration.Install.Installer"/> bootstrap that downloads setup files and
            executes the real application installer.
            </summary>
        </member>
        <member name="T:VC3.Deployment.Database.ApplyScripts">
            <summary>
            Task for applying change and object scripts to a database.
            </summary>
        </member>
        <member name="M:VC3.Deployment.Database.ApplyScripts.GetAllModules">
            <summary>
            Obtain the list of DBmodules depending on what was passed in to the task
            </summary>
            <returns></returns>
        </member>
        <member name="M:VC3.Deployment.Database.ApplyScripts.InitializeModules(System.Collections.Generic.IDictionary{System.String,VC3.Deployment.Database.DbModule})">
            <summary>
            Reads in all modules from the directory store and database and sets up
            dependencies
            </summary>
        </member>
        <member name="M:VC3.Deployment.Database.ApplyScripts.Execute">
            <summary>
            Applies the specified change and object script files to
            the specified database.
            </summary>
            <returns>True if the scripts were applied successfully, otherwise false</returns>
        </member>
        <member name="P:VC3.Deployment.Database.ApplyScripts.Variables">
            <summary>
            Gets or sets a set of name/value pairs that will be used to perform
            substitutions before each script is applied.
            </summary>
            <remarks>
            The syntax {variablename} should be used in script files in order
            to use this capability.
            </remarks>
        </member>
        <member name="P:VC3.Deployment.Database.ApplyScripts.ModulesDirectory">
            <summary>
            The directory that hold's each module's directory of scripts
            </summary>
        </member>
        <member name="P:VC3.Deployment.Database.ApplyScripts.Environment">
            <summary>
            The environment that is being used to apply scripts (test/production)
            </summary>
        </member>
        <member name="P:VC3.Deployment.Database.ApplyScripts.ScriptFiles">
            <summary>
            A list of script file locations.
            </summary>
            <remarks>
            Supports both explicit file paths and directory wildcard expressions:
            
            c:\scripts\myscript.sql
            c:\scripts\*.sql
            </remarks>
        </member>
        <member name="P:VC3.Deployment.Database.ApplyScripts.DoNotExecute">
            <summary>
            Indicates whether to execute the scripts being applied or
            just output the contents of the scripts for debug purposes.
            </summary>
        </member>
        <member name="P:VC3.Deployment.Database.ApplyScripts.IgnoreMissingModules">
            <summary>
            Indicates whether to ignore or throw an exception when a module 
            is found in the modules table but not the modules directory.
            </summary>
        </member>
        <member name="P:VC3.Deployment.Database.ApplyScripts.IgnoreMissingIncludes">
            <summary>
            Indicates whether to ignore if a missing file referenced an #include should be ignored.
            </summary>
        </member>
        <member name="M:VC3.Deployment.Database.DbModule.GetChangeScripts(VC3.Deployment.Database.Connection)">
            <summary>
            Returns all change scripts that have not yet been run
            </summary>
            <returns></returns>
        </member>
        <member name="M:VC3.Deployment.Database.DbModule.GetObjectScripts(VC3.Deployment.Database.Connection)">
            <summary>
            Gets all object scripts associated with this module
            </summary>
            <returns></returns>
        </member>
        <member name="T:VC3.Deployment.Database.DummyModule">
            <summary>
            Represents a stub implementation of the DbModule abstract class that acts as a placeholder
            </summary>
        </member>
        <member name="T:VC3.Deployment.Xml.GetValue">
            <summary>
            Task for generating script to syncronize data in one or more tables
            in a destination database based on the data in a source database,
            without having to connect to the source database when the script is run.
            </summary>
        </member>
        <member name="T:VC3.Deployment.Xml.XPathTask">
            <summary>
            Base class for tasks that use XPath to perform operations on XML files.
            </summary>
        </member>
        <member name="T:VC3.Deployment.Xml.XmlTask">
            <summary>
            Base class for tasks that perform operations on XML files.
            </summary>
        </member>
        <member name="P:VC3.Deployment.Xml.XmlTask.InputFile">
            <summary>
            Gets or sets the path to the input XML file.
            </summary>
        </member>
        <member name="P:VC3.Deployment.Xml.XPathTask.XPath">
            <summary>
            Gets or sets the XPath expression to use to set or retrieve the value.
            </summary>
        </member>
        <member name="P:VC3.Deployment.Xml.XPathTask.Value">
            <summary>
            Gets or sets the value used when the task is executed.
            </summary>
        </member>
        <member name="P:VC3.Deployment.Xml.XPathTask.AllowNullNode">
            <summary>
            If true the Node property will return null if no node is matched, otherwise
            an exception will be thrown.  Default: false.
            </summary>
        </member>
        <member name="P:VC3.Deployment.Xml.XPathTask.Node">
            <summary>
            Gets the <see cref="T:System.Xml.XmlNode"/> represented by the XPath expression,
            or null if the expression did not evaluate to a valid node.
            </summary>
        </member>
        <member name="M:VC3.Deployment.Xml.GetValue.Execute">
            <summary>
            Generates the data synchronization scripts for the specified
            tables and outputs them to the specified file path.
            </summary>
            <returns>True if the script file was created successfully, otherwise false</returns>
        </member>
        <member name="P:VC3.Deployment.Xml.GetValue.Property">
            <summary>
            Gets or sets the name of the property that will be initialized
            when the search is performed.
            </summary>
        </member>
        <member name="T:VC3.Deployment.Reporting.DeploySqlReports">
            <summary>
            Task for deploying SQL Server reports.
            </summary>
        </member>
        <member name="M:VC3.Deployment.Reporting.DeploySqlReports.Execute">
            <summary>
            Deploys the specified SQL reports to the reporting server.
            </summary>
            <returns>True if all reports were successfully deployed, otherwise false</returns>
        </member>
        <member name="P:VC3.Deployment.Reporting.DeploySqlReports.Url">
            <summary>
            Gets or sets the url of the report server web service.
            </summary>
        </member>
        <member name="P:VC3.Deployment.Reporting.DeploySqlReports.ExecutionUrl">
            <summary>
            Gets or sets the execution url of the report server web service. This value
            is not applicable to SSRS 2005 and earlier
            </summary>
        </member>
        <member name="P:VC3.Deployment.Reporting.DeploySqlReports.Version">
            <summary>
            Gets or sets SSRS version
            </summary>
        </member>
        <member name="P:VC3.Deployment.Reporting.DeploySqlReports.ServiceTimeout">
            <summary>
            Gets or sets the service timeout
            </summary>
        </member>
        <member name="P:VC3.Deployment.Reporting.DeploySqlReports.Path">
            <summary>
            Gets or sets the path to the report folder to publish the reports.
            </summary>
        </member>
        <member name="P:VC3.Deployment.Reporting.DeploySqlReports.ReportFiles">
            <summary>
            A list of report file locations.
            </summary>
            <remarks>
            Supports both explicit file paths and directory wildcard expressions:
            
            c:\reports\myreport.rdl
            c:\reports\*.rdl
            </remarks>
        </member>
        <member name="P:VC3.Deployment.Reporting.DeploySqlReports.DataSourceFiles">
            <summary>
            A list of report data sources.
            </summary>
            <remarks>
            Supports both explicit file paths and directory wildcard expressions:
            
            c:\reports\mydatasource.rds
            c:\reports\*.rds
            </remarks>
        </member>
        <member name="P:VC3.Deployment.Reporting.DeploySqlReports.DataSourceUsername">
            <summary>
            Property DataSourceUsername (string)
            </summary>
        </member>
        <member name="P:VC3.Deployment.Reporting.DeploySqlReports.DataSourcePassword">
            <summary>
            Property DataSourcePassword (string)
            </summary>
        </member>
        <member name="T:VC3.Deployment.Net.RegisterDns">
            <summary>
            Task for deploying SQL Server reports.
            </summary>
        </member>
        <member name="T:VC3.Deployment.Net.DnsTask">
            <summary>
            Task for deploying SQL Server reports.
            </summary>
        </member>
        <member name="M:VC3.Deployment.Net.DnsTask.Initialize">
            <summary>
            Initializes the <see cref="P:VC3.Deployment.Net.DnsTask.Scope"/> based on the current settings.
            </summary>
        </member>
        <member name="M:VC3.Deployment.Net.DnsTask.AddAlias(System.String,System.String)">
            <summary>
            Adds or updates a domain name alias.
            </summary>
            <param name="host">The host the alias is for</param>
            <param name="alias">The alias for the host</param>
        </member>
        <member name="M:VC3.Deployment.Net.DnsTask.IsRegistered(System.String)">
            <summary>
            Determines if the specified alias is registered.
            </summary>
            <param name="alias">The alias to check.</param>
            <returns>True if the alias is registered, otherwise false.</returns>
        </member>
        <member name="P:VC3.Deployment.Net.DnsTask.Server">
            <summary>
            Gets or sets the name of the DNS server.
            </summary>
        </member>
        <member name="P:VC3.Deployment.Net.DnsTask.Scope">
            <summary>
            Gets the <see cref="T:System.Management.ManagementScope"/> instance required to
            register and unregister DNS entries.
            </summary>
        </member>
        <member name="M:VC3.Deployment.Net.RegisterDns.Execute">
            <summary>
            Registers aliases for the specified host.
            </summary>
        </member>
        <member name="P:VC3.Deployment.Net.RegisterDns.Host">
            <summary>
            Gets or sets the name of the host to register aliases for.
            </summary>
        </member>
        <member name="P:VC3.Deployment.Net.RegisterDns.Aliases">
            <summary>
            Gets or sets the aliases to register.
            </summary>
        </member>
        <member name="T:VC3.Deployment.Database.BackupDatabase">
            <summary>
            Creates a backup of a SQL Server database.
            </summary>
            <example>
            VC3.Deployment.Database.BackupDatabase /p Server=illuminati UseIntegratedSecurity=true Database=RestoreTest BackupFile=RestoreTest.bak
            </example>
        </member>
        <member name="M:VC3.Deployment.Database.BackupDatabase.Execute">
            <summary>
            Generates the data synchronization scripts for the specified
            tables and outputs them to the specified file path.
            </summary>
            <returns>True if the script file was created successfully, otherwise false</returns>
        </member>
        <member name="P:VC3.Deployment.Database.BackupDatabase.BackupFile">
            <summary>
            Path to the file to restore. NOTE: Path must be local to 
            the <see cref="P:VC3.Deployment.Database.DatabaseTask.Server"/>. Defaults to: {DatabaseName}.bak
            </summary>
        </member>
        <member name="P:VC3.Deployment.Database.BackupDatabase.FileDescription">
            <summary>
            Description of the backup that is included in the file.
            </summary>
        </member>
        <member name="P:VC3.Deployment.Database.BackupDatabase.Append">
            <summary>
            If true, the backup will be appended to the existing backup file.
            If false, an existing backup file will be overwritten with this backup.
            Default = false.
            </summary>
        </member>
        <member name="T:VC3.Deployment.Database.RestoreDatabase">
            <summary>
            Restores a database from a backup file.
            </summary>
            <example>
            VC3.Deployment.Database.RestoreDatabase /p Server=illuminati UseIntegratedSecurity=true NewDatabase=RestoreTest BackupFile=d:\MSSQL\BACKUP\TestView_Clean.bak DataFile=d:\MSSQL\Data\RestoreTest.mdf LogFile=d:\MSSQL\Data\RestoreTest_log.ldf AllowOverwrite=false LogFileName=TestView_Log DataFileName=TestView_Data
            </example>
        </member>
        <member name="M:VC3.Deployment.Database.RestoreDatabase.Execute">
            <summary>
            Generates the data synchronization scripts for the specified
            tables and outputs them to the specified file path.
            </summary>
            <returns>True if the script file was created successfully, otherwise false</returns>
        </member>
        <member name="P:VC3.Deployment.Database.RestoreDatabase.AllowOverwrite">
            <summary>
            If true, an existing database, if any, will
            be deleted before restoring the database.
            Default = false.
            </summary>
        </member>
        <member name="P:VC3.Deployment.Database.RestoreDatabase.NewDatabase">
            <summary>
            The name of the database to create
            </summary>
        </member>
        <member name="P:VC3.Deployment.Database.RestoreDatabase.BackupFile">
            <summary>
            Path to the file to restore. NOTE: Path must be local to 
            the <see cref="P:VC3.Deployment.Database.DatabaseTask.Server"/>.
            </summary>
        </member>
        <member name="P:VC3.Deployment.Database.RestoreDatabase.DataFileName">
            <summary>
            Logical name of database data file to create. 
            Must correspond to the logical file name of the data file within the backup file.
            </summary>
        </member>
        <member name="P:VC3.Deployment.Database.RestoreDatabase.DataFile">
            <summary>
            Database data file to create. NOTE: Path must be local to 
            the <see cref="P:VC3.Deployment.Database.DatabaseTask.Server"/>.
            </summary>
        </member>
        <member name="P:VC3.Deployment.Database.RestoreDatabase.DataFileGrowth">
            <summary>
            Indicates how the data file can grow
            </summary>
        </member>
        <member name="P:VC3.Deployment.Database.RestoreDatabase.LogFileName">
            <summary>
            Logical database log file to create.
            Must correspond to the logical file name of the log file within the backup file.
            </summary>
        </member>
        <member name="P:VC3.Deployment.Database.RestoreDatabase.LogFile">
            <summary>
            Database transaction log file to create. NOTE: Path must be local to 
            the <see cref="P:VC3.Deployment.Database.DatabaseTask.Server"/>.
            </summary>
        </member>
        <member name="P:VC3.Deployment.Database.RestoreDatabase.LogFileGrowth">
            <summary>
            Indicates how the log file can grow.
            </summary>
        </member>
        <member name="T:VC3.Deployment.Database.DropDatabase">
            <summary>
            Drops a database by name.
            The actual drop occurs in both Commit() and Rollback().  This task is currently implemented to
            discard temporary recovery databases.
            </summary>
            <example>
            VC3.Deployment.Database.DropDatabase /p Server=illuminati UseIntegratedSecurity=true DatabaseToDrop=RestoreTest
            </example>
        </member>
        <member name="M:VC3.Deployment.Database.DropDatabase.Commit">
            <summary>
            Drop database
            </summary>
        </member>
        <member name="M:VC3.Deployment.Database.DropDatabase.Rollback">
            <summary>
            Drop database
            </summary>
        </member>
        <member name="T:VC3.Deployment.Database.CreateLogin">
            <summary>
            Creates a database login
            </summary>
            <example>
            ExecuteTask.exe VC3.Deployment.Database.CreateLogin Server=illuminati UseIntegratedSecurity=true NewUsername=SecurityTest NewPassword=password defaultdatabase=northwind roles=sysadmin;northwind:db_owner
            </example>
        </member>
        <member name="M:VC3.Deployment.Database.CreateLogin.Execute">
            <summary>
            Generates the data synchronization scripts for the specified
            tables and outputs them to the specified file path.
            </summary>
            <returns>True if the script file was created successfully, otherwise false</returns>
        </member>
        <member name="P:VC3.Deployment.Database.CreateLogin.NewUsername">
            <summary>
            Username of the login to create.
            </summary>
        </member>
        <member name="P:VC3.Deployment.Database.CreateLogin.NewPassword">
            <summary>
            Password of the login to create.
            </summary>
        </member>
        <member name="P:VC3.Deployment.Database.CreateLogin.DefaultDatabase">
            <summary>
            Default database assocated with the login
            </summary>
        </member>
        <member name="P:VC3.Deployment.Database.CreateLogin.Roles">
            <summary>
            Semi-colon delimited list of roles. Role assignments are
            in the format:
            	database:role 
            OR
            	serverRole
            </summary>
        </member>
        <member name="T:VC3.Deployment.Xml.Exists">
            <summary>
            Task for determining if a node exists.
            </summary>
        </member>
        <member name="M:VC3.Deployment.Xml.Exists.Execute">
            <summary>
            Generates the data synchronization scripts for the specified
            tables and outputs them to the specified file path.
            </summary>
            <returns>True if the script file was created successfully, otherwise false</returns>
        </member>
        <member name="P:VC3.Deployment.Xml.Exists.Property">
            <summary>
            Gets or sets the name of the property that will be initialized
            when the search is performed.
            </summary>
        </member>
        <member name="T:VC3.Deployment.Windows.SetRegistryKey">
            <summary>
            </summary>
        </member>
        <member name="T:VC3.Deployment.Web.DeleteApplication">
            <summary>
            Task for deleting IIS web applications.
            </summary>
            <remarks>
            VC3.Deployment.Web.DeleteApplication /r "PhysicalPath=D:\InetPub\VC3 TestView\WebUI" HostNames=testview.test.vc3.com
            </remarks>
        </member>
        <member name="M:VC3.Deployment.Web.DeleteApplication.Execute">
            <summary>
            Deletes an IIS web site using the current settings.
            </summary>
            <returns>True if the site was deleted successfully, otherwise false</returns>
        </member>
        <member name="T:VC3.Deployment.IO.ForEach">
            <summary>
             Iterates over a list of files in a directory based on some search expression.
             Properties:
            	Directory - the path to the directory to search.
                SearchExpr - the expression to use for searching files.
                Property - the property to use to store the file name on each iteration.
                SearchSubDirectories - indicates whether subdirectories should 
            		be included in the search.  By default only the top-level is searched.
                AreResultsExpected - indicates whether an error should be thrown if no 
                    results are returned by the search.  Disabled by default.
            </summary>
        </member>
        <member name="T:VC3.Deployment.DeploymentItemGenerator">
            <summary>
            Base class for a <see cref="T:VC3.Deployment.DeploymentItem"/> that generates the 
            context for other <see cref="T:VC3.Deployment.DeploymentItem"/>s.
            </summary>
        </member>
        <member name="P:VC3.Deployment.DeploymentItemGenerator.IndexProperty">
            <summary>
            Gets or sets the name of the property that will be used 
            to store the index of the current iteration.
            </summary>
        </member>
        <member name="T:VC3.Deployment.InstallUtil">
            <summary>
            Task with the functionality of InstallUtil.exe.  Runs embedded installers
            within an assembly.
            </summary>
        </member>
        <member name="P:VC3.Deployment.InstallUtil.Assembly">
            <summary>
            Gets or sets the path to the assembly to install.
            </summary>
        </member>
        <member name="P:VC3.Deployment.InstallUtil.CommandLine">
            <summary>
            Gets the dictionary of command line options
            </summary>
        </member>
        <member name="P:VC3.Deployment.InstallUtil.IsInstalled">
            <summary>
            Indicates if an install (true) or uninstall (false) will be performed.
            </summary>
        </member>
        <member name="T:VC3.Deployment.InstallUtil.IsolatedObject">
            <summary>
            Helper class to assist in hosting an object in a seperate <see cref="T:System.AppDomain"/>
            </summary>
        </member>
        <member name="T:VC3.Deployment.Xml.SetValue">
            <summary>
            Task for generating script to syncronize data in one or more tables
            in a destination database based on the data in a source database,
            without having to connect to the source database when the script is run.
            </summary>
        </member>
        <member name="M:VC3.Deployment.Xml.SetValue.Execute">
            <summary>
            Generates the data synchronization scripts for the specified
            tables and outputs them to the specified file path.
            </summary>
            <returns>True if the script file was created successfully, otherwise false</returns>
        </member>
        <member name="T:VC3.Deployment.Xml.AddNode">
            <summary>
            AddNode provides a means for the installation process to modify the application configuration file 
            by adding Elements or Attributes.
            </summary>
            <remarks>
            The following actions can be performed using the AddNode class.	
            <list type="bullet">
            <item>Add a new, empty Element to an existing Element. To perform this function, create the following
            entry in the install.xml file: &lt; xmladdnode inputfile="path to config file" parent="xPath expression of parent Element" child="name of new child element" /&gt;
            </item>
            <item>Add an Attribute to an existing Element. To perform this function, create the following
            entry in the install.xml file: &lt; xmladdnode inputfile="path to config file" parent="xPath expression of parent Element" attribute="name of new Attribute" value="value of new Attribute" /&gt;
            </item>
            <item>Add an Element with Attribute to an existing Element. To perform this function, create the following
            entry in the install.xml file: &lt; xmladdnode inputfile="path to config file" parent="xPath expression of parent Element" child="name of new child element" attribute="name of new Attribute" value="value of new Attribute" /&gt;
            </item>
            </list>
            
            <para>
            AddNode only supports single node selection of parent nodes.
            </para>
            </remarks>
        </member>
        <member name="M:VC3.Deployment.Xml.AddNode.GetElement(System.String)">
            <summary>
            Returns the <see cref="T:System.Xml.XmlNode"/> represented by the xPath expression,
            or null if the expression did not evaluate to a valid node.
            </summary>
        </member>
        <member name="M:VC3.Deployment.Xml.AddNode.Execute">
            <summary>
            Creates the required XmlNode and adds it in the appropriate location.
            </summary>
            <returns>True if the script file was created successfully, otherwise false</returns>
        </member>
        <member name="P:VC3.Deployment.Xml.AddNode.Parent">
            <summary>
            Gets or sets the XPath expression of an existing parent node to contain the added node.
            </summary>
        </member>
        <member name="P:VC3.Deployment.Xml.AddNode.Child">
            <summary>
            Gets or sets the XPath expression of the child node to be added to the parent.
            </summary>
        </member>
        <member name="P:VC3.Deployment.Xml.AddNode.Value">
            <summary>
            Gets or sets the value of the Attribute to be added.
            </summary>
        </member>
        <member name="P:VC3.Deployment.Xml.AddNode.Attribute">
            <summary>
            Gets or sets the name of the Attribute to be added.
            </summary>
        </member>
        <member name="P:VC3.Deployment.Xml.AddNode.Action">
            <summary>
            Gets the <see cref="T:VC3.Deployment.Xml.AddNodeAction"/> that is being performed by the Task.
            The Action is determined by the combination of properties set.
            </summary>
        </member>
        <member name="T:VC3.Deployment.Xml.AddNodeAction">
            <summary>
            Enumeration of possible actions available to the AddXmlNode Task
            </summary>
        </member>
        <member name="T:VC3.Deployment.Web.GetUrl">
            <summary>
            Task for retrieving the url that maps to a physical path.
            </summary>
            <example>
             VC3.Deployment.Web.GetUrl "PhysicalPath=C:\Program Files\VC3 TestView\WebUI" Property=Web.Url
            </example>
        </member>
        <member name="M:VC3.Deployment.Web.GetUrl.Execute">
            <summary>
            Searches IIS for entries matching the specified search criteria
            and retrieves the value of a property.
            </summary>
            <returns>True if the script file was created successfully, otherwise false</returns>
        </member>
        <member name="M:VC3.Deployment.Web.GetUrl.FindMatchingDirectory(System.DirectoryServices.DirectoryEntry)">
            <summary>
            Recursively searches for directories looking for a directory
            that has the specified <see cref="P:VC3.Deployment.Web.WebTask.PhysicalPath"/>.
            </summary>
            <param name="directory">The <see cref="T:System.DirectoryServices.DirectoryEntry"/> to search</param>
            <returns>The first matching <see cref="T:System.DirectoryServices.DirectoryEntry"/> if found, otherwise null</returns>
        </member>
        <member name="P:VC3.Deployment.Web.GetUrl.Property">
            <summary>
            Gets or sets the name of the property that will be initialized
            when the search is performed.
            </summary>
        </member>
        <member name="T:VC3.Deployment.IO.TransactedDirectoryInfo">
            <summary>
            Summary description for TransactedDirectoryInfo.
            </summary>
        </member>
        <member name="T:VC3.Deployment.IO.TransactedFileSystemInfo">
            <summary>
            Base class for transacted file system objects
            </summary>
        </member>
        <member name="M:VC3.Deployment.IO.TransactedFileSystemInfo.SetAccess(System.String,VC3.Deployment.IO.FileSystemAccess,System.Boolean)">
            <summary>
            Sets the access to the file system object for the specified user.
            </summary>
            <param name="userOrGroup"></param>
            <param name="access"></param>
        </member>
        <member name="M:VC3.Deployment.IO.TransactedFileSystemInfo.Rollback">
            <summary>
            Restores the file to the state it was in orginally.
            </summary>
        </member>
        <member name="M:VC3.Deployment.IO.TransactedFileSystemInfo.Commit">
            <summary>
            Removes temporary files created to transact the changes
            </summary>
        </member>
        <member name="P:VC3.Deployment.IO.TransactedFileSystemInfo.BackupDirectory">
            <summary>
            Directory to back files and directories to
            </summary>
        </member>
        <member name="F:VC3.Deployment.IO.TransactedDirectoryInfo.MaxRetries">
            <summary>
            Number of times to retry after an IO failure
            </summary>
        </member>
        <member name="M:VC3.Deployment.IO.TransactedDirectoryInfo.#ctor(System.IO.DirectoryInfo)">
            <summary>
            Creates a new <see cref="T:VC3.Deployment.IO.TransactedDirectoryInfo"/> instance that
            wrappers the specified <see cref="T:System.IO.DirectoryInfo"/>.
            </summary>
            <param name="directory">The directory to transact operations on</param>
        </member>
        <member name="M:VC3.Deployment.IO.TransactedDirectoryInfo.#ctor(System.String)">
            <summary>
            Creates a new <see cref="T:VC3.Deployment.IO.TransactedDirectoryInfo"/> instance that
            wrappers the specified directory.
            </summary>
            <param name="directoryName">The name of the directory to transact operations on</param>
        </member>
        <member name="M:VC3.Deployment.IO.TransactedDirectoryInfo.Delete">
            <summary>
            Deletes the current directory.
            </summary>
        </member>
        <member name="M:VC3.Deployment.IO.TransactedDirectoryInfo.Delete(System.Boolean)">
            <summary>
            Deletes the current directory.
            </summary>
            <param name="recursive">Indicates whether to recursively delete child files and directories</param>
        </member>
        <member name="M:VC3.Deployment.IO.TransactedDirectoryInfo.Empty">
            <summary>
            Deletes all files and sub directories within this one.
            </summary>
        </member>
        <member name="M:VC3.Deployment.IO.TransactedDirectoryInfo.Copy(System.String,System.String,VC3.Deployment.IO.FileSystemChangeLog)">
            <summary>
            Recursively copies a directory tree.
            </summary>
            <param name="source">The source directory</param>
            <param name="destination">The destination directory</param>
        </member>
        <member name="M:VC3.Deployment.IO.TransactedDirectoryInfo.Create(System.String,VC3.Deployment.IO.FileSystemChangeLog)">
            <summary>
            Recursively ensures that directories in the specified
            path exist.
            </summary>
            <param name="path">The path of the directory to create</param>
            <returns>
            The path of the first directory created by the request,
            or null if not directories where created.
            </returns>
        </member>
        <member name="M:VC3.Deployment.IO.TransactedDirectoryInfo.Delete(System.String,VC3.Deployment.IO.FileSystemChangeLog)">
            <summary>
            Deletes the specified directory and all sub objects.
            In order to compensate for other processes locking
            the directory, this method will attempt to delete the directory
            several times if needed.
            </summary>
            <param name="path">The path of the directory to delete.</param>
        </member>
        <member name="M:VC3.Deployment.IO.TransactedDirectoryInfo.DeleteShallow(System.String,VC3.Deployment.IO.FileSystemChangeLog)">
            <summary>
            Deletes the specified directory.
            In order to compensate for other processes locking
            the directory, this method will attempt to delete the directory
            several times if needed.
            </summary>
        </member>
        <member name="M:VC3.Deployment.IO.TransactedDirectoryInfo.Empty(System.String,VC3.Deployment.IO.FileSystemChangeLog)">
            <summary>
            Deletes the specified directory.
            In order to compensate for other processes locking
            the directory, this method will attempt to delete the directory
            several times if needed.
            </summary>
            <param name="path">The path of the directory to delete.</param>
        </member>
        <member name="P:VC3.Deployment.IO.TransactedDirectoryInfo.Exists">
            <summary>
            Indicates whether the current directory exists.
            </summary>
        </member>
        <member name="P:VC3.Deployment.IO.TransactedDirectoryInfo.FullName">
            <summary>
            Gets the full name and path of the directory.
            </summary>
        </member>
        <member name="P:VC3.Deployment.IO.TransactedDirectoryInfo.Name">
            <summary>
            Gets the name of the directory.
            </summary>
        </member>
        <member name="T:VC3.Deployment.Install.IValidator">
            <summary>
            Defines the functionality required to sign and validate files
            and data in order to verify files downloaded during an installation.
            </summary>
        </member>
        <member name="M:VC3.Deployment.Install.IValidator.Validate(System.IO.Stream,System.String)">
            <summary>
            Validates the specified file.
            </summary>
            <param name="file">The stream for the file being validated</param>
            <param name="signature">The keyed-hash signature to validate against</param>
            <returns>True if the file, hashed with validation key, matches the signature</returns>
        </member>
        <member name="M:VC3.Deployment.Install.IValidator.Validate(System.String,System.String)">
            <summary>
            Validates the specified data.
            </summary>
            <param name="data">The data to validate</param>
            <param name="signature">The keyed-hash signature to validate against</param>
            <returns>True if the data, hashed with validation key, matches the signature</returns>
        </member>
        <member name="M:VC3.Deployment.Install.IValidator.Sign(System.IO.Stream)">
            <summary>
            Creates a signature for the specified file by hashing the file with a key. 
            </summary>
            <param name="file">The stream for the file to sign</param>
            <returns>A signed hash for the whole file</returns>
        </member>
        <member name="M:VC3.Deployment.Install.IValidator.Sign(System.String)">
            <summary>
            Creates a signature for the specified file by hashing the file with a key. 
            </summary>
            <param name="data">The data to sign</param>
            <returns>A signed hash for the whole file</returns>
        </member>
        <member name="P:VC3.Deployment.Install.IValidator.Key">
            <summary>
            Gets or sets the key to use when signing or validating files or data.
            </summary>
        </member>
        <member name="T:VC3.Deployment.Database.DeploySqlAssembly">
            <summary>
            Deploy a Sql Crl assembly.  This class registers a Sql Clr assembly
            with a Sql Server.  Methods/Types are not registered by this class.
            
            Valid Parameters:
            AssemblyPath: The full path to the assembly to upload, including assembly name
            AssemblyName: The name of the assembly or top-level namespace (does not include ".dll")
            PermissionSet: Default permission
            	valid options:
            		0 = SAFE (Default)
            		1 = EXTERNAL_ACCESS
            		2 = UNSAFE
            ConnectionString: ConnectionString for the destination Sql Server database
            DeployMethods: Determines whether or not to deploy methods as part of the assembly deployment
            	valid options:
            		true (default)
            		false
            </summary>
        </member>
        <member name="T:VC3.Deployment.Database.DeploySqlMethods">
            <summary>
            Deploy methods to a Sql Server.  Methods in the source assembly which have the
            <see cref="T:Microsoft.SqlServer.Server.SqlProcedureAttribute"/> or <see cref="T:Microsoft.SqlServer.Server.SqlFunctionAttribute"/> are
            deployed to the destination Sql Server database.
            
            </summary>
        </member>
        <member name="T:VC3.Deployment.Database.DMSqlFunction">
            <summary>
            User Defined Function (UDF) attribute. The attribute is used for deployment tasks. This attribute indicates that the method the attribute is assigned to is to be created as an UDF.
            </summary>
        </member>
        <member name="M:VC3.Deployment.Database.DeployMethods.Validate">
            <summary>
            Validates the input. makes sure the necessary info exists.
            </summary>
        </member>
        <member name="P:VC3.Deployment.Database.DeployMethods.AlterAssembly">
            <summary>
            Indicates whether to create an Assembly or Alter an existing. [Optional]
            </summary>
            <value>boolean</value>
        </member>
        <member name="P:VC3.Deployment.Database.DeployMethods.AssemblyName">
            <summary>
            The name of the assembly without file-extension. Required.
            </summary>
        </member>
        <member name="P:VC3.Deployment.Database.DeployMethods.AssemblyPath">
            <summary>
            The full path to the assembly.Required
            </summary>
        </member>
        <member name="P:VC3.Deployment.Database.DeployMethods.TypeConversionFilePath">
            <summary>
            When creating the syntax for deploying methods to Yukon we need to 
            convert from CLR/SQLTypes to T-SQL Types. This is a file which holds the 
            common conversions. It can be customized to converting even
            UDT's. Required.
            </summary>
            <value></value>
        </member>
        <member name="P:VC3.Deployment.Database.DeployMethods.ConnectionString">
            <summary>
            Connection string to the database. Optional if ScriptFilePath exists
            [Optional]
            </summary>
        </member>
        <member name="P:VC3.Deployment.Database.DeployMethods.InferMethods">
            <summary>
            This is a flag which decides whether to infer method signatures and names
            from the assembly. This allows us to not use the specific deployment attributes.
            However, we are limited to create procedures and UDF's. Optional.
            </summary>
            <value></value>
        </member>
        <member name="P:VC3.Deployment.Database.DeployMethods.ScriptFilePath">
            <summary>
            The full path to the script file. Optional if ConnectionString exists.
            [Optional]
            </summary>
        </member>
        <member name="P:VC3.Deployment.Database.DeployMethods.IsTableDrop">
            <summary>
            Indicates whether to drop a whole table dependent on a UDT/UDF or just the dependent column(s). Default is to drop just the columns. [Optional]
            </summary>
            <value>boolean</value>
        </member>
        <member name="P:VC3.Deployment.Database.DeployMethods.ToConnect">
            <summary>
            Boolean flag which indicates whether to connect to the database or not
            </summary>
            <value></value>
        </member>
        <member name="M:VC3.Deployment.Database.DeployTypes.Validate">
            <summary>
            Validates the input. makes sure the necessary info exists.
            </summary>
        </member>
        <member name="P:VC3.Deployment.Database.DeployTypes.AlterAssembly">
            <summary>
            Indicates whether to create an Assembly or Alter an existing. [Optional]
            </summary>
            <value>boolean</value>
        </member>
        <member name="P:VC3.Deployment.Database.DeployTypes.AssemblyName">
            <summary>
            The name of the assembly without file-extension. Required.
            </summary>
        </member>
        <member name="P:VC3.Deployment.Database.DeployTypes.AssemblyPath">
            <summary>
            The full path to the assembly.Required
            </summary>
        </member>
        <member name="P:VC3.Deployment.Database.DeployTypes.ConnectionString">
            <summary>
            Connection string to the database. Optional if ScriptFilePath exists
            [Optional]
            </summary>
        </member>
        <member name="P:VC3.Deployment.Database.DeployTypes.ScriptFilePath">
            <summary>
            The full path to the script file. Optional if ConnectionString exists.
            [Optional]
            </summary>
        </member>
        <member name="P:VC3.Deployment.Database.DeployTypes.IsTableDrop">
            <summary>
            Indicates whether to drop a whole table dependent on a UDT/UDF or just the dependent column(s). Default is to drop just the columns. [Optional]
            </summary>
            <value>boolean</value>
        </member>
        <member name="P:VC3.Deployment.Database.DeployTypes.ToConnect">
            <summary>
            Boolean flag which indicates whether to connect to the database or not
            </summary>
            <value></value>
        </member>
        <member name="M:VC3.Deployment.Database.DropAssembly.Validate">
            <summary>
            Validates the input. makes sure the necessary info exists.
            </summary>
        </member>
        <member name="P:VC3.Deployment.Database.DropAssembly.AssemblyName">
            <summary>
            The name of the assembly without file-extension. Required.
            </summary>
        </member>
        <member name="P:VC3.Deployment.Database.DropAssembly.AssemblyPath">
            <summary>
            The full path to the assembly.Required.
            </summary>
        </member>
        <member name="P:VC3.Deployment.Database.DropAssembly.ScriptFilePath">
            <summary>
            The name including full path to a script file that is 
            to be created containing the T-SQL syntax for dropping the assembly.
            The name of the file is a generic name and is changed to name_assembly.ext by the task. 
            Optional if ConnectionString exists.
            [Optional]
            </summary>
        </member>
        <member name="P:VC3.Deployment.Database.DropAssembly.IsTableDrop">
            <summary>
            Indicates whether to drop a whole table dependent on a UDT/UDF or just the dependent column(s). Default is to drop just the columns. [Optional]
            </summary>
            <value>boolean</value>
        </member>
        <member name="P:VC3.Deployment.Database.DropAssembly.ToConnect">
            <summary>
            Boolean flag which indicates whether to connect to the database or not
            </summary>
            <value></value>
        </member>
        <member name="P:VC3.Deployment.Database.DropAssembly.ConnectionString">
            <summary>
            Connection string to the database. Optional if ScriptFilePath exists
            [Optional]
            </summary>
        </member>
        <member name="M:VC3.Deployment.Database.Utility.AddToFileName(System.String,System.String)">
            <summary>
            Adds a string to a filename.
            </summary>
            <param name="fullPath">Full name of file, including path.</param>
            <param name="addToName">The string to add to the name</param>
            <returns>The new full path.</returns>
        </member>
        <member name="M:VC3.Deployment.Database.DeployAssembly.Validate">
            <summary>
            Validates the input. makes sure the necessary info exists.
            </summary>
        </member>
        <member name="P:VC3.Deployment.Database.DeployAssembly.AlterAssembly">
            <summary>
            Indicates whether to create an Assembly or Alter an existing. [Optional]
            </summary>
            <value>boolean</value>
        </member>
        <member name="P:VC3.Deployment.Database.DeployAssembly.AssemblyName">
            <summary>
            The name of the assembly without file-extension. Required.
            </summary>
        </member>
        <member name="P:VC3.Deployment.Database.DeployAssembly.AssemblyPath">
            <summary>
            The full path to the assembly.Required.
            </summary>
        </member>
        <member name="P:VC3.Deployment.Database.DeployAssembly.PermissionSet">
             <summary>
             The permission level to create the assembly with. [Optional - default = SAFE]
             </summary>
            <value>Integer entered as string: 0=SAFE, 1=EXTERNAL_ACCESS, 2=UNSAFE</value>
        </member>
        <member name="P:VC3.Deployment.Database.DeployAssembly.DebugSymbolsPath">
            <summary>
            The full path to the pdb files. [Optional]
            </summary>
        </member>
        <member name="P:VC3.Deployment.Database.DeployAssembly.ConnectionString">
            <summary>
            Connection string to the database. Optional if ScriptFilePath exists
            [Optional]
            </summary>
        </member>
        <member name="P:VC3.Deployment.Database.DeployAssembly.ScriptFilePath">
            <summary>
            The name including full path to a script file that is 
            to be created containing the T-SQL syntax for deploying the assembly.
            The name of the file is a generic name and is changed to name_assembly.ext by the task. 
            Optional if ConnectionString exists.
            [Optional]
            </summary>
        </member>
        <member name="P:VC3.Deployment.Database.DeployAssembly.IsTableDrop">
            <summary>
            Indicates whether to drop a whole table dependent on a UDT/UDF or just the dependent column(s). Default is to drop just the columns. [Optional]
            </summary>
            <value>boolean</value>
        </member>
        <member name="P:VC3.Deployment.Database.DeployAssembly.UncheckedData">
            <summary>
            Used during ALTER ASSEMBLY to say whether functions/types etc needs to be dropped. If true, they are not dropped [Optional]
            </summary>
            
            <value>boolean</value>
        </member>
        <member name="P:VC3.Deployment.Database.DeployAssembly.ToConnect">
            <summary>
            Boolean flag which indicates whether to connect to the database or not
            </summary>
            <value></value>
        </member>
        <member name="T:VC3.Deployment.Text.FormatValue">
            <summary>
            Performs a text replace on a given property.
            Properties:
            	SourceProperty - name of the property to perform the replace operation.
            	DestinationProperty (optional) - name of the property where the new 
            		value will be stored.  By default this is the same as the source property.
            See <see cref="T:VC3.Deployment.Text.RegexTask"/> for inherited properties.
            </summary>
        </member>
        <member name="T:VC3.Deployment.Net.UnregisterDns">
            <summary>
            Task for deploying SQL Server reports.
            </summary>
        </member>
        <member name="M:VC3.Deployment.Net.UnregisterDns.Execute">
            <summary>
            Unregisters DNS aliases.
            </summary>
        </member>
        <member name="P:VC3.Deployment.Net.UnregisterDns.Aliases">
            <summary>
            Gets or sets the aliases to register.
            </summary>
        </member>
        <member name="T:VC3.Deployment.IO.DeleteDirectory">
            <summary>
            Task for deleting directories.
            </summary>
        </member>
        <member name="M:VC3.Deployment.IO.DeleteDirectory.Execute">
            <summary>
            Deletes the specified directory.
            </summary>
            <returns>True if the delete succeeded, otherwise false</returns>
        </member>
        <member name="M:VC3.Deployment.IO.DeleteDirectory.Rollback">
            <summary>
            Rolls back changes for the directory.
            </summary>
        </member>
        <member name="M:VC3.Deployment.IO.DeleteDirectory.Commit">
            <summary>
            Commits changes for the directory.
            </summary>
        </member>
        <member name="P:VC3.Deployment.IO.DeleteDirectory.Path">
            <summary>
            The path of the directory to delete.
            </summary>
        </member>
        <member name="T:VC3.Deployment.IO.EmptyDirectory">
            <summary>
            Task for empty directories.
            </summary>
        </member>
        <member name="M:VC3.Deployment.IO.EmptyDirectory.Execute">
            <summary>
            Deletes the specified directory.
            </summary>
            <returns>True if the delete succeeded, otherwise false</returns>
        </member>
        <member name="M:VC3.Deployment.IO.EmptyDirectory.Rollback">
            <summary>
            Rolls back changes for the directory.
            </summary>
        </member>
        <member name="M:VC3.Deployment.IO.EmptyDirectory.Commit">
            <summary>
            Commits changes for the directory.
            </summary>
        </member>
        <member name="P:VC3.Deployment.IO.EmptyDirectory.Path">
            <summary>
            The path of the directory to delete.
            </summary>
        </member>
        <member name="P:VC3.Deployment.IO.EmptyDirectory.MaxRetries">
            <summary>
            Number of times to retry when the directory cannot be deleted.
            Default = 0.
            </summary>
        </member>
        <member name="T:VC3.Deployment.IO.Delete">
            <summary>
            Delete a given file from the filesystem.
            	Properties: 
            		Path - the full or relative path to the file.
            </summary>
        </member>
        <member name="M:VC3.Deployment.IO.Delete.Execute">
            <summary>
            Deletes the specified directory.
            </summary>
            <returns>True if the delete succeeded, otherwise false</returns>
        </member>
        <member name="M:VC3.Deployment.IO.Delete.Rollback">
            <summary>
            Rolls back changes for the file.
            </summary>
        </member>
        <member name="M:VC3.Deployment.IO.Delete.Commit">
            <summary>
            Commits changes for the file.
            </summary>
        </member>
        <member name="P:VC3.Deployment.IO.Delete.Path">
            <summary>
            The path of the directory to delete.
            </summary>
        </member>
        <member name="T:VC3.Deployment.IO.CreateDirectory">
            <summary>
            Task for deleting directories.
            </summary>
        </member>
        <member name="M:VC3.Deployment.IO.CreateDirectory.Execute">
            <summary>
            Creates the specified directory.
            </summary>
            <returns>True if the create succeeded, otherwise false</returns>
        </member>
        <member name="M:VC3.Deployment.IO.CreateDirectory.Rollback">
            <summary>
            Deletes directories created during task execution, if any.
            </summary>
        </member>
        <member name="P:VC3.Deployment.IO.CreateDirectory.Path">
            <summary>
            The path of the directory to create.
            </summary>
        </member>
        <member name="T:VC3.Deployment.IO.SetFileSystemAccess">
            <summary>
            Task to set the access control list (ACL) of a file or directory
            </summary>
            <example>
            VC3.Deployment.IO.SetFileSystemAccess /P Path=c:\securitytest User=everyone Access=FullControl
            </example>
        </member>
        <member name="P:VC3.Deployment.IO.SetFileSystemAccess.Path">
            <summary>
            Path to the file or directory.
            </summary>
        </member>
        <member name="P:VC3.Deployment.IO.SetFileSystemAccess.User">
            <summary>
            User or group to set the access to <see cref="P:VC3.Deployment.IO.SetFileSystemAccess.Path"/>
            </summary>
        </member>
        <member name="P:VC3.Deployment.IO.SetFileSystemAccess.Access">
            <summary>
            The access to set for the <see cref="P:VC3.Deployment.IO.SetFileSystemAccess.User"/>
            </summary>
        </member>
        <member name="P:VC3.Deployment.IO.SetFileSystemAccess.Recursive">
            <summary>
            If true, sub directories and file will be affected.
            Default = true.
            </summary>
        </member>
        <member name="T:VC3.Deployment.Install.ManifestFile">
            <summary>
            Represents a set of files required for the installation of an application.
            </summary>
        </member>
        <member name="M:VC3.Deployment.Install.ManifestFile.#ctor">
            <summary>
            Creates a new <see cref="T:VC3.Deployment.Install.ManifestFile"/> instance to
            generate or load setup file manifests.
            </summary>
        </member>
        <member name="M:VC3.Deployment.Install.ManifestFile.Load(System.Xml.XmlDocument)">
            <summary>
            Loads the manifest information from the specified Xml document.
            </summary>
            <param name="manifest">The Xml manifest document</param>
        </member>
        <member name="M:VC3.Deployment.Install.ManifestFile.Create">
            <summary>
            Generates a setup file manifest based on the current settings.
            </summary>
            <returns>The new manifest file</returns>
        </member>
        <member name="M:VC3.Deployment.Install.ManifestFile.GetFiles(VC3.Deployment.Install.IValidator)">
            <summary>
            Gets an array of <see cref="T:VC3.Deployment.Install.InstallationFile"/> instances for all files
            in the <see cref="P:VC3.Deployment.Install.ManifestFile.SourceDirectory"/> matching the <see cref="P:VC3.Deployment.Install.ManifestFile.Filter"/>.
            </summary>
            <param name="validator">The <see cref="T:VC3.Deployment.Install.IValidator"/> to generate signatures with</param>
            <returns>An array of installation files</returns>
        </member>
        <member name="M:VC3.Deployment.Install.ManifestFile.GetFilesRecursive(System.String,System.String,System.Text.RegularExpressions.Regex,VC3.Deployment.Install.IValidator,System.Collections.ArrayList)">
            <summary>
            Recursive function that looks in the specified directory and sub-directories
            and adds all files matching the specified filter expression to the collection
            of files to include in the manifest.
            </summary>
            <param name="baseDirectory">The base directory the files should be relative to</param>
            <param name="currentDirectory">The current directory to look in</param>
            <param name="filterExpression">The filter expression to use to identify files to include</param>
            <param name="files">The list of files to populate</param>
        </member>
        <member name="P:VC3.Deployment.Install.ManifestFile.Settings">
            <summary>
            Gets or sets the <see cref="T:VC3.Deployment.Install.InstallationSettings"/> to use when
            creating the installation manifest file.
            </summary>
        </member>
        <member name="P:VC3.Deployment.Install.ManifestFile.SourceDirectory">
            <summary>
            Gets or sets the path to the directory containing the setup files.
            </summary>
        </member>
        <member name="P:VC3.Deployment.Install.ManifestFile.Filter">
            <summary>
            Gets or sets a regular expression filter to use to identify files
            in the <see cref="P:VC3.Deployment.Install.ManifestFile.SourceDirectory"/> to include in the manifest.
            </summary>
        </member>
        <member name="P:VC3.Deployment.Install.ManifestFile.UpdateLocation">
            <summary>
            Gets or sets the url to download the setup files from.
            </summary>
        </member>
        <member name="P:VC3.Deployment.Install.ManifestFile.EncryptedUpdateLocation">
            <summary>
            Gets the URL from which encrypted files should be downloaded from
            </summary>
        </member>
        <member name="P:VC3.Deployment.Install.ManifestFile.EncryptedSourceDirectory">
            <summary>
            Gets the path from which encypted files should be downloaded from
            </summary>
        </member>
        <member name="P:VC3.Deployment.Install.ManifestFile.Signature">
            <summary>
            Gets the digital signature for the manifest.
            </summary>
        </member>
        <member name="P:VC3.Deployment.Install.ManifestFile.Files">
            <summary>
            Gets the set of relative file paths for the manifest.
            </summary>
        </member>
        <member name="P:VC3.Deployment.Install.ManifestFile.Version">
            <summary>
            Gets or sets the version of the application.
            </summary>
        </member>
        <member name="P:VC3.Deployment.Install.ManifestFile.InstallerExe">
            <summary>
            Gets the name of the installer executable to run when the setup
            files have been downloaded.
            </summary>
        </member>
        <member name="P:VC3.Deployment.Install.ManifestFile.InstallerArguments">
            <summary>
            Gets the arguments to pass to the installer executable
            when the setup files have been downloaded.
            </summary>
        </member>
        <member name="T:VC3.Deployment.Install.InstallationFile">
            <summary>
            Represents a single installation file included in a manifest.
            </summary>
        </member>
        <member name="M:VC3.Deployment.Install.InstallationFile.#ctor">
            <summary>
            Creates a new uninitialized <see cref="T:VC3.Deployment.Install.InstallationFile"/> instance.
            </summary>
        </member>
        <member name="M:VC3.Deployment.Install.InstallationFile.#ctor(System.String,System.String,System.Int32,System.String)">
            <summary>
            Creates and initializes a new <see cref="T:VC3.Deployment.Install.InstallationFile"/> instance.
            </summary>
            <param name="path">The relative path to the file</param>
            <param name="signature">The digital signature for the file</param>
            <param name="size">The size of the file in bytes</param>
            <param name="downloadKey">The key that uniquely identifies the file so it can be downloaded</param>
        </member>
        <member name="P:VC3.Deployment.Install.InstallationFile.DownloadKey">
            <summary>
            Gets or sets the key that uniquely identifies the file for later download
            </summary>
        </member>
        <member name="P:VC3.Deployment.Install.InstallationFile.Path">
            <summary>
            Gets or sets the relative path to the file.
            </summary>
        </member>
        <member name="P:VC3.Deployment.Install.InstallationFile.WindowsPath">
            <summary>
            Gets or sets the relative path to the file.  Uses forward slashes '/' for
            the directory separator
            </summary>
        </member>
        <member name="P:VC3.Deployment.Install.InstallationFile.Signature">
            <summary>
            Gets or sets the digital signature for the file.
            </summary>
        </member>
        <member name="P:VC3.Deployment.Install.InstallationFile.Size">
            <summary>
            Gets or sets the size of the file in bytes.
            </summary>
        </member>
        <member name="T:VC3.Deployment.Install.FileBasedLock">
            <summary>
            A file-based locking mechanism
            </summary>
        </member>
        <member name="T:VC3.Deployment.Xml.Transform">
            <summary>
            Task that performs an XSL tranform on a file.
            Parameters: 
            	SourceFile - file to use as the transform source.
            	DestinationFile - file to use as the transform destination.
            	TransformFile - transform file (XSLT).
            Note: has not been tested with
            </summary>
        </member>
        <member name="T:VC3.Deployment.Web.TransactedDirectoryEntry">
            <summary>
            Performs and tracks changes to directories to support
            transacted updates.
            </summary>
        </member>
        <member name="M:VC3.Deployment.Web.TransactedDirectoryEntry.#ctor(System.String,System.String,System.String,System.DirectoryServices.AuthenticationTypes)">
            <summary>
            Creates a new <see cref="T:VC3.Deployment.Web.TransactedDirectoryEntry"/> that supports
            updating or deleting a <see cref="T:System.DirectoryServices.DirectoryEntry"/>.
            </summary>
            <param name="path">The path of the directory</param>
        </member>
        <member name="M:VC3.Deployment.Web.TransactedDirectoryEntry.#ctor(System.DirectoryServices.DirectoryEntry)">
            <summary>
            Creates a new <see cref="T:VC3.Deployment.Web.TransactedDirectoryEntry"/> that supports
            updating or deleting a <see cref="T:System.DirectoryServices.DirectoryEntry"/>.
            </summary>
            <param name="directory">The directory to transact</param>
        </member>
        <member name="M:VC3.Deployment.Web.TransactedDirectoryEntry.#ctor(VC3.Deployment.Web.TransactedDirectoryEntry,System.String,System.String)">
            <summary>
            Creates a new <see cref="T:VC3.Deployment.Web.TransactedDirectoryEntry"/> that supports
            creating a new <see cref="T:System.DirectoryServices.DirectoryEntry"/>.
            </summary>
            <param name="parent"></param>
            <param name="name"></param>
            <param name="schemaClass"></param>
        </member>
        <member name="M:VC3.Deployment.Web.TransactedDirectoryEntry.GetParent">
            <summary>
            Gets the parent of the current directory.
            </summary>
            <returns>The parent directory, or null if the directory does not have a parent</returns>
        </member>
        <member name="M:VC3.Deployment.Web.TransactedDirectoryEntry.Find(System.String,System.String[])">
            <summary>
            Finds a directory relative to the current directory with
            the specified path.
            </summary>
            <param name="path">The relative path of the directory</param>
            <param name="classes">The classes of directories to find</param>
            <returns>The directory if found, otherwise null</returns>
        </member>
        <member name="M:VC3.Deployment.Web.TransactedDirectoryEntry.Find(System.Collections.Specialized.NameValueCollection,System.String[])">
            <summary>
            Recursively searches for the first directory in the tree that
            matches the specified search criteria.
            </summary>
            <param name="criteria">The criteria property names and values to search for</param>
            <param name="classes">The directory classes to limit the search to</param>
            <returns>The first directory matching the criteria, or null if a match cannot be found</returns>
        </member>
        <member name="M:VC3.Deployment.Web.TransactedDirectoryEntry.Find(System.DirectoryServices.DirectoryEntry,System.Collections.Specialized.NameValueCollection,System.String[])">
            <summary>
            Recursively searches for the first directory in the tree that
            matches the specified search criteria.
            </summary>
            <param name="directory">The root directory to search from</param>
            <param name="criteria">The criteria property names and values to search for</param>
            <param name="classes">The directory classes to limit the search to</param>
            <returns>The first directory matching the criteria, or null if a match cannot be found</returns>
        </member>
        <member name="M:VC3.Deployment.Web.TransactedDirectoryEntry.Delete">
            <summary>
            Deletes the current directory.
            </summary>
        </member>
        <member name="M:VC3.Deployment.Web.TransactedDirectoryEntry.Add(VC3.Deployment.Web.TransactedDirectoryEntry)">
            <summary>
            Adds a new child directory that will be tracked to support
            nested rollbacks and commits.
            </summary>
            <param name="directory">The directory to add</param>
        </member>
        <member name="M:VC3.Deployment.Web.TransactedDirectoryEntry.Commit">
            <summary>
            Commits any modifications performed by the instance.
            </summary>
        </member>
        <member name="M:VC3.Deployment.Web.TransactedDirectoryEntry.Rollback">
            <summary>
            Rolls back any modifications performed by the instance.
            </summary>
        </member>
        <member name="M:VC3.Deployment.Web.TransactedDirectoryEntry.RollbackChildren">
            <summary>
            Rolls back changes to child directories.
            </summary>
        </member>
        <member name="M:VC3.Deployment.Web.TransactedDirectoryEntry.Update(System.Collections.Specialized.NameValueCollection)">
            <summary>
            Sets one or more properties on the directory.
            </summary>
            <param name="properties">The properties to update</param>
        </member>
        <member name="M:VC3.Deployment.Web.TransactedDirectoryEntry.GetProperty(System.DirectoryServices.DirectoryEntry,System.String)">
            <summary>
            Gets the value of a property on the specified directory node.
            </summary>
            <param name="directory">The node to get the property for</param>
            <param name="name">The name of the property</param>
            <returns>The value of the property</returns>
        </member>
        <member name="M:VC3.Deployment.Web.TransactedDirectoryEntry.SetProperty(System.DirectoryServices.DirectoryEntry,System.String,System.Object)">
            <summary>
            Sets a property on the specified directory node.
            </summary>
            <param name="directory">The node to set the property for</param>
            <param name="name">The name of the property</param>
            <param name="value">The value of the property</param>
        </member>
        <member name="P:VC3.Deployment.Web.TransactedDirectoryEntry.Directory">
            <summary>
            Exposes the <see cref="T:System.DirectoryServices.DirectoryEntry"/> being modified by
            the current instance.
            </summary>
        </member>
        <member name="P:VC3.Deployment.Web.TransactedDirectoryEntry.Item(System.String)">
            <summary>
            Gets or sets a property on the current directory and keeps track of
            the original value to support rolling back modifications.
            </summary>
        </member>
        <member name="T:VC3.Deployment.Web.GenerateSite">
            <summary>
            Task for generating sites based on a navigation structure and page template.
            </summary>
        </member>
        <member name="M:VC3.Deployment.Web.GenerateSite.Execute">
            <summary>
            Creates or updates an IIS web site using the current settings.
            </summary>
            <returns>True if the site was created or updated successfully, otherwise false</returns>
        </member>
        <member name="M:VC3.Deployment.Web.GenerateSite.BuildDirectory(VC3.Web.UI.INavItem[])">
            <summary>
            Recursively builds up the site directory and page structure based
            on the specified navigation file.
            </summary>
            <param name="pages">The navigation pages to process</param>
        </member>
        <member name="P:VC3.Deployment.Web.GenerateSite.NavigationFile">
            <summary>
            Gets or sets the path to the navigation file to use
            when generating the site.
            </summary>
        </member>
        <member name="P:VC3.Deployment.Web.GenerateSite.TemplateFile">
            <summary>
            Gets or sets the path to the page template file to use
            when generating the site.
            </summary>
        </member>
        <member name="P:VC3.Deployment.Web.GenerateSite.OutputDirectory">
            <summary>
            Gets or sets the directory to create the generated site in.
            </summary>
        </member>
        <member name="P:VC3.Deployment.Web.GenerateSite.Properties">
            <summary>
            Gets the set of properties that will be used to perform
            substitutions on the page template file.
            </summary>
        </member>
        <member name="T:VC3.Deployment.Web.CreateVirtualDirectory">
            <summary>
            Task for creating IIS virtual directories.
            </summary>
            <remarks>
            VC3.Deployment.Web.CreateVirtualDirectory /r "PhysicalPath=C:\Program Files\VC3 TestView\WebUI" VirtualPath=VC3TestView/Test
            </remarks>
        </member>
        <member name="M:VC3.Deployment.Web.CreateVirtualDirectory.Execute">
            <summary>
            Creates or updates an IIS virtual directory using the current settings.
            </summary>
            <returns>True if the directory was created or updated successfully, otherwise false</returns>
        </member>
        <member name="T:VC3.Deployment.Reporting.DownloadSqlReports">
            <summary>
            Task for downloading SQL Server reports.
            </summary>
        </member>
        <member name="M:VC3.Deployment.Reporting.DownloadSqlReports.Execute">
            <summary>
            Downloads the specified SQL reports from the reporting server.
            </summary>
            <returns>True if all reports were successfully downloaded, otherwise false</returns>
        </member>
        <member name="P:VC3.Deployment.Reporting.DownloadSqlReports.Url">
            <summary>
            Gets or sets the url of the report server web service.
            </summary>
        </member>
        <member name="P:VC3.Deployment.Reporting.DownloadSqlReports.ExecutionUrl">
            <summary>
            Gets or sets the execution url of the report server web service. This value
            is not applicable to SSRS 2005 and earlier
            </summary>
        </member>
        <member name="P:VC3.Deployment.Reporting.DownloadSqlReports.Version">
            <summary>
            Gets or sets SSRS version
            </summary>
        </member>
        <member name="P:VC3.Deployment.Reporting.DownloadSqlReports.ServiceTimeout">
            <summary>
            Gets or sets the service timeout
            </summary>
        </member>
        <member name="P:VC3.Deployment.Reporting.DownloadSqlReports.Path">
            <summary>
            Gets or sets the path to the report folder to download the reports from.
            </summary>
        </member>
        <member name="P:VC3.Deployment.Reporting.DownloadSqlReports.Directory">
            <summary>
            The directory to download the report files into.
            </summary>
        </member>
        <member name="T:VC3.Deployment.Install.KeyValidator">
            <summary>
            The symmetric-key-based implementation of the IValidator interface,
            which does not offer same level of security as the asymmetric RSA cryptography.
            </summary>
        </member>
        <member name="M:VC3.Deployment.Install.KeyValidator.#ctor">
            <summary>
            Creates a new <see cref="T:VC3.Deployment.Install.KeyValidator"/>.
            </summary>
        </member>
        <member name="M:VC3.Deployment.Install.KeyValidator.VC3#Deployment#Install#IValidator#Validate(System.IO.Stream,System.String)">
            <summary>
            Validates the specified file.
            </summary>
            <param name="file">The stream for the file being validated</param>
            <param name="signature">The keyed-hash signature to validate against</param>
            <returns>True if the file, hashed with validation key, matches the signature</returns>
        </member>
        <member name="M:VC3.Deployment.Install.KeyValidator.VC3#Deployment#Install#IValidator#Validate(System.String,System.String)">
            <summary>
            Validates the specified data.
            </summary>
            <param name="data">The data to validate</param>
            <param name="signature">The keyed-hash signature to validate against</param>
            <returns>True if the data, hashed with validation key, matches the signature</returns>
        </member>
        <member name="M:VC3.Deployment.Install.KeyValidator.VC3#Deployment#Install#IValidator#Sign(System.IO.Stream)">
            <summary>
            Creates a signature for the specified file by hashing the file with a key. 
            </summary>
            <param name="file">The stream for the file to sign</param>
            <returns>A signed hash for the whole file</returns>
        </member>
        <member name="M:VC3.Deployment.Install.KeyValidator.VC3#Deployment#Install#IValidator#Sign(System.String)">
            <summary>
            Creates a signature for the specified data by hashing the file with a key. 
            </summary>
            <param name="data">The data to sign</param>
            <returns>A signed hash for the whole file</returns>
        </member>
        <member name="M:VC3.Deployment.Install.KeyValidator.CompareKeys(System.Byte[],System.Byte[])">
            <summary>
            Compares two hash keys for equality.
            </summary>
            <param name="first">The first key</param>
            <param name="second">The second key</param>
            <returns>True if two keys match byte-for-byte, otherwise false</returns>
        </member>
        <member name="M:VC3.Deployment.Install.KeyValidator.System#IDisposable#Dispose">
            <summary>
            Cleans up resources held by the validator.
            </summary>
        </member>
        <member name="P:VC3.Deployment.Install.KeyValidator.VC3#Deployment#Install#IValidator#Key">
            <summary>
            Gets or sets the key to use when signing or validating files or data.
            </summary>
        </member>
        <member name="T:VC3.Deployment.Install.DownloadInfo">
            <summary>
            Description of a version of an application
            </summary>
        </member>
        <member name="T:VC3.Deployment.Install.DownloadInfoList">
            <summary>
            A list of <see cref="T:VC3.Deployment.Install.DownloadInfo"/> objects
            </summary>
        </member>
        <member name="M:VC3.Deployment.Install.DownloadInfoList.Add(VC3.Deployment.Install.DownloadInfo)">
            <summary>
            Add a DownloadInfo object to this list
            </summary>
            <param name="item">The DownloadInfo object to add</param>
            <returns></returns>
        </member>
        <member name="M:VC3.Deployment.Install.DownloadInfoList.Insert(System.Int32,VC3.Deployment.Install.DownloadInfo)">
            <summary>
            Insert a <see cref="T:VC3.Deployment.Install.DownloadInfo"/> object at a specified index
            </summary>
            <param name="index">The index to insert the <see cref="T:VC3.Deployment.Install.DownloadInfo"/> object.</param>
            <param name="item">The <see cref="T:VC3.Deployment.Install.DownloadInfo"/> object to insert</param>
        </member>
        <member name="M:VC3.Deployment.Install.DownloadInfoList.Remove(VC3.Deployment.Install.DownloadInfo)">
            <summary>
            Removes an occurence of <see cref="T:VC3.Deployment.Install.DownloadInfo"/> from this list
            </summary>
            <param name="item">The <see cref="T:VC3.Deployment.Install.DownloadInfo"/> object to remove</param>
        </member>
        <member name="M:VC3.Deployment.Install.DownloadInfoList.IndexOf(VC3.Deployment.Install.DownloadInfo)">
            <summary>
            Returns the index of <see cref="T:VC3.Deployment.Install.DownloadInfo"/> object in list
            </summary>
            <param name="item">The <see cref="T:VC3.Deployment.Install.DownloadInfo"/> object to search for</param>
            <returns>The index of the specified <see cref="T:VC3.Deployment.Install.DownloadInfo"/> object</returns>
        </member>
        <member name="P:VC3.Deployment.Install.DownloadInfoList.Item(System.Int32)">
            <summary>
            Indexer
            </summary>
        </member>
        <member name="T:VC3.Deployment.Install.InstallationManager">
            <summary>
            Summary description for InstallationManager.
            </summary>
        </member>
        <member name="M:VC3.Deployment.Install.InstallationManager.#ctor">
            <summary>
            Manages the process of downloading, verifying, and executing
            application installation files.
            </summary>
        </member>
        <member name="M:VC3.Deployment.Install.InstallationManager.RaiseProcessStarting(System.String)">
            <summary>
            Raises the <see cref="E:VC3.Deployment.Install.InstallationManager.ProcessStarting"/> event.
            </summary>
            <param name="description">The description of the process</param>
        </member>
        <member name="M:VC3.Deployment.Install.InstallationManager.RaiseProcessCompleted(System.String)">
            <summary>
            Raises the <see cref="E:VC3.Deployment.Install.InstallationManager.ProcessCompleted"/> event.
            </summary>
            <param name="description">The description of the process</param>
        </member>
        <member name="M:VC3.Deployment.Install.InstallationManager.RaiseDownloadStarting(VC3.Deployment.Install.InstallationFile,System.Decimal)">
            <summary>
            Raises the <see cref="E:VC3.Deployment.Install.InstallationManager.DownloadStarting"/> event.
            </summary>
        </member>
        <member name="M:VC3.Deployment.Install.InstallationManager.RaiseDownloadCompleted(VC3.Deployment.Install.InstallationFile,System.Decimal)">
            <summary>
            Raises the <see cref="E:VC3.Deployment.Install.InstallationManager.DownloadCompleted"/> event.
            </summary>
        </member>
        <member name="M:VC3.Deployment.Install.InstallationManager.RaiseVerifyStarting(VC3.Deployment.Install.InstallationFile,System.Decimal)">
            <summary>
            Raises the <see cref="E:VC3.Deployment.Install.InstallationManager.VerifyStarting"/> event.
            </summary>
        </member>
        <member name="M:VC3.Deployment.Install.InstallationManager.RaiseVerifyCompleted(VC3.Deployment.Install.InstallationFile,System.Decimal)">
            <summary>
            Raises the <see cref="E:VC3.Deployment.Install.InstallationManager.VerifyCompleted"/> event.
            </summary>
        </member>
        <member name="M:VC3.Deployment.Install.InstallationManager.GetManifest(System.String)">
            <summary>
            Gets the manifest for a setup directory.
            </summary>
            <param name="setupDirectory"></param>
            <returns></returns>
        </member>
        <member name="M:VC3.Deployment.Install.InstallationManager.GetLicense">
            <summary>
            Opens the license file.
            </summary>
            <returns>The license</returns>
        </member>
        <member name="M:VC3.Deployment.Install.InstallationManager.DownloadInstaller(System.String)">
            <summary>
            Downloads the installer from the installation service.
            </summary>
            <returns>Information about the installer.</returns>
        </member>
        <member name="M:VC3.Deployment.Install.InstallationManager.DownloadUpdater">
            <summary>
            Checks the installation service to determine if a new version
            is available.  If available, the installation files will be downloaded.
            Determines current version based on the license file.
            </summary>
            <returns>Information about the updater.  Null if no new version is available</returns>
        </member>
        <member name="M:VC3.Deployment.Install.InstallationManager.Delete(VC3.Deployment.Install.DownloadInfo)">
            <summary>
            Deletes the specified <see cref="T:VC3.Deployment.Install.DownloadInfo"/> setup directory from the file system
            </summary>
            <param name="download">The <see cref="T:VC3.Deployment.Install.DownloadInfo"/> containing the setup directory to remove from the file system.</param>
        </member>
        <member name="M:VC3.Deployment.Install.InstallationManager.Cancel">
            <summary>
            Cancels an operation that is in progress
            </summary>
        </member>
        <member name="M:VC3.Deployment.Install.InstallationManager.Download(System.String,System.Version)">
            <summary>
            Checks the installation service to determine if a new version
            is available.  If available, the installation files will be downloaded.
            </summary>
            <returns>Information about the new version.  Null if no new version is available</returns>
        </member>
        <member name="M:VC3.Deployment.Install.InstallationManager.Verify(System.String,VC3.Deployment.Install.ManifestFile)">
            <summary>
            Verifies a setup directory that has been downloaded based on its manifest
            </summary>
            <param name="setupDirectory">Path to the setup files. Directory must contain a manifest file.</param>
            <param name="manifest">Manifest that has info about the setup files</param>
        </member>
        <member name="M:VC3.Deployment.Install.InstallationManager.RunInstaller(System.String,System.String)">
            <summary>
            Upgrades the application using the files downloaded using <see cref="M:VC3.Deployment.Install.InstallationManager.DownloadInstaller(System.String)"/>.
            Must specify a product key.
            </summary>
            <returns>True if the application was upgraded, otherwise false</returns>
        </member>
        <member name="M:VC3.Deployment.Install.InstallationManager.RunUpdater(System.String,System.Boolean)">
            <summary>
            Upgrades the application using the files downloaded using <see cref="M:VC3.Deployment.Install.InstallationManager.DownloadUpdater"/>.
            Determines the product key from an existing license file
            </summary>
            <param name="silentMode">If true, installer is run in silent mode</param>
            <returns>True if the application was upgraded, otherwise false</returns>
        </member>
        <member name="M:VC3.Deployment.Install.InstallationManager.RunUpdater(System.Version,System.Boolean)">
            <summary>
            Upgrades the application using the files downloaded using <see cref="M:VC3.Deployment.Install.InstallationManager.DownloadUpdater"/>.
            Determines the product key from an existing license file.  Determines the installer
            path based on the version number and default download directory.
            </summary>
            <param name="silentMode">If true, installer is run in silent mode</param>
            <returns>True if the application was upgraded, otherwise false</returns>
        </member>
        <member name="M:VC3.Deployment.Install.InstallationManager.RunUninstaller(System.Boolean)">
            <summary>
            Uninstalls the application using the files downloaded using <see cref="M:VC3.Deployment.Install.InstallationManager.DownloadUpdater"/>.
            Determines the product key from an existing license file
            </summary>
            <param name="silentMode">If true, installer is run in silent mode</param>
            <returns>True if the application was upgraded, otherwise false</returns>
        </member>
        <member name="M:VC3.Deployment.Install.InstallationManager.Run(System.String,System.String,VC3.Deployment.Install.InstallationManager.Action,System.Boolean)">
            <summary>
            Runs a downloaded installer.
            </summary>
        </member>
        <member name="M:VC3.Deployment.Install.InstallationManager.RenewLicense(System.String)">
            <summary>
            Renews a license using the Application Manager web service.
            </summary>
            <param name="licenseFile">Path the license file to update</param>
        </member>
        <member name="P:VC3.Deployment.Install.InstallationManager.Settings">
            <summary>
            Gets or sets the <see cref="T:VC3.Deployment.Install.InstallationSettings"/> to use when
            performing the installation.
            </summary>
        </member>
        <member name="P:VC3.Deployment.Install.InstallationManager.Status">
            <summary>
            Gets the status of the current installation.
            </summary>
        </member>
        <member name="P:VC3.Deployment.Install.InstallationManager.VerifyEnabled">
            <summary>
            Indicates whether or not the installer is verified
            prior to running it.
            </summary>
        </member>
        <member name="P:VC3.Deployment.Install.InstallationManager.Debug">
            <summary>
            Indicates if running in debug mode
            </summary>
        </member>
        <member name="P:VC3.Deployment.Install.InstallationManager.Downloads">
            <summary>
            The list of <see cref="T:VC3.Deployment.Install.DownloadInfo"/> objects created by scanning the setup directory.
            </summary>
        </member>
        <member name="E:VC3.Deployment.Install.InstallationManager.ProcessStarting">
            <summary>
            Notifies subscribers that an installation process is starting.
            </summary>
        </member>
        <member name="E:VC3.Deployment.Install.InstallationManager.ProcessCompleted">
            <summary>
            Notifies subscribers that an installation process has completed successfully.
            </summary>
        </member>
        <member name="E:VC3.Deployment.Install.InstallationManager.DownloadStarting">
            <summary>
            Notifies subscribers that a file download is starting.
            </summary>
        </member>
        <member name="E:VC3.Deployment.Install.InstallationManager.DownloadCompleted">
            <summary>
            Notifies subscribers that a file download has completed successfully.
            </summary>
        </member>
        <member name="E:VC3.Deployment.Install.InstallationManager.VerifyStarting">
            <summary>
            Notifies subscribers that a file verification is starting.
            </summary>
        </member>
        <member name="E:VC3.Deployment.Install.InstallationManager.VerifyCompleted">
            <summary>
            Notifies subscribers that a file verification has completed successfully.
            </summary>
        </member>
        <member name="T:VC3.Deployment.Install.InstallationCanceledException">
            <summary>
            Thrown when a download is cancelled
            </summary>
        </member>
        <member name="T:VC3.Deployment.Install.InstallationStatus">
            <summary>
            Identifies that different status codes that are exposed by the
            installation manager to reflect the state of the installation. Also
            returned by the installer.exe process to indicate status (zero is success, 
            negative is error and positive is a cancellation more or less).
            </summary>
        </member>
        <member name="T:VC3.Deployment.Install.InstallationEventHandler">
            <summary>
            Delegate for events that notify subscribers of installation progress.
            </summary>
        </member>
        <member name="T:VC3.Deployment.Install.InstallationEventArgs">
            <summary>
            Arguments for events that notify subscribers of installation progress.
            </summary>
        </member>
        <member name="M:VC3.Deployment.Install.InstallationEventArgs.#ctor(System.String,VC3.Deployment.Install.InstallationFile,System.Decimal)">
            <summary>
            Creates a new initialized <see cref="T:VC3.Deployment.Install.InstallationEventArgs"/> instance.
            </summary>
            <param name="description">The description of the installation step being performed</param>
            <param name="file">The installation file the event was raised for</param>
            <param name="percentComplete">The approximate percentage of the installation that has been completed</param>
        </member>
        <member name="P:VC3.Deployment.Install.InstallationEventArgs.Description">
            <summary>
            Gets the description of the installation step being performed.
            </summary>
        </member>
        <member name="P:VC3.Deployment.Install.InstallationEventArgs.File">
            <summary>
            Gets the installation file the event was raised for.
            </summary>
        </member>
        <member name="P:VC3.Deployment.Install.InstallationEventArgs.PercentComplete">
            <summary>
            Gets the approximate percentage of the installation
            that has been completed.
            </summary>
        </member>
        <member name="T:VC3.Deployment.Install.InstallerExe">
            <summary>
            This class simplifies communication between a custom installer executable,
            the <see cref="N:VC3.Deployment.ApplicationManager"/> and <see cref="T:VC3.Deployment.Install.InstallationManager"/>.
            If you are creating a custom installer, you can derive your executable from
            this class to (hopefully) simplify things. The <see cref="P:VC3.Deployment.Install.InstallerExe.Context"/> property has
            contextual information used to control the installation.
            </summary>
        </member>
        <member name="M:VC3.Deployment.Install.InstallerExe.OnInstallInSilentMode">
            <summary>
            Override in sub classes to perform a silent installation.
            The return value is used to determine the success of failure of the
            installation. If an error occurs, throw an exception to report the
            best error message.
            </summary>
        </member>
        <member name="M:VC3.Deployment.Install.InstallerExe.OnInstallInInteractiveMode">
            <summary>
            Override in sub classes to perform an interactive installation.
            The return value is used to determine the success of failure of the
            installation. If an error occurs, throw an exception to report the
            best error message.
            </summary>
        </member>
        <member name="M:VC3.Deployment.Install.InstallerExe.OnUninstallInSilentMode">
            <summary>
            Override in sub classes to perform a silent installation.
            The return value is used to determine the success of failure of the
            installation. If an error occurs, throw an exception to report the
            best error message.
            </summary>
        </member>
        <member name="M:VC3.Deployment.Install.InstallerExe.OnUninstallInInteractiveMode">
            <summary>
            Override in sub classes to perform an interactive installation.
            The return value is used to determine the success of failure of the
            installation. If an error occurs, throw an exception to report the
            best error message.
            </summary>
        </member>
        <member name="M:VC3.Deployment.Install.InstallerExe.Init(System.String[])">
            <summary>
            Constructs the <see cref="P:VC3.Deployment.Install.InstallerExe.Context"/> used by the installer
            and initializes the installation settings
            </summary>
        </member>
        <member name="M:VC3.Deployment.Install.InstallerExe.Run(System.String[])">
            <summary>
            The main entry point of the installer exe
            </summary>
        </member>
        <member name="P:VC3.Deployment.Install.InstallerExe.Context">
            <summary>
            Gets contextual information used by the installer. Read automatically
            from command line args.
            </summary>
        </member>
        <member name="T:VC3.Deployment.Install.CommandLineDeploymentContext">
            <summary>
            Provides a deployment context based on command line arguments
            </summary>
        </member>
        <member name="M:VC3.Deployment.Install.CommandLineDeploymentContext.#ctor(System.String[],System.IO.TextWriter)">
            <summary>
            Creates a context from the command line
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:VC3.Deployment.Install.CommandLineDeploymentContext.ProcessArgsXML(System.String,System.IO.TextWriter)">
            <summary>
            Processes an XML file that contains a list of name value pairs
            </summary>
            <param name="fileName"></param>
        </member>
        <member name="P:VC3.Deployment.Install.CommandLineDeploymentContext.IsUninstall">
            <summary>
            If true, this is an installation. If false, an uninstallation.
            </summary>
        </member>
        <member name="P:VC3.Deployment.Install.CommandLineDeploymentContext.SilentMode">
            <summary>
            If true, installer will be run in silent mode
            </summary>
        </member>
        <member name="P:VC3.Deployment.Install.CommandLineDeploymentContext.ProductKey">
            <summary>
            Gets the product key
            </summary>
        </member>
        <member name="P:VC3.Deployment.Install.CommandLineDeploymentContext.ApplicationVersion">
            <summary>
            Gets the version being installed
            </summary>
        </member>
        <member name="T:VC3.Deployment.Install.SetApplicationManagerStatusTask">
            <summary>
            Task for setting the installation status in the Application Manager.
            </summary>
        </member>
        <member name="P:VC3.Deployment.Install.SetApplicationManagerStatusTask.Status">
            <summary>
            "downloaded", "installed", "uninstalled"
            </summary>
        </member>
        <member name="P:VC3.Deployment.Install.SetApplicationManagerStatusTask.Timeout">
            <summary>
            Defaults to 90 seconds.  Time is in milliseconds.
            </summary>
        </member>
        <member name="T:VC3.Deployment.Install.FixedAppManInstallationService">
            <summary>
            This class is a workaround to prevent a known 
            error ("The underlying connection was closed. An unexpected error occured on send.")
            See Microsoft KB #819450 for more details 
            </summary>
        </member>
        <member name="T:VC3.Deployment.Install.DownloadForm">
            <summary>
            Summary description for DownloadForm.
            </summary>
        </member>
        <member name="M:VC3.Deployment.Install.DownloadForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:VC3.Deployment.Install.BitsDownloader">
            <summary>
            BITS is a service available on Windows 2000 and above.  It uses a robust, 
            asynchronous HTTP download mechanism that can recover gracefully from disconnects,
            and utilizes only spare bandwidth.
            </summary>
        </member>
        <member name="M:VC3.Deployment.Install.BitsDownloader.RemoveCopyJobEntry(System.Guid)">
            <summary>
            Removes a copy job from the internal lookup collection
            </summary>
            <param name="jobID">GUID identifies of a job (job id)</param>
        </member>
        <member name="M:VC3.Deployment.Install.BitsDownloader.CreateCopyJob(VC3.Deployment.Install.IBackgroundCopyManager@,VC3.Deployment.Install.IBackgroundCopyJob@,System.Guid@,System.String,System.String)">
            <summary>
            Internal copy-job factory method.  Used to coordinate all aspects of a job set-up, 
            which includes creating a copy manager, creating a job within it, setting download
            parameters, and adding the job to our tracking collection for cleanup later
            </summary>
            <param name="copyManager">null reference to copy manager</param>
            <param name="copyJob">null reference to copy job</param>
            <param name="jobID">null reference to job id guid</param>
            <param name="jobNameKey">the key used to look up the job name in the resource file</param>
            <param name="jobDescriptionKey">the key used to look up the job description in the resource file</param>
        </member>
        <member name="M:VC3.Deployment.Install.BitsDownloader.HandleDownloadErrorCancelJob(VC3.Deployment.Install.IBackgroundCopyJob,System.String@)">
            <summary>
            Centralizes all chores related to stopping and cancelling a copy job, and getting back
            from BITS the errors incurred during the job.
            </summary>
            <param name="copyJob">reference to the copy job object (not job id)</param>
            <param name="errMessage">a cumulative error message passed by reference so
            that additions can be made</param>
        </member>
        <member name="M:VC3.Deployment.Install.BitsDownloader.VC3#Deployment#Install#IDownloader#Download(System.String,System.String,System.TimeSpan)">
            <summary>
            Synchronously downloads a file using BITS.
            </summary>
            <param name="source">The source url to download from</param>
            <param name="destination">The local path to download to</param>
            <param name="timeout">The maximum time to wait for the download</param>
        </member>
        <member name="M:VC3.Deployment.Install.BitsDownloader.Dispose">
            <summary>
            Allows graceful cleanup of hard resources
            </summary>
        </member>
        <member name="M:VC3.Deployment.Install.BitsDownloader.Dispose(System.Boolean)">
            <summary>
            used by externally visible overload.
            </summary>
            <param name="isDisposing">whether or not to clean up managed + unmanaged/large (true) or just unmanaged(false)</param>
        </member>
        <member name="M:VC3.Deployment.Install.BitsDownloader.Finalize">
            <summary>
            Destructor/Finalizer
            </summary>
        </member>
        <member name="T:VC3.Deployment.Install.BackgroundCopyManager">
            <summary>
            BackgroundCopyManager Class
            </summary>
        </member>
        <member name="T:VC3.Deployment.Install.IBackgroundCopyManager">
            <summary>
            Use the IBackgroundCopyManager interface to create transfer jobs, 
            retrieve an enumerator object that contains the jobs in the queue, 
            and to retrieve individual jobs from the queue.
            </summary>
        </member>
        <member name="M:VC3.Deployment.Install.IBackgroundCopyManager.CreateJob(System.String,VC3.Deployment.Install.BG_JOB_TYPE,System.Guid@,VC3.Deployment.Install.IBackgroundCopyJob@)">
            <summary>
            Creates a new transfer job
            </summary>
        </member>
        <member name="M:VC3.Deployment.Install.IBackgroundCopyManager.GetJob(System.Guid@,VC3.Deployment.Install.IBackgroundCopyJob@)">
            <summary>
            Retrieves a given job from the queue
            </summary>
        </member>
        <member name="M:VC3.Deployment.Install.IBackgroundCopyManager.EnumJobs(System.UInt32,VC3.Deployment.Install.IEnumBackgroundCopyJobs@)">
            <summary>
            Retrieves an enumerator object that you use to enumerate jobs in the queue
            </summary>
        </member>
        <member name="M:VC3.Deployment.Install.IBackgroundCopyManager.GetErrorDescription(System.Int32,System.UInt32,System.String@)">
            <summary>
            Retrieves a description for the given error code
            </summary>
        </member>
        <member name="T:VC3.Deployment.Install.IBackgroundCopyJob">
            <summary>
            Use the IBackgroundCopyJob interface to add files to the job, 
            set the priority level of the job, determine the state of the
            job, and to start and stop the job.
            </summary>
        </member>
        <member name="M:VC3.Deployment.Install.IBackgroundCopyJob.AddFileSet(System.UInt32,VC3.Deployment.Install.BG_FILE_INFO@)">
            <summary>
            Adds multiple files to the job
            </summary>
        </member>
        <member name="M:VC3.Deployment.Install.IBackgroundCopyJob.AddFile(System.String,System.String)">
            <summary>
            Adds a single file to the job
            </summary>
        </member>
        <member name="M:VC3.Deployment.Install.IBackgroundCopyJob.EnumFiles(VC3.Deployment.Install.IEnumBackgroundCopyFiles@)">
            <summary>
            Returns an interface pointer to an enumerator
            object that you use to enumerate the files in the job
            </summary>
        </member>
        <member name="M:VC3.Deployment.Install.IBackgroundCopyJob.Suspend">
            <summary>
            Pauses the job
            </summary>
        </member>
        <member name="M:VC3.Deployment.Install.IBackgroundCopyJob.Resume">
            <summary>
            Restarts a suspended job
            </summary>
        </member>
        <member name="M:VC3.Deployment.Install.IBackgroundCopyJob.Cancel">
            <summary>
            Cancels the job and removes temporary files from the client
            </summary>
        </member>
        <member name="M:VC3.Deployment.Install.IBackgroundCopyJob.Complete">
            <summary>
            Ends the job and saves the transferred files on the client
            </summary>
        </member>
        <member name="M:VC3.Deployment.Install.IBackgroundCopyJob.GetId(System.Guid@)">
            <summary>
            Retrieves the identifier of the job in the queue
            </summary>
        </member>
        <member name="M:VC3.Deployment.Install.IBackgroundCopyJob.GetType(VC3.Deployment.Install.BG_JOB_TYPE@)">
            <summary>
            Retrieves the type of transfer being performed, 
            such as a file download
            </summary>
        </member>
        <member name="M:VC3.Deployment.Install.IBackgroundCopyJob.GetProgress(VC3.Deployment.Install.BG_JOB_PROGRESS@)">
            <summary>
            Retrieves job-related progress information, 
            such as the number of bytes and files transferred 
            to the client
            </summary>
        </member>
        <member name="M:VC3.Deployment.Install.IBackgroundCopyJob.GetTimes(VC3.Deployment.Install.BG_JOB_TIMES@)">
            <summary>
            Retrieves timestamps for activities related
            to the job, such as the time the job was created
            </summary>
        </member>
        <member name="M:VC3.Deployment.Install.IBackgroundCopyJob.GetState(VC3.Deployment.Install.BG_JOB_STATE@)">
            <summary>
            Retrieves the state of the job
            </summary>
        </member>
        <member name="M:VC3.Deployment.Install.IBackgroundCopyJob.GetError(VC3.Deployment.Install.IBackgroundCopyError@)">
            <summary>
            Retrieves an interface pointer to 
            the error object after an error occurs
            </summary>
        </member>
        <member name="M:VC3.Deployment.Install.IBackgroundCopyJob.GetOwner(System.String@)">
            <summary>
            Retrieves the job owner's identity
            </summary>
        </member>
        <member name="M:VC3.Deployment.Install.IBackgroundCopyJob.SetDisplayName(System.String)">
            <summary>
            Specifies a display name that identifies the job in 
            a user interface
            </summary>
        </member>
        <member name="M:VC3.Deployment.Install.IBackgroundCopyJob.GetDisplayName(System.String@)">
            <summary>
            Retrieves the display name that identifies the job
            </summary>
        </member>
        <member name="M:VC3.Deployment.Install.IBackgroundCopyJob.SetDescription(System.String)">
            <summary>
            Specifies a description of the job
            </summary>
        </member>
        <member name="M:VC3.Deployment.Install.IBackgroundCopyJob.GetDescription(System.String@)">
            <summary>
            Retrieves the description of the job
            </summary>
        </member>
        <member name="M:VC3.Deployment.Install.IBackgroundCopyJob.SetPriority(VC3.Deployment.Install.BG_JOB_PRIORITY)">
            <summary>
            Specifies the priority of the job relative to 
            other jobs in the transfer queue
            </summary>
        </member>
        <member name="M:VC3.Deployment.Install.IBackgroundCopyJob.GetPriority(VC3.Deployment.Install.BG_JOB_PRIORITY@)">
            <summary>
            Retrieves the priority level you have set for the job.
            </summary>
        </member>
        <member name="M:VC3.Deployment.Install.IBackgroundCopyJob.SetNotifyFlags(System.UInt32)">
            <summary>
            Specifies the type of event notification to receive
            </summary>
        </member>
        <member name="M:VC3.Deployment.Install.IBackgroundCopyJob.GetNotifyFlags(System.UInt32@)">
            <summary>
            Retrieves the event notification (callback) flags 
            you have set for your application.
            </summary>
        </member>
        <member name="M:VC3.Deployment.Install.IBackgroundCopyJob.SetNotifyInterface(System.Object)">
            <summary>
            Specifies a pointer to your implementation of the 
            IBackgroundCopyCallback interface (callbacks). The 
            interface receives notification based on the event 
            notification flags you set
            </summary>
        </member>
        <member name="M:VC3.Deployment.Install.IBackgroundCopyJob.GetNotifyInterface(System.Object@)">
            <summary>
            Retrieves a pointer to your implementation 
            of the IBackgroundCopyCallback interface (callbacks).
            </summary>
        </member>
        <member name="M:VC3.Deployment.Install.IBackgroundCopyJob.SetMinimumRetryDelay(System.UInt32)">
            <summary>
            Specifies the minimum length of time that BITS waits after 
            encountering a transient error condition before trying to 
            transfer the file
            </summary>
        </member>
        <member name="M:VC3.Deployment.Install.IBackgroundCopyJob.GetMinimumRetryDelay(System.UInt32@)">
            <summary>
            Retrieves the minimum length of time that BITS waits after 
            encountering a transient error condition before trying to 
            transfer the file
            </summary>
        </member>
        <member name="M:VC3.Deployment.Install.IBackgroundCopyJob.SetNoProgressTimeout(System.UInt32)">
            <summary>
            Specifies the length of time that BITS continues to try to 
            transfer the file after encountering a transient error 
            condition
            </summary>
        </member>
        <member name="M:VC3.Deployment.Install.IBackgroundCopyJob.GetNoProgressTimeout(System.UInt32@)">
            <summary>
            Retrieves the length of time that BITS continues to try to 
            transfer the file after encountering a transient error condition
            </summary>
        </member>
        <member name="M:VC3.Deployment.Install.IBackgroundCopyJob.GetErrorCount(System.UInt32@)">
            <summary>
            Retrieves the number of times the job was interrupted by 
            network failure or server unavailability
            </summary>
        </member>
        <member name="M:VC3.Deployment.Install.IBackgroundCopyJob.SetProxySettings(VC3.Deployment.Install.BG_JOB_PROXY_USAGE,System.String,System.String)">
            <summary>
            Specifies which proxy to use to transfer the files
            </summary>
        </member>
        <member name="M:VC3.Deployment.Install.IBackgroundCopyJob.GetProxySettings(VC3.Deployment.Install.BG_JOB_PROXY_USAGE@,System.String@,System.String@)">
            <summary>
            Retrieves the proxy settings the job uses to transfer the files
            </summary>
        </member>
        <member name="M:VC3.Deployment.Install.IBackgroundCopyJob.TakeOwnership">
            <summary>
            Changes the ownership of the job to the current user
            </summary>
        </member>
        <member name="T:VC3.Deployment.Install.IBackgroundCopyError">
            <summary>
            Use the information in the IBackgroundCopyError interface to 
            determine the cause of the error and if the transfer process 
            can proceed
            </summary>
        </member>
        <member name="M:VC3.Deployment.Install.IBackgroundCopyError.GetError(VC3.Deployment.Install.BG_ERROR_CONTEXT@,System.Int32@)">
            <summary>
            Retrieves the error code and identify the context 
            in which the error occurred
            </summary>
        </member>
        <member name="M:VC3.Deployment.Install.IBackgroundCopyError.GetFile(VC3.Deployment.Install.IBackgroundCopyFile@)">
            <summary>
            Retrieves an interface pointer to the file object 
            associated with the error
            </summary>
        </member>
        <member name="M:VC3.Deployment.Install.IBackgroundCopyError.GetErrorDescription(System.UInt32,System.String@)">
            <summary>
            Retrieves the error text associated with the error
            </summary>
        </member>
        <member name="M:VC3.Deployment.Install.IBackgroundCopyError.GetErrorContextDescription(System.UInt32,System.String@)">
            <summary>
            Retrieves a description of the context in which the error occurred
            </summary>
        </member>
        <member name="M:VC3.Deployment.Install.IBackgroundCopyError.GetProtocol(System.String@)">
            <summary>
            Retrieves the protocol used to transfer the file
            </summary>
        </member>
        <member name="T:VC3.Deployment.Install.IEnumBackgroundCopyJobs">
            <summary>
            Use the IEnumBackgroundCopyJobs interface to enumerate the list 
            of jobs in the transfer queue. To get an IEnumBackgroundCopyJobs 
            interface pointer, call the IBackgroundCopyManager::EnumJobs method
            </summary>
        </member>
        <member name="M:VC3.Deployment.Install.IEnumBackgroundCopyJobs.Next(System.UInt32,VC3.Deployment.Install.IBackgroundCopyJob@,System.UInt32@)">
            <summary>
            Retrieves a specified number of items in the enumeration sequence
            </summary>
        </member>
        <member name="M:VC3.Deployment.Install.IEnumBackgroundCopyJobs.Skip(System.UInt32)">
            <summary>
            Skips a specified number of items in the enumeration sequence
            </summary>
        </member>
        <member name="M:VC3.Deployment.Install.IEnumBackgroundCopyJobs.Reset">
            <summary>
            Resets the enumeration sequence to the beginning.
            </summary>
        </member>
        <member name="M:VC3.Deployment.Install.IEnumBackgroundCopyJobs.Clone(VC3.Deployment.Install.IEnumBackgroundCopyJobs@)">
            <summary>
            Creates another enumerator that contains the same 
            enumeration state as the current one
            </summary>
        </member>
        <member name="M:VC3.Deployment.Install.IEnumBackgroundCopyJobs.GetCount(System.UInt32@)">
            <summary>
            Returns the number of items in the enumeration
            </summary>
        </member>
        <member name="T:VC3.Deployment.Install.IEnumBackgroundCopyFiles">
            <summary>
            Use the IEnumBackgroundCopyFiles interface to enumerate the files 
            that a job contains. To get an IEnumBackgroundCopyFiles interface 
            pointer, call the IBackgroundCopyJob::EnumFiles method
            </summary>
        </member>
        <member name="M:VC3.Deployment.Install.IEnumBackgroundCopyFiles.Next(System.UInt32,VC3.Deployment.Install.IBackgroundCopyFile@,System.UInt32@)">
            <summary>
            Retrieves a specified number of items in the enumeration sequence
            </summary>
        </member>
        <member name="M:VC3.Deployment.Install.IEnumBackgroundCopyFiles.Skip(System.UInt32)">
            <summary>
            Skips a specified number of items in the enumeration sequence
            </summary>
        </member>
        <member name="M:VC3.Deployment.Install.IEnumBackgroundCopyFiles.Reset">
            <summary>
            Resets the enumeration sequence to the beginning
            </summary>
        </member>
        <member name="M:VC3.Deployment.Install.IEnumBackgroundCopyFiles.Clone(VC3.Deployment.Install.IEnumBackgroundCopyFiles@)">
            <summary>
            Creates another enumerator that contains the same 
            enumeration state as the current enumerator
            </summary>
        </member>
        <member name="M:VC3.Deployment.Install.IEnumBackgroundCopyFiles.GetCount(System.UInt32@)">
            <summary>
            Retrieves the number of items in the enumeration
            </summary>
        </member>
        <member name="T:VC3.Deployment.Install.IBackgroundCopyFile">
            <summary>
            The IBackgroundCopyFile interface contains information about a file 
            that is part of a job. For example, you can use the interfaces methods
            to retrieve the local and remote names of the file and transfer progress
            information
            </summary>
        </member>
        <member name="M:VC3.Deployment.Install.IBackgroundCopyFile.GetRemoteName(System.String@)">
            <summary>
            Retrieves the remote name of the file
            </summary>
        </member>
        <member name="M:VC3.Deployment.Install.IBackgroundCopyFile.GetLocalName(System.String@)">
            <summary>
            Retrieves the local name of the file
            </summary>
        </member>
        <member name="M:VC3.Deployment.Install.IBackgroundCopyFile.GetProgress(VC3.Deployment.Install.BG_FILE_PROGRESS@)">
            <summary>
            Retrieves the progress of the file transfer
            </summary>
        </member>
        <member name="T:VC3.Deployment.Install.BG_JOB_STATE">
            <summary>
            The BG_JOB_STATE enumeration type defines constant values for the 
            different states of a job
            </summary>
        </member>
        <member name="F:VC3.Deployment.Install.BG_JOB_STATE.BG_JOB_STATE_QUEUED">
            <summary>
            Specifies that the job is in the queue and waiting to run. 
            If a user logs off while their job is transferring, the job 
            transitions to the queued state
            </summary>
        </member>
        <member name="F:VC3.Deployment.Install.BG_JOB_STATE.BG_JOB_STATE_CONNECTING">
            <summary>
            Specifies that BITS is trying to connect to the server. If the 
            connection succeeds, the state of the job becomes 
            BG_JOB_STATE_TRANSFERRING; otherwise, the state becomes 
            BG_JOB_STATE_TRANSIENT_ERROR
            </summary>
        </member>
        <member name="F:VC3.Deployment.Install.BG_JOB_STATE.BG_JOB_STATE_TRANSFERRING">
            <summary>
            Specifies that BITS is transferring data for the job
            </summary>
        </member>
        <member name="F:VC3.Deployment.Install.BG_JOB_STATE.BG_JOB_STATE_SUSPENDED">
            <summary>
            Specifies that the job is suspended (paused)
            </summary>
        </member>
        <member name="F:VC3.Deployment.Install.BG_JOB_STATE.BG_JOB_STATE_ERROR">
            <summary>
            Specifies that a non-recoverable error occurred (the service is 
            unable to transfer the file). When the error can be corrected, 
            such as an access-denied error, call the IBackgroundCopyJob::Resume 
            method after the error is fixed. However, if the error cannot be 
            corrected, call the IBackgroundCopyJob::Cancel method to cancel 
            the job, or call the IBackgroundCopyJob::Complete method to accept 
            the portion of a download job that transferred successfully.
            </summary>
        </member>
        <member name="F:VC3.Deployment.Install.BG_JOB_STATE.BG_JOB_STATE_TRANSIENT_ERROR">
            <summary>
            Specifies that a recoverable error occurred. The service tries to 
            recover from the transient error until the retry time value that 
            you specify using the IBackgroundCopyJob::SetNoProgressTimeout method 
            expires. If the retry time expires, the job state changes to 
            BG_JOB_STATE_ERROR
            </summary>
        </member>
        <member name="F:VC3.Deployment.Install.BG_JOB_STATE.BG_JOB_STATE_TRANSFERRED">
            <summary>
            Specifies that your job was successfully processed
            </summary>
        </member>
        <member name="F:VC3.Deployment.Install.BG_JOB_STATE.BG_JOB_STATE_ACKNOWLEDGED">
            <summary>
            Specifies that you called the IBackgroundCopyJob::Complete method 
            to acknowledge that your job completed successfully
            </summary>
        </member>
        <member name="F:VC3.Deployment.Install.BG_JOB_STATE.BG_JOB_STATE_CANCELLED">
            <summary>
            Specifies that you called the IBackgroundCopyJob::Cancel method to 
            cancel the job (remove the job from the transfer queue)
            </summary>
        </member>
        <member name="F:VC3.Deployment.Install.BG_JOB_STATE.BG_JOB_STATE_UPDATE_AVAILABLE">
            <summary>
            This is custom state not provided by BITS to indicate that an Update
            is available for the application.
            </summary>
        </member>
        <member name="F:VC3.Deployment.Install.BG_JOB_STATE.BG_JOB_STATE_VALIDATION_SUCCESS">
            <summary>
            This is custom state not provided by BITS to indicate that an validation
            of the application files was successful.
            </summary>
        </member>
        <member name="F:VC3.Deployment.Install.BG_JOB_STATE.BG_JOB_STATE_VALIDATION_FAILED">
            <summary>
            This is custom state not provided by BITS to indicate that an validation
            of the application files was failed.
            </summary>
        </member>
        <member name="T:VC3.Deployment.Install.BG_JOB_TYPE">
            <summary>
            The BG_JOB_TYPE enumeration type defines constant values that you 
            use to specify the type of transfer job, such as download
            </summary>
        </member>
        <member name="F:VC3.Deployment.Install.BG_JOB_TYPE.BG_JOB_TYPE_DOWNLOAD">
            <summary>
            Specifies that the job downloads files to the client
            </summary>
        </member>
        <member name="T:VC3.Deployment.Install.BG_JOB_PROXY_USAGE">
            <summary>
            The BG_JOB_PROXY_USAGE enumeration type defines constant values 
            that you use to specify which proxy to use for file transfers
            </summary>
        </member>
        <member name="F:VC3.Deployment.Install.BG_JOB_PROXY_USAGE.BG_JOB_PROXY_USAGE_PRECONFIG">
            <summary>
            Use the proxy and proxy bypass list settings defined by each 
            user to transfer files
            </summary>
        </member>
        <member name="F:VC3.Deployment.Install.BG_JOB_PROXY_USAGE.BG_JOB_PROXY_USAGE_NO_PROXY">
            <summary>
            Do not use a proxy to transfer files
            </summary>
        </member>
        <member name="F:VC3.Deployment.Install.BG_JOB_PROXY_USAGE.BG_JOB_PROXY_USAGE_OVERRIDE">
            <summary>
            Use the application's proxy and proxy bypass list to transfer files
            </summary>
        </member>
        <member name="T:VC3.Deployment.Install.BG_JOB_PRIORITY">
            <summary>
            The BG_JOB_PRIORITY enumeration type defines the constant values 
            that you use to specify the priority level of the job
            </summary>
        </member>
        <member name="F:VC3.Deployment.Install.BG_JOB_PRIORITY.BG_JOB_PRIORITY_FOREGROUND">
            <summary>
            Transfers the job in the foreground
            </summary>
        </member>
        <member name="F:VC3.Deployment.Install.BG_JOB_PRIORITY.BG_JOB_PRIORITY_HIGH">
            <summary>
            Transfers the job in the background. This is the highest background 
            priority level. 
            </summary>
        </member>
        <member name="F:VC3.Deployment.Install.BG_JOB_PRIORITY.BG_JOB_PRIORITY_NORMAL">
            <summary>
            Transfers the job in the background. This is the default priority 
            level for a job
            </summary>
        </member>
        <member name="F:VC3.Deployment.Install.BG_JOB_PRIORITY.BG_JOB_PRIORITY_LOW">
            <summary>
            Transfers the job in the background. This is the lowest background 
            priority level
            </summary>
        </member>
        <member name="T:VC3.Deployment.Install.BG_ERROR_CONTEXT">
            <summary>
            The BG_ERROR_CONTEXT enumeration type defines the constant values 
            that specify the context in which the error occurred
            </summary>
        </member>
        <member name="F:VC3.Deployment.Install.BG_ERROR_CONTEXT.BG_ERROR_CONTEXT_NONE">
            <summary>
            An error has not occurred
            </summary>
        </member>
        <member name="F:VC3.Deployment.Install.BG_ERROR_CONTEXT.BG_ERROR_CONTEXT_UNKNOWN">
            <summary>
            The error context is unknown
            </summary>
        </member>
        <member name="F:VC3.Deployment.Install.BG_ERROR_CONTEXT.BG_ERROR_CONTEXT_GENERAL_QUEUE_MANAGER">
            <summary>
            The transfer queue manager generated the error
            </summary>
        </member>
        <member name="F:VC3.Deployment.Install.BG_ERROR_CONTEXT.BG_ERROR_CONTEXT_QUEUE_MANAGER_NOTIFICATION">
            <summary>
            The error was generated while the queue manager was 
            notifying the client of an event
            </summary>
        </member>
        <member name="F:VC3.Deployment.Install.BG_ERROR_CONTEXT.BG_ERROR_CONTEXT_LOCAL_FILE">
            <summary>
            The error was related to the specified local file. For example, 
            permission was denied or the volume was unavailable
            </summary>
        </member>
        <member name="F:VC3.Deployment.Install.BG_ERROR_CONTEXT.BG_ERROR_CONTEXT_REMOTE_FILE">
            <summary>
            The error was related to the specified remote file. 
            For example, the URL is not accessible
            </summary>
        </member>
        <member name="F:VC3.Deployment.Install.BG_ERROR_CONTEXT.BG_ERROR_CONTEXT_GENERAL_TRANSPORT">
            <summary>
            The transport layer generated the error. These errors are general 
            transport failures; errors not specific to the remote file
            </summary>
        </member>
        <member name="T:VC3.Deployment.Install.BG_FILE_INFO">
            <summary>
            The BG_FILE_INFO structure provides the local and 
            remote names of the file to transfer
            </summary>
        </member>
        <member name="F:VC3.Deployment.Install.BG_FILE_INFO.RemoteName">
            <summary>
            Remote Name for the File
            </summary>
        </member>
        <member name="F:VC3.Deployment.Install.BG_FILE_INFO.LocalName">
            <summary>
            Local Name for the file
            </summary>
        </member>
        <member name="T:VC3.Deployment.Install.BG_JOB_PROGRESS">
            <summary>
            The BG_JOB_PROGRESS structure provides job-related progress information, 
            such as the number of bytes and files transferred
            </summary>
        </member>
        <member name="F:VC3.Deployment.Install.BG_JOB_PROGRESS.BytesTotal">
            <summary>
            Total number of bytes to transfer for the job.
            </summary>
        </member>
        <member name="F:VC3.Deployment.Install.BG_JOB_PROGRESS.BytesTransferred">
            <summary>
            Number of bytes transferred
            </summary>
        </member>
        <member name="F:VC3.Deployment.Install.BG_JOB_PROGRESS.FilesTotal">
            <summary>
            Total number of files to transfer for this job
            </summary>
        </member>
        <member name="F:VC3.Deployment.Install.BG_JOB_PROGRESS.FilesTransferred">
            <summary>
            Number of files transferred. 
            </summary>
        </member>
        <member name="T:VC3.Deployment.Install.BG_JOB_TIMES">
            <summary>
            The BG_JOB_TIMES structure provides job-related timestamps
            </summary>
        </member>
        <member name="F:VC3.Deployment.Install.BG_JOB_TIMES.CreationTime">
            <summary>
            Time the job was created
            </summary>
        </member>
        <member name="F:VC3.Deployment.Install.BG_JOB_TIMES.ModificationTime">
            <summary>
            Time the job was last modified or bytes were transferred
            </summary>
        </member>
        <member name="F:VC3.Deployment.Install.BG_JOB_TIMES.TransferCompletionTime">
            <summary>
            Time the job entered the BG_JOB_STATE_TRANSFERRED state
            </summary>
        </member>
        <member name="T:VC3.Deployment.Install.FILETIME">
            <summary>
            FILETIME Structure
            </summary>
        </member>
        <member name="F:VC3.Deployment.Install.FILETIME.dwLowDateTime">
            <summary>
            Description
            </summary>
        </member>
        <member name="F:VC3.Deployment.Install.FILETIME.dwHighDateTime">
            <summary>
            Description
            </summary>
        </member>
        <member name="T:VC3.Deployment.Install.BG_FILE_PROGRESS">
            <summary>
            The BG_FILE_PROGRESS structure provides file-related progress information, 
            such as the number of bytes transferred
            </summary>
        </member>
        <member name="F:VC3.Deployment.Install.BG_FILE_PROGRESS.BytesTotal">
            <summary>
            Size of the file in bytes
            </summary>
        </member>
        <member name="F:VC3.Deployment.Install.BG_FILE_PROGRESS.BytesTransferred">
            <summary>
            Number of bytes transferred. 
            </summary>
        </member>
        <member name="F:VC3.Deployment.Install.BG_FILE_PROGRESS.Completed">
            <summary>
            For downloads, the value is TRUE if the file is available to the user; 
            otherwise, the value is FALSE
            </summary>
        </member>
        <member name="T:VC3.Deployment.Diagnostics.SystemStatistics">
            <summary>
            Utility class for reporting statistics about installation environments.
            </summary>
        </member>
        <member name="M:VC3.Deployment.Diagnostics.SystemStatistics.ReportSystemStatistic(System.String,System.Double)">
            <summary>
            Reports system statistics to the management system.
            </summary>
            <param name="metricName"></param>
            <param name="value"></param>
        </member>
        <member name="M:VC3.Deployment.Diagnostics.SystemStatistics.ReportSystemStatistic(System.String,System.Double,System.DateTime)">
            <summary>
            Reports system statistics to the management system as of
            the specified date.
            </summary>
        </member>
        <member name="M:VC3.Deployment.Diagnostics.SystemStatistics.ReportDiskUsageAppDrive">
            <summary>
            Reports bytes free on the web application drive.
            </summary>
        </member>
        <member name="M:VC3.Deployment.Diagnostics.SystemStatistics.ReportDotNetVersions">
            <summary>
            Reports the build number of installed .Net framework versions.
            Build numbers for version not installed will be reported as -1.
            Currently inspects Major.Minor versions:
            1.1
            2.0
            3.0
            </summary>
        </member>
        <member name="M:VC3.Deployment.Diagnostics.SystemStatistics.ReportOSVersion">
            <summary>
            Reports OS version information.
            </summary>
        </member>
        <member name="T:VC3.Deployment.Text.GetValue">
            <summary>
            Task for setting values in templated files.
            </summary>
        </member>
        <member name="M:VC3.Deployment.Text.GetValue.Execute">
            <summary>
            Extracts values from the specified input using a regular expression pattern.
            </summary>
            <returns>True if a match was found, otherwise false</returns>
        </member>
        <member name="P:VC3.Deployment.Text.GetValue.InputFile">
            <summary>
            Gets or sets the path to the input text file.
            </summary>
        </member>
        <member name="P:VC3.Deployment.Text.GetValue.Input">
            <summary>
            Gets or sets the content to search.
            </summary>
        </member>
        <member name="P:VC3.Deployment.Text.GetValue.Pattern">
            <summary>
            Gets or sets the regular expression to search with.
            </summary>
        </member>
        <member name="P:VC3.Deployment.Text.GetValue.Prefix">
            <summary>
            Gets or sets the prefix to prepend to the property name was storing
            the value in the current context.
            </summary>
        </member>
        <member name="T:VC3.Deployment.Install.RsaValidator">
            <summary>
            RsaValidator uses asymmetric (public/private key pair) encryption using RSA,
            with a SHA1 hash to sign.
            </summary>
        </member>
        <member name="M:VC3.Deployment.Install.RsaValidator.#ctor">
            <summary>
            Creates a new <see cref="T:VC3.Deployment.Install.RsaValidator"/> instance.
            </summary>
        </member>
        <member name="M:VC3.Deployment.Install.RsaValidator.VC3#Deployment#Install#IValidator#Validate(System.IO.Stream,System.String)">
            <summary>
            Validates the specified file.
            </summary>
            <param name="file">The stream for the file being validated</param>
            <param name="signature">The keyed-hash signature to validate against</param>
            <returns>True if the file, hashed with validation key, matches the signature</returns>
        </member>
        <member name="M:VC3.Deployment.Install.RsaValidator.VC3#Deployment#Install#IValidator#Validate(System.String,System.String)">
            <summary>
            Validates the specified data.
            </summary>
            <param name="data">The data to validate</param>
            <param name="signature">The keyed-hash signature to validate against</param>
            <returns>True if the data, hashed with validation key, matches the signature</returns>
        </member>
        <member name="M:VC3.Deployment.Install.RsaValidator.VC3#Deployment#Install#IValidator#Sign(System.IO.Stream)">
            <summary>
            Creates a signature for the specified file by hashing the file with a key. 
            </summary>
            <param name="file">The stream for the file to sign</param>
            <returns>A signed hash for the whole file</returns>
        </member>
        <member name="M:VC3.Deployment.Install.RsaValidator.VC3#Deployment#Install#IValidator#Sign(System.String)">
            <summary>
            Creates a signature for the specified data by hashing the file with a key. 
            </summary>
            <param name="data">The data to sign</param>
            <returns>A signed hash for the whole file</returns>
        </member>
        <member name="M:VC3.Deployment.Install.RsaValidator.System#IDisposable#Dispose">
            <summary>
            Cleans up resources held by the validator.
            </summary>
        </member>
        <member name="P:VC3.Deployment.Install.RsaValidator.VC3#Deployment#Install#IValidator#Key">
            <summary>
            Gets or sets the key to use when signing or validating files or data.
            </summary>
        </member>
        <member name="T:VC3.Deployment.Install.InstallationSettings">
            <summary>
            Summary description for InstallationSettings.
            </summary>
        </member>
        <member name="P:VC3.Deployment.Install.InstallationSettings.Current">
            <summary>
            Gets the current <see cref="T:VC3.Deployment.Install.InstallationSettings"/> from the
            application configuration file.
            </summary>
        </member>
        <member name="P:VC3.Deployment.Install.InstallationSettings.AppManBaseUrl">
            <summary>
            The URL of the Application Manager web service.
            Affects <see cref="P:VC3.Deployment.Install.InstallationSettings.AppManInstallationUrl"/> and <see cref="P:VC3.Deployment.Install.InstallationSettings.AppManNotificationUrl"/>.
            </summary>
        </member>
        <member name="P:VC3.Deployment.Install.InstallationSettings.AppManInstallationUrl">
            <summary>
            The URL to the installation service of the 
            Application Manager.
            </summary>
        </member>
        <member name="P:VC3.Deployment.Install.InstallationSettings.AppManNotificationUrl">
            <summary>
            The URL to the notification service of the 
            Application Manager.
            </summary>
        </member>
        <member name="P:VC3.Deployment.Install.InstallationSettings.ApplicationDirectory">
            <summary>
            Gets or sets the root application installation directory.
            </summary>
        </member>
        <member name="P:VC3.Deployment.Install.InstallationSettings.SetupDirectory">
            <summary>
            Gets or sets the directory containing application setup files.
            </summary>
        </member>
        <member name="P:VC3.Deployment.Install.InstallationSettings.LicenseFile">
            <summary>
            Gets or sets the path to the license file relative to the
            <see cref="P:VC3.Deployment.Install.InstallationSettings.ApplicationDirectory"/>.
            </summary>
        </member>
        <member name="P:VC3.Deployment.Install.InstallationSettings.ManifestValidatorKey">
            <summary>
            Gets or sets the key to use when validating downloaded
            manifest files.
            </summary>
        </member>
        <member name="P:VC3.Deployment.Install.InstallationSettings.FileValidatorKey">
            <summary>
            Gets or sets the key to use when validating downloaded
            installation files.
            </summary>
        </member>
        <member name="P:VC3.Deployment.Install.InstallationSettings.ManifestValidatorType">
            <summary>
            Gets or sets the <see cref="T:System.Type"/> that implements the
            <see cref="T:VC3.Deployment.Install.IValidator"/> interface for signing and verifying
            manifest files.
            </summary>
        </member>
        <member name="P:VC3.Deployment.Install.InstallationSettings.FileValidatorType">
            <summary>
            Gets or sets the <see cref="T:System.Type"/> that implements the
            <see cref="T:VC3.Deployment.Install.IValidator"/> interface for signing and verifying
            installation files.
            </summary>
        </member>
        <member name="P:VC3.Deployment.Install.InstallationSettings.DownloaderType">
            <summary>
            Gets or sets the <see cref="T:System.Type"/> that implements the
            <see cref="T:VC3.Deployment.Install.IDownloader"/> interface for downloading
            installation files.
            </summary>
        </member>
        <member name="P:VC3.Deployment.Install.InstallationSettings.WaitForStatus">
            <summary>
            Gets or sets a flag indicating whether to wait for the custom installer
            process to exit in order to update the installation status before
            exiting the installation process.
            </summary>
        </member>
        <member name="T:VC3.Deployment.Install.AspConfigurator">
            <summary>
            Class for configuring asp version for a particular environment
            </summary>
            <example>
            VC3.Deployment.Web.AspConfigurator Url=http://localhost/VC3.TestView.WebUI FrameworkVersion=2.0.50727
            </example>
        </member>
        <member name="M:VC3.Deployment.Install.AspConfigurator.Rollback">
            <summary>
            Revert asp configuration to state before update
            </summary>
        </member>
        <member name="T:VC3.Deployment.Install.AspAppPoolManager">
            <summary>
            Class for configuring asp version for a particular environment
            </summary>
            <example>
            VC3.Deployment.Web.AspAppPoolManager Url=http://localhost/VC3.TestView.WebUI Apppoolname="VC3 TestView" // If on a IIS5.1 or lower, where app pools don't exist, an exception can either be thrown or not
            </example>
        </member>
        <member name="T:VC3.Deployment.Diagnostics.InstallComponentModelDiagnostics">
            <summary>
            Task for adding/updating performance counters relating to objects
            in memory.
            </summary>
        </member>
        <member name="M:VC3.Deployment.Diagnostics.InstallComponentModelDiagnostics.Execute">
            <summary>
            Creates a <see cref="T:System.Diagnostics.PerformanceCounterCategory"/> with
            associated <see cref="T:System.Diagnostics.PerformanceCounter"/>s under the 
            category name <see cref="P:VC3.Deployment.Diagnostics.InstallComponentModelDiagnostics.PerfMonAppName"/>
            </summary>
        </member>
        <member name="M:VC3.Deployment.Diagnostics.InstallComponentModelDiagnostics.Rollback">
            <summary>
            Remove existing counters.  Restores originals if any.
            </summary>
        </member>
        <member name="P:VC3.Deployment.Diagnostics.InstallComponentModelDiagnostics.PerfMonAppName">
            <summary>
            Gets or sets the ApplicationName
            </summary>
        </member>
        <member name="T:VC3.Deployment.Xml.CreateDiff">
            <summary>
            Task for creating XML diffgrams.
            </summary>
        </member>
        <member name="T:VC3.Deployment.Xml.ApplyDiff">
            <summary>
            Task for creating XML diffgrams.
            </summary>
        </member>
        <member name="T:VC3.Deployment.Text.SearchAndReplace">
            <summary>
            Performs a search and replace operation on a given file.
            Properties:
            	FilePath - path to the file to search.
            	KeepEmptiedLines - this property dictates what will happen 
            		in the case that the replace operation results in a line 
            		of text becoming empty.  The default behavior is that the 
            		"emptied" line is not written to the output file.
            See <see cref="T:VC3.Deployment.Text.RegexTask"/> for inherited properties.
            </summary>
        </member>
        <member name="M:VC3.Deployment.Text.SearchAndReplace.ReadContent(System.Text.Encoding@)">
            <summary>
            Read and replace content from the source file.
            </summary>
        </member>
        <member name="T:VC3.Deployment.Install.WebDownloader">
            <summary>
            Downloads a set of files based on the specified settings
            and manifest file.
            </summary>
        </member>
        <member name="M:VC3.Deployment.Install.WebDownloader.VC3#Deployment#Install#IDownloader#Download(System.String,System.String,System.TimeSpan)">
            <summary>
            Synchronously downloads a file using <see cref="T:System.Net.WebClient"/>.
            </summary>
            <param name="source">The source url to download from</param>
            <param name="destination">The local path to download to</param>
            <param name="timeout">The maximum time to wait for the download</param>
        </member>
        <member name="M:VC3.Deployment.Install.WebDownloader.System#IDisposable#Dispose">
            <summary>
            Stops the download process and cleans up resources.
            </summary>
        </member>
        <member name="T:VC3.Deployment.Install.GetApplicationManagerLicense">
            <summary>
            Task for getting an application license from the installation web service.
            </summary>
            <example>
            ExecuteTask.exe VC3.Deployment.Install.GetApplicationManagerLicense ServiceUrl=http://appmansvc.test.vc3.com/installationservice.asmx ProductKey=2065-5629-8582-6115 OutputFile=License.xml
            </example>
        </member>
        <member name="M:VC3.Deployment.Install.GetApplicationManagerLicense.Execute">
            <summary>
            Overridden to create the license file.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VC3.Deployment.Install.GetApplicationManagerLicense.Rollback">
            <summary>
            Removes the newly created license file.
            </summary>
        </member>
        <member name="M:VC3.Deployment.Install.GetApplicationManagerLicense.Commit">
            <summary>
            Removes backup files created during task execution.
            </summary>
        </member>
        <member name="P:VC3.Deployment.Install.GetApplicationManagerLicense.OutputFile">
            <summary>
            Path to write the license file to.
            </summary>
        </member>
        <member name="T:VC3.Deployment.Diagnostics.AddEventSource">
            <summary>
            Task for adding event log sources.
            </summary>
        </member>
        <member name="M:VC3.Deployment.Diagnostics.AddEventSource.Execute">
            <summary>
            Adds an event source to the event log.
            </summary>
        </member>
        <member name="M:VC3.Deployment.Diagnostics.AddEventSource.Rollback">
            <summary>
            Rolls back event source changes made by the task.
            </summary>
        </member>
        <member name="P:VC3.Deployment.Diagnostics.AddEventSource.Source">
            <summary>
            Gets or sets the name of the event source.
            </summary>
        </member>
        <member name="P:VC3.Deployment.Diagnostics.AddEventSource.Server">
            <summary>
            Gets or sets the name of the server to create the event source on.
            </summary>
        </member>
        <member name="P:VC3.Deployment.Diagnostics.AddEventSource.LogName">
            <summary>
            Gets or sets the name of the log to create the event source on.
            </summary>
        </member>
        <member name="T:VC3.Deployment.Database.ScriptFile">
            <summary>
            Represents a database object or change script file.
            </summary>
        </member>
        <member name="M:VC3.Deployment.Database.ScriptFile.GetScriptNumber(System.IO.FileInfo)">
            <summary>
            Gets the script number for a given FileInfo.  If no script number can be found returns -1.
            </summary>
            <param name="file"></param>
            <returns></returns>
        </member>
        <member name="P:VC3.Deployment.Database.ScriptFile.IsRunnable">
            <summary>
            If true, the script can be executed.
            </summary>
        </member>
        <member name="P:VC3.Deployment.Database.ScriptFile.EnvRestriction">
            <summary>
            Indicates the Environment that this script can be run on
            </summary>
        </member>
        <member name="P:VC3.Deployment.Database.ScriptFile.ServerVersion">
            <summary>
            The current SQL server Version
            </summary>
        </member>
        <member name="P:VC3.Deployment.Database.ScriptFile.VersionRestriction">
            <summary>
            Indicates the SQL Server version that this script can be run on.
            If not specified, the script can be run on any version.  Value is derived
            from the script's filename.
            </summary>
        </member>
        <member name="T:VC3.Deployment.Web.CreateSite">
            <summary>
            Task for creating IIS web sites.
            </summary>
            <remarks>
            VC3.Deployment.Web.CreateSite /r "PhysicalPath=C:\Program Files\VC3 TestView\WebUI" HostNames=testview.test.vc3.com
            </remarks>
        </member>
        <member name="M:VC3.Deployment.Web.CreateSite.Execute">
            <summary>
            Creates or updates an IIS web site using the current settings.
            </summary>
            <returns>True if the site was created or updated successfully, otherwise false</returns>
        </member>
        <member name="T:VC3.Deployment.Web.AddMimeType">
            <summary>
            Task for adding MIME types to IIS web sites.
            </summary>
        </member>
        <member name="M:VC3.Deployment.Web.AddMimeType.Execute">
            <summary>
            Adds or updates a MIME type for a web site.
            </summary>
            <returns>True if the MIME type was added or updated successfully, otherwise false</returns>
        </member>
        <member name="M:VC3.Deployment.Web.AddMimeType.Rollback">
            <summary>
            Rolls back mime type mappings performed by the task.
            </summary>
        </member>
        <member name="M:VC3.Deployment.Web.AddMimeType.RemoveMapping(VC3.Deployment.Web.TransactedDirectoryEntry,System.String)">
            <summary>
            Removes the MIME type mapping for the specified extension.
            </summary>
            <param name="directory">The directory to remove the mapping from</param>
            <param name="extension">The extension of the mapping to remove</param>
            <returns>The MIME type that was removed, or null if the extension was not mapped</returns>
        </member>
        <member name="M:VC3.Deployment.Web.AddMimeType.AddMapping(VC3.Deployment.Web.TransactedDirectoryEntry,System.String,System.String)">
            <summary>
            Adds the MIME type mapping for the specified extension.
            </summary>
            <param name="directory">The directory to add the mapping to</param>
            <param name="mimeType">The MIME type of the mapping to add</param>
            <param name="extension">The extension of the mapping to add</param>
        </member>
        <member name="P:VC3.Deployment.Web.AddMimeType.MimeType">
            <summary>
            Gets or sets the MIME type to add
            </summary>
        </member>
        <member name="P:VC3.Deployment.Web.AddMimeType.Extension">
            <summary>
            Gets or sets the extension to associate with the MIME type.
            </summary>
        </member>
        <member name="T:VC3.Deployment.Text.SetValue">
            <summary>
            Task for setting values in templated files.
            </summary>
        </member>
        <member name="M:VC3.Deployment.Text.SetValue.Execute">
            <summary>
            Replaces all instances of a template tag with a value in the input file.
            </summary>
            <returns>True if the file was updated successfully, otherwise false</returns>
        </member>
        <member name="M:VC3.Deployment.Text.SetValue.Commit">
            <summary>
            Removes the backup file created during execution.
            </summary>
        </member>
        <member name="M:VC3.Deployment.Text.SetValue.Rollback">
            <summary>
            Restores the original file.
            </summary>
        </member>
        <member name="P:VC3.Deployment.Text.SetValue.InputFile">
            <summary>
            Gets or sets the path to the input text file.
            </summary>
        </member>
        <member name="P:VC3.Deployment.Text.SetValue.Name">
            <summary>
            Gets or sets the name of the tag used when the task is executed.
            </summary>
        </member>
        <member name="P:VC3.Deployment.Text.SetValue.Value">
            <summary>
            Gets or sets the value used when the task is executed.
            </summary>
        </member>
        <member name="T:VC3.Deployment.Service.DeployService">
            <summary>
            Base class for installing/unstalling a Windows service.
            </summary>
        </member>
        <member name="P:VC3.Deployment.Service.DeployService.ServiceExe">
            <summary>
            Gets or sets the full path to the service executable
            </summary>
        </member>
        <member name="P:VC3.Deployment.Service.DeployService.ServiceName">
            <summary>
            Gets or sets the name to assign to the service
            </summary>
        </member>
        <member name="T:VC3.Deployment.Service.InstallService">
            <summary>
            Task to install a .Net Windows service.
            </summary>
            <example>
            VC3.Deployment.Service.InstallService /r /p ServiceExe=C:\projects\VC3\TestView\Mainline\Product\VC3.TestView.ScheduledTasks.Service\bin\Debug\TestViewTasksService.exe
            </example>
        </member>
        <member name="T:VC3.Deployment.Service.UninstallService">
            <summary>
            Task to uninstall a .Net Windows service.
            </summary>
            <example>
            VC3.Deployment.Service.UninstallService /r /p ServiceExe=C:\projects\VC3\TestView\Mainline\Product\VC3.TestView.ScheduledTasks.Service\bin\Debug\TestViewTasksService.exe
            </example>
        </member>
        <member name="T:VC3.Deployment.PropertyTask">
            <summary>
            Task for setting global deployment properties.
            </summary>
        </member>
        <member name="M:VC3.Deployment.PropertyTask.Execute">
            <summary>
            Sets the value of a global deployment property.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VC3.Deployment.PropertyTask.Rollback">
            <summary>
            Restores the value of a global deployment property.
            </summary>
        </member>
        <member name="P:VC3.Deployment.PropertyTask.Name">
            <summary>
            Gets or sets the name of the property.
            </summary>
        </member>
        <member name="P:VC3.Deployment.PropertyTask.Value">
            <summary>
            Gets or sets the value of the property.
            </summary>
        </member>
        <member name="T:VC3.Deployment.CommitTask">
            <summary>
            Commits all tasks up to this point
            </summary>
        </member>
        <member name="T:VC3.Deployment.ProjectTask">
            <summary>
            Executes a series of tasks, or task project, based on the
            specified task project xml document.
            </summary>
            <remarks>
            VC3.Deployment.ProjectTask ProjectFile=C:\Projects\VC3\TestView\Mainline\Product\VC3.TestView.Installer\Settings.xml
            </remarks>
        </member>
        <member name="M:VC3.Deployment.ProjectTask.#ctor">
            <summary>
            Creates a new uninitialized <see cref="T:VC3.Deployment.ProjectTask"/>.
            </summary>
        </member>
        <member name="M:VC3.Deployment.ProjectTask.RaiseMilestone(VC3.Deployment.ProjectMilestone,VC3.Deployment.DeploymentTask,System.Int32,System.Int32)">
            <summary>
            Raises the <see cref="E:VC3.Deployment.ProjectTask.Milestone"/> event.
            </summary>
        </member>
        <member name="M:VC3.Deployment.ProjectTask.RaiseMilestone(VC3.Deployment.ProjectMilestone,VC3.Deployment.DeploymentTask,System.Int32,System.Int32,System.String)">
            <summary>
            Raises the <see cref="E:VC3.Deployment.ProjectTask.Milestone"/> event.
            </summary>
        </member>
        <member name="M:VC3.Deployment.ProjectTask.Execute">
            <summary>
            Sequentially executes all of the tasks in the project.
            </summary>
            <returns>True if all of the tasks executed successfully, otherwise false</returns>
        </member>
        <member name="M:VC3.Deployment.ProjectTask.Commit">
            <summary>
            Commits all tasks that have been executed.
            </summary>
        </member>
        <member name="M:VC3.Deployment.ProjectTask.Rollback">
            <summary>
            Rolls back all tasks that have been executed.
            </summary>
        </member>
        <member name="M:VC3.Deployment.ProjectTask.GetProperty(System.Text.RegularExpressions.Match)">
            <summary>
            Returns the property value based on the property name.
            </summary>
            <param name="match">The match containing the property name</param>
            <returns>The value of the property</returns>
        </member>
        <member name="M:VC3.Deployment.ProjectTask.SetProperty(System.String,System.String)">
            <summary>
            Adds unknown properties to the collection of properties
            to use for substitutions when executing project tasks.
            </summary>
            <param name="name">The name of the property</param>
            <param name="value">The value of the property</param>
            <returns>True to indicate that the property has been set</returns>
        </member>
        <member name="M:VC3.Deployment.ProjectTask.task_DeploymentEvent(System.Object,VC3.Deployment.DeploymentEventArgs)">
            <summary>
            Reraises deployment events from nested tasks.
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
        </member>
        <member name="P:VC3.Deployment.ProjectTask.Project">
            <summary>
            Gets or sets the project document.
            </summary>
        </member>
        <member name="P:VC3.Deployment.ProjectTask.ProjectFile">
            <summary>
            Gets or sets the path to the project document.
            </summary>
        </member>
        <member name="P:VC3.Deployment.ProjectTask.BaseDirectory">
            <summary>
            Gets or sets the base directory that will be used to resolve relative paths.
            </summary>
        </member>
        <member name="E:VC3.Deployment.ProjectTask.Milestone">
            <summary>
            Notifies subscribers that a project milestone has been reached.
            </summary>
        </member>
        <member name="T:VC3.Deployment.ProjectContext">
            <summary>
            Implements <see cref="T:VC3.Deployment.IDeploymentContext"/> to provide context
            support for the <see cref="T:VC3.Deployment.ProjectTask"/> deployment task.
            </summary>
        </member>
        <member name="M:VC3.Deployment.ProjectContext.#ctor(VC3.Deployment.ProjectTask)">
            <summary>
            Creates a new <see cref="T:VC3.Deployment.ProjectContext"/> for the specified project.
            </summary>
            <param name="project">The <see cref="T:VC3.Deployment.ProjectTask"/> the context is for</param>
        </member>
        <member name="M:VC3.Deployment.ProjectContext.GetFullPath(System.String)">
            <summary>
            Resolves a relative path into an absolute path for
            the current deployment environment.
            </summary>
            <param name="path">The relative path to resolve</param>
            <returns>The absolute path</returns>
        </member>
        <member name="P:VC3.Deployment.ProjectContext.Item(System.String)">
            <summary>
            Gets or sets project scoped properties that may be accessed by
            project deployment tasks, or used to resolve property value tokens
            in the project file.
            </summary>
        </member>
        <member name="P:VC3.Deployment.ProjectContext.Keys">
            <summary>
            Gets the keys for values in this context
            </summary>
        </member>
        <member name="T:VC3.Deployment.ProjectMilestone">
            <summary>
            The type of project milestone, which allows external subscribers
            to be informed of project task execution progress.
            </summary>
        </member>
        <member name="T:VC3.Deployment.ProjectMilestoneHandler">
            <summary>
            Delegate for events raised by <see cref="T:VC3.Deployment.ProjectTask"/> subclasses when
            reaching project milestones.
            </summary>
        </member>
        <member name="T:VC3.Deployment.ProjectMilestoneArgs">
            <summary>
            Exposes the <see cref="T:VC3.Deployment.ProjectMilestone"/> and <see cref="T:VC3.Deployment.DeploymentTask"/> for a project milestone.
            </summary>
        </member>
        <member name="M:VC3.Deployment.ProjectMilestoneArgs.#ctor(VC3.Deployment.ProjectMilestone,VC3.Deployment.DeploymentTask,System.Int32,System.Int32,System.String)">
            <summary>
            Creates a new <see cref="T:VC3.Deployment.ProjectMilestoneArgs"/> instance to expose information
            for the project milestone event.
            </summary>
            <param name="milestone">The <see cref="T:VC3.Deployment.ProjectMilestone"/> that was reached</param>
            <param name="task">The <see cref="T:VC3.Deployment.DeploymentTask"/> the milestone is for</param>
            <param name="totalMilestones">The total number of milestones for the project</param>
            <param name="currentMilestone">The current milestone relative to the total</param>
            <param name="description">A description of the milestone that has occurred</param>
        </member>
        <member name="P:VC3.Deployment.ProjectMilestoneArgs.Milestone">
            <summary>
            Gets the <see cref="T:VC3.Deployment.ProjectMilestone"/> that was reached.
            </summary>
        </member>
        <member name="P:VC3.Deployment.ProjectMilestoneArgs.Task">
            <summary>
            Gets the <see cref="T:VC3.Deployment.DeploymentTask"/> the milestone is for.
            </summary>
        </member>
        <member name="P:VC3.Deployment.ProjectMilestoneArgs.TotalMilestones">
            <summary>
            Gets the total number of milestones for the project.
            </summary>
        </member>
        <member name="P:VC3.Deployment.ProjectMilestoneArgs.CurrentMilestone">
            <summary>
            Gets the current milestone relative to the total.
            </summary>
        </member>
        <member name="P:VC3.Deployment.ProjectMilestoneArgs.Description">
            <summary>
            Gets a description of the milestone that has occurred.
            </summary>
        </member>
        <member name="T:VC3.Deployment.IO.SetTransactedFileSystemSettingsTask">
            <summary>
            Task for changing the settings of TransactedFileSystemInfo class
            </summary>
        </member>
        <member name="P:VC3.Deployment.IO.SetTransactedFileSystemSettingsTask.BackupDirectory">
            <summary>
            Directory to back files and directories to
            </summary>
        </member>
        <member name="M:VC3.Deployment.IO.IFileSystemAction.Restore">
            <summary>
            
            </summary>
        </member>
        <member name="T:VC3.Deployment.IO.TransactedFileInfo">
            <summary>
            Summary description for TransactedFileInfo.
            </summary>
        </member>
        <member name="M:VC3.Deployment.IO.TransactedFileInfo.#ctor(System.IO.FileInfo)">
            <summary>
            Creates a new <see cref="T:VC3.Deployment.IO.TransactedFileInfo"/> instance that
            wrappers the specified <see cref="T:System.IO.FileInfo"/>.
            </summary>
            <param name="file">The file to transact operations on</param>
        </member>
        <member name="M:VC3.Deployment.IO.TransactedFileInfo.#ctor(System.String)">
            <summary>
            Creates a new <see cref="T:VC3.Deployment.IO.TransactedFileInfo"/> instance that
            wrappers the specified file.
            </summary>
            <param name="fileName">The name of the file to transact operations on</param>
        </member>
        <member name="M:VC3.Deployment.IO.TransactedFileInfo.OpenText">
            <summary>
            Creates a <see cref="T:System.IO.StreamReader"/> to read text from the file.
            </summary>
            <returns>The open <see cref="T:System.IO.StreamReader"/></returns>
        </member>
        <member name="M:VC3.Deployment.IO.TransactedFileInfo.OpenRead">
            <summary>
            Creates a <see cref="T:System.IO.FileStream"/> to read data from the file.
            </summary>
            <returns>The open <see cref="T:System.IO.FileStream"/></returns>
        </member>
        <member name="M:VC3.Deployment.IO.TransactedFileInfo.OpenWrite">
            <summary>
            Creates a <see cref="T:System.IO.FileStream"/> to write data to the file.
            </summary>
            <returns>The open <see cref="T:System.IO.FileStream"/></returns>
        </member>
        <member name="M:VC3.Deployment.IO.TransactedFileInfo.GetTempFileName">
            <summary>
            Creates and returns the name of a unique temporary file.
            </summary>
            <returns>The full path to the temporary file</returns>
        </member>
        <member name="M:VC3.Deployment.IO.TransactedFileInfo.Delete">
            <summary>
            Deletes the current file.
            </summary>
        </member>
        <member name="M:VC3.Deployment.IO.TransactedFileInfo.Delete(System.String,VC3.Deployment.IO.FileSystemChangeLog)">
            <summary>
            Deletes the specified file.
            In order to compensate for other processes locking
            the file, this method will attempt to delete the file
            several times if needed.
            </summary>
            <param name="path">The path of the file to delete.</param>
        </member>
        <member name="P:VC3.Deployment.IO.TransactedFileInfo.Exists">
            <summary>
            Indicates whether the current file exists.
            </summary>
        </member>
        <member name="P:VC3.Deployment.IO.TransactedFileInfo.FullName">
            <summary>
            Gets the full name and path of the file.
            </summary>
        </member>
        <member name="P:VC3.Deployment.IO.TransactedFileInfo.Name">
            <summary>
            Gets the name of the file.
            </summary>
        </member>
        <member name="T:VC3.Deployment.Database.ScriptData">
            <summary>
            Task for generating script to syncronize data in one or more tables
            in a destination database based on the data in a source database,
            without having to connect to the source database when the script is run. 
            Support filtering of source data by applying a filter clause to one or
            more tables.
            </summary>
        </member>
        <member name="M:VC3.Deployment.Database.ScriptData.Execute">
            <summary>
            Generates the data synchronization scripts for the specified
            tables and outputs them to the specified file path.
            </summary>
            <returns>True if the script file was created successfully, otherwise false</returns>
        </member>
        <member name="P:VC3.Deployment.Database.ScriptData.OutputFile">
            <summary>
            Gets or sets the path of the file to output data
            synchronization script to.
            </summary>
        </member>
        <member name="P:VC3.Deployment.Database.ScriptData.Tables">
            <summary>
            Gets or sets the names of the tables to generate data
            synchronization script for.  A filter can be applied to a table by placing
            in square brackets after the table name. Ex: Customers[Status = 'Active' and State='SC'].
            </summary>
        </member>
        <member name="P:VC3.Deployment.Database.ScriptData.DeleteObsoleteRecords">
            <summary>
            Gets or sets a value indicating whether the generated script 
            should attempt to drop obsolete records from the scripted tables.
            </summary>
        </member>
        <member name="P:VC3.Deployment.Database.ScriptData.PreBatchSQL">
            <summary>
            Gets or sets a body of SQL to be output before
            the main body of the output script
            </summary>
        </member>
        <member name="P:VC3.Deployment.Database.ScriptData.PostBatchSQL">
            <summary>
            Gets or sets a body of SQL to be output after
            the main body of the output script
            </summary>
        </member>
        <member name="T:VC3.Deployment.Database.ScriptData.Table">
            <summary>
            Represents a table in a database.
            </summary>
        </member>
        <member name="M:VC3.Deployment.Database.ScriptData.Table.#ctor(System.String,System.String)">
            <summary>
            Creates a new table instance.
            </summary>
            <param name="connectionString">The connection string for the database the table is in</param>
            <param name="name">The name of the table</param>
        </member>
        <member name="M:VC3.Deployment.Database.ScriptData.Table.GetData">
            <summary>
            Gets data in the table adding a filter if specified.
            </summary>
            <returns>An <see cref="T:System.Data.IDataReader"/> containing the table data</returns>
        </member>
        <member name="P:VC3.Deployment.Database.ScriptData.Table.Name">
            <summary>
            Gets the name of the table.
            </summary>
        </member>
        <member name="P:VC3.Deployment.Database.ScriptData.Table.VariableName">
            <summary>
            Gets the name of the table variable.
            </summary>
        </member>
        <member name="P:VC3.Deployment.Database.ScriptData.Table.Definition">
            <summary>
            Gets the schema definition for the table.
            </summary>
        </member>
        <member name="P:VC3.Deployment.Database.ScriptData.Table.Columns">
            <summary>
            Gets all of the columns for the table.
            </summary>
        </member>
        <member name="P:VC3.Deployment.Database.ScriptData.Table.Keys">
            <summary>
            Gets the primary key columns for the table.
            </summary>
        </member>
        <member name="P:VC3.Deployment.Database.ScriptData.Table.Filter">
            <summary>
            Gets or sets a filter clause that can be used
            to filter out desired records
            </summary>
        </member>
        <member name="T:VC3.Deployment.Database.ScriptData.Column">
            <summary>
            Represents a column in a database table.
            </summary>
        </member>
        <member name="M:VC3.Deployment.Database.ScriptData.Column.#ctor(System.String,System.String,System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Creates a new column instance.
            </summary>
            <param name="name">The name of the column</param>
            <param name="dataType">The data type of the column</param>
            <param name="length">The maximum length of the column</param>
            <param name="index">The index of the column in the table</param>
            <param name="isNullable">A flag indicating whether the column is nullable</param>
            <param name="isKey">A flag indicating whether the column is a primary key</param>
        </member>
        <member name="M:VC3.Deployment.Database.ScriptData.Column.ToSql(System.Data.IDataRecord)">
            <summary>
            Retrieves and converts the value of the current column
            to a SQL constant expression.
            </summary>
            <param name="data">An <see cref="T:System.Data.IDataRecord"/> containing the data</param>
            <returns>The SQL representation of the data for the column</returns>
        </member>
        <member name="M:VC3.Deployment.Database.ScriptData.Column.ToSql(System.Object)">
            <summary>
            Converts the value of the current column to a SQL constant expression.
            </summary>
            <param name="value">The value to convert</param>
            <returns>The SQL representation of the data for the column</returns>
        </member>
        <member name="P:VC3.Deployment.Database.ScriptData.Column.Name">
            <summary>
            Gets the name of the column.
            </summary>
        </member>
        <member name="P:VC3.Deployment.Database.ScriptData.Column.DataType">
            <summary>
            Gets the data type of the column.
            </summary>
        </member>
        <member name="P:VC3.Deployment.Database.ScriptData.Column.Definition">
            <summary>
            Gets the schema definition of the column.
            </summary>
        </member>
        <member name="P:VC3.Deployment.Database.ScriptData.Column.Length">
            <summary>
            Gets the maximum length of the column.
            </summary>
        </member>
        <member name="P:VC3.Deployment.Database.ScriptData.Column.Index">
            <summary>
            Gets the index of the column in the table.
            </summary>
        </member>
        <member name="P:VC3.Deployment.Database.ScriptData.Column.IsNullable">
            <summary>
            Indicates whether the column is nullable.
            </summary>
        </member>
        <member name="P:VC3.Deployment.Database.ScriptData.Column.IsKey">
            <summary>
            Indicates whether the column is a primary key.
            </summary>
        </member>
        <member name="T:VC3.Deployment.Web.ConvertNavigation">
            <summary>
            Task that converts navigation providers.
            Properties: 
            	SourceFile - the source navigation file.
            	Destination - the destination navigation file.
            </summary>
        </member>
        <member name="T:VC3.Deployment.IO.Copy">
            <summary>
            Task for copying files and directories.
            </summary>
        </member>
        <member name="M:VC3.Deployment.IO.Copy.Execute">
            <summary>
            Copies files or directories.
            </summary>
            <returns>True if the copy succeeded, otherwise false</returns>
        </member>
        <member name="M:VC3.Deployment.IO.Copy.Rollback">
            <summary>
            Deletes files and directories created and restores files
            replaced during task execution.
            </summary>
        </member>
        <member name="M:VC3.Deployment.IO.Copy.Commit">
            <summary>
            Removes backup files created during task execution.
            </summary>
        </member>
        <member name="M:VC3.Deployment.IO.Copy.CopyFile(System.String,System.String)">
            <summary>
            Copies a single file and backs up existing files replaced by the copy.
            </summary>
            <param name="source">The path of the file to copy</param>
            <param name="destination">The path to copy the file to</param>
        </member>
        <member name="M:VC3.Deployment.IO.Copy.CopyFiles(System.String,System.String)">
            <summary>
            Copies one or more files from one directory to another.
            </summary>
            <param name="source">The path of the files to copy</param>
            <param name="destination">The path of the directory to copy the files to</param>
        </member>
        <member name="M:VC3.Deployment.IO.Copy.CopyDirectory(System.String,System.String)">
            <summary>
            Recursively copies a directory tree.
            </summary>
            <param name="source">The source directory</param>
            <param name="destination">The destination directory</param>
        </member>
        <member name="P:VC3.Deployment.IO.Copy.Source">
            <summary>
            Gets or sets the source file or directory.
            </summary>
        </member>
        <member name="P:VC3.Deployment.IO.Copy.Destination">
            <summary>
            Gets or sets the destination file or directory.
            </summary>
        </member>
        <member name="T:VC3.Deployment.Xml.ForEach">
            <summary>
            Iterates over a collection of nodes selected using an xpath expression.
            Properties:
            	Select - xpath expression used to select the list of nodes.
            	Property - property prefix to store node attributes.
            	IndexProperty (optional) - property used to store the current index.
            	UseZeroBasedIndex - indicates whether the index should begin at zero.
            	AreResultsExpected - indicates whether an error should be thrown if no 
            		results are returned by the search.  Disabled by default.
            </summary>
        </member>
        <member name="P:VC3.Deployment.Xml.ForEach.Select">
            <summary>
            Gets or sets the XPath expression used to obtain a set of nodes.
            </summary>
        </member>
        <member name="P:VC3.Deployment.Xml.ForEach.Property">
            <summary>
            Gets or sets the name of the property that will be used 
            to store the value of the node of the current iteration.
            </summary>
        </member>
        <member name="P:VC3.Deployment.Xml.ForEach.InputFile">
            <summary>
            Gets or sets the path to the input XML file.
            </summary>
        </member>
        <member name="T:VC3.Deployment.UnitTestingService.UnitTest">
            <remarks/>
        </member>
        <member name="M:VC3.Deployment.UnitTestingService.UnitTest.#ctor">
            <remarks/>
        </member>
        <member name="M:VC3.Deployment.UnitTestingService.UnitTest.StartSession(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:VC3.Deployment.UnitTestingService.UnitTest.BeginStartSession(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:VC3.Deployment.UnitTestingService.UnitTest.EndStartSession(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:VC3.Deployment.UnitTestingService.UnitTest.StartSessionAsync(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:VC3.Deployment.UnitTestingService.UnitTest.StartSessionAsync(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:VC3.Deployment.UnitTestingService.UnitTest.RegisterClient(System.String)">
            <remarks/>
        </member>
        <member name="M:VC3.Deployment.UnitTestingService.UnitTest.BeginRegisterClient(System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:VC3.Deployment.UnitTestingService.UnitTest.EndRegisterClient(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:VC3.Deployment.UnitTestingService.UnitTest.RegisterClientAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:VC3.Deployment.UnitTestingService.UnitTest.RegisterClientAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:VC3.Deployment.UnitTestingService.UnitTest.GetNextTest(System.String,System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:VC3.Deployment.UnitTestingService.UnitTest.BeginGetNextTest(System.String,System.String,System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:VC3.Deployment.UnitTestingService.UnitTest.EndGetNextTest(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:VC3.Deployment.UnitTestingService.UnitTest.GetNextTestAsync(System.String,System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:VC3.Deployment.UnitTestingService.UnitTest.GetNextTestAsync(System.String,System.String,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:VC3.Deployment.UnitTestingService.UnitTest.CancelAsync(System.Object)">
            <remarks/>
        </member>
        <member name="E:VC3.Deployment.UnitTestingService.UnitTest.StartSessionCompleted">
            <remarks/>
        </member>
        <member name="E:VC3.Deployment.UnitTestingService.UnitTest.RegisterClientCompleted">
            <remarks/>
        </member>
        <member name="E:VC3.Deployment.UnitTestingService.UnitTest.GetNextTestCompleted">
            <remarks/>
        </member>
        <member name="T:VC3.Deployment.UnitTestingService.RegisterClientResult">
            <remarks/>
        </member>
        <member name="P:VC3.Deployment.UnitTestingService.RegisterClientResult.Client">
            <remarks/>
        </member>
        <member name="P:VC3.Deployment.UnitTestingService.RegisterClientResult.Success">
            <remarks/>
        </member>
        <member name="P:VC3.Deployment.UnitTestingService.RegisterClientResult.Message">
            <remarks/>
        </member>
        <member name="T:VC3.Deployment.UnitTestingService.Client">
            <remarks/>
        </member>
        <member name="P:VC3.Deployment.UnitTestingService.Client.Id">
            <remarks/>
        </member>
        <member name="P:VC3.Deployment.UnitTestingService.Client.ProjectId">
            <remarks/>
        </member>
        <member name="P:VC3.Deployment.UnitTestingService.Client.Project">
            <remarks/>
        </member>
        <member name="T:VC3.Deployment.UnitTestingService.Project">
            <remarks/>
        </member>
        <member name="P:VC3.Deployment.UnitTestingService.Project.Id">
            <remarks/>
        </member>
        <member name="P:VC3.Deployment.UnitTestingService.Project.Name">
            <remarks/>
        </member>
        <member name="T:VC3.Deployment.UnitTestingService.Session">
            <remarks/>
        </member>
        <member name="P:VC3.Deployment.UnitTestingService.Session.Id">
            <remarks/>
        </member>
        <member name="P:VC3.Deployment.UnitTestingService.Session.ProjectId">
            <remarks/>
        </member>
        <member name="P:VC3.Deployment.UnitTestingService.Session.SourceDirectory">
            <remarks/>
        </member>
        <member name="P:VC3.Deployment.UnitTestingService.Session.UnitTestingProject">
            <remarks/>
        </member>
        <member name="P:VC3.Deployment.UnitTestingService.Session.VsmdiFileName">
            <remarks/>
        </member>
        <member name="P:VC3.Deployment.UnitTestingService.Session.ConfigFileName">
            <remarks/>
        </member>
        <member name="P:VC3.Deployment.UnitTestingService.Session.ListName">
            <remarks/>
        </member>
        <member name="P:VC3.Deployment.UnitTestingService.Session.IsDependency">
            <remarks/>
        </member>
        <member name="P:VC3.Deployment.UnitTestingService.Session.IsActive">
            <remarks/>
        </member>
        <member name="P:VC3.Deployment.UnitTestingService.Session.EmailToNotify">
            <remarks/>
        </member>
        <member name="P:VC3.Deployment.UnitTestingService.Session.Project">
            <remarks/>
        </member>
        <member name="T:VC3.Deployment.UnitTestingService.Test">
            <remarks/>
        </member>
        <member name="P:VC3.Deployment.UnitTestingService.Test.Id">
            <remarks/>
        </member>
        <member name="P:VC3.Deployment.UnitTestingService.Test.SessionId">
            <remarks/>
        </member>
        <member name="P:VC3.Deployment.UnitTestingService.Test.TestName">
            <remarks/>
        </member>
        <member name="P:VC3.Deployment.UnitTestingService.Test.Status">
            <remarks/>
        </member>
        <member name="P:VC3.Deployment.UnitTestingService.Test.Session">
            <remarks/>
        </member>
        <member name="T:VC3.Deployment.UnitTestingService.TestStatus">
            <remarks/>
        </member>
        <member name="F:VC3.Deployment.UnitTestingService.TestStatus.Aborted">
            <remarks/>
        </member>
        <member name="F:VC3.Deployment.UnitTestingService.TestStatus.Completed">
            <remarks/>
        </member>
        <member name="F:VC3.Deployment.UnitTestingService.TestStatus.Disconnected">
            <remarks/>
        </member>
        <member name="F:VC3.Deployment.UnitTestingService.TestStatus.Error">
            <remarks/>
        </member>
        <member name="F:VC3.Deployment.UnitTestingService.TestStatus.Executed">
            <remarks/>
        </member>
        <member name="F:VC3.Deployment.UnitTestingService.TestStatus.Failed">
            <remarks/>
        </member>
        <member name="F:VC3.Deployment.UnitTestingService.TestStatus.Inconclusive">
            <remarks/>
        </member>
        <member name="F:VC3.Deployment.UnitTestingService.TestStatus.InProgress">
            <remarks/>
        </member>
        <member name="F:VC3.Deployment.UnitTestingService.TestStatus.NotExecuted">
            <remarks/>
        </member>
        <member name="F:VC3.Deployment.UnitTestingService.TestStatus.NotRunnable">
            <remarks/>
        </member>
        <member name="F:VC3.Deployment.UnitTestingService.TestStatus.Passed">
            <remarks/>
        </member>
        <member name="F:VC3.Deployment.UnitTestingService.TestStatus.PassedButRunAborted">
            <remarks/>
        </member>
        <member name="F:VC3.Deployment.UnitTestingService.TestStatus.Pending">
            <remarks/>
        </member>
        <member name="F:VC3.Deployment.UnitTestingService.TestStatus.Timeout">
            <remarks/>
        </member>
        <member name="F:VC3.Deployment.UnitTestingService.TestStatus.Total">
            <remarks/>
        </member>
        <member name="F:VC3.Deployment.UnitTestingService.TestStatus.Warning">
            <remarks/>
        </member>
        <member name="T:VC3.Deployment.UnitTestingService.GetNextTestResult">
            <remarks/>
        </member>
        <member name="P:VC3.Deployment.UnitTestingService.GetNextTestResult.Test">
            <remarks/>
        </member>
        <member name="P:VC3.Deployment.UnitTestingService.GetNextTestResult.Success">
            <remarks/>
        </member>
        <member name="P:VC3.Deployment.UnitTestingService.GetNextTestResult.Message">
            <remarks/>
        </member>
        <member name="T:VC3.Deployment.UnitTestingService.StartSessionCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:VC3.Deployment.UnitTestingService.RegisterClientCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:VC3.Deployment.UnitTestingService.RegisterClientCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:VC3.Deployment.UnitTestingService.RegisterClientCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:VC3.Deployment.UnitTestingService.GetNextTestCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:VC3.Deployment.UnitTestingService.GetNextTestCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:VC3.Deployment.UnitTestingService.GetNextTestCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:VC3.Deployment.Install.OracleICInstaller">
            <summary>
            Task for installing the Oracle Instant Client, a lightweight version of the client required for making OLE DB/ODBC connections to Oracle Data Sources
            </summary>
            <example>
            VC3.Deployment.Install.OracleICInstaller ClientPackageDirectory=C:\ClientPackage AutomaticallyRestart=true
            </example>
        </member>
        <member name="P:VC3.Deployment.Install.OracleICInstaller.StopIf64Bit">
            <summary>
            A flag that determines whether or not the installer should stop the installation, if an environment is a 64 bit windows instance
            </summary>
        </member>
        <member name="P:VC3.Deployment.Install.OracleICInstaller.ClientSourceDirectory">
            <summary>
            The source directory the client exists in, relative to the Working Directory
            </summary>
        </member>
        <member name="P:VC3.Deployment.Install.OracleICInstaller.ClientDestinationDirectory">
            <summary>
            The destination the client should be installed to
            </summary>
        </member>
        <member name="P:VC3.Deployment.Install.OracleICInstaller.AutomaticallyRestart">
            <summary>
            Should the machine automatically restart after completing the task		
            </summary>
        </member>
        <member name="P:VC3.Deployment.Install.OracleICInstaller.DetectPreviousInstallation">
            <summary>
            Determines if the installer should try to detect a previous installation.
            During execution, it will attempt to determine if an oracle client, that includes or supercedes the functionality of the Instant Client, is installed.
            For instance if a full oracle server, the complete client, or another instant client.
            If there exists one, it will stop the installation, as multiple installations can cause conflicts
            However, it is designed to detect Oracle 10g, and may throw a false positive if another version is used
            </summary>
        </member>
        <member name="T:VC3.Deployment.DeploymentEventType">
            <summary>
            The type of deployment event, which allows external subscribers
            to use or ignore the event information based on the level of importance.
            </summary>
        </member>
        <member name="T:VC3.Deployment.DeploymentEventHandler">
            <summary>
            Delegate for events raised by <see cref="T:VC3.Deployment.DeploymentTask"/> subclasses when
            performing deployment-related operations.
            </summary>
        </member>
        <member name="T:VC3.Deployment.DeploymentEventArgs">
            <summary>
            Exposes the <see cref="T:VC3.Deployment.DeploymentEventType"/> and message for a deployment event.
            </summary>
        </member>
        <member name="T:VC3.Deployment.TaskNameAttribute">
            <summary>
            Specified the name of tasks to use in project files.
            </summary>
        </member>
        <member name="M:VC3.Deployment.TaskNameAttribute.#ctor(System.String)">
            <summary>
            Creates a new <see cref="T:VC3.Deployment.TaskNameAttribute"/> and specifies the
            name of the task.
            </summary>
            <param name="name">The name of the task</param>
        </member>
        <member name="P:VC3.Deployment.TaskNameAttribute.Name">
            <summary>
            Gets the name of the task as defined in project files.
            </summary>
        </member>
        <member name="T:VC3.Deployment.Database.Connection">
            <summary>
            Stores information required to connect to a database.
            </summary>
        </member>
        <member name="P:VC3.Deployment.Database.Connection.Server">
            <summary>
            Gets or sets the database server to perform the task on.
            </summary>
        </member>
        <member name="P:VC3.Deployment.Database.Connection.Database">
            <summary>
            Gets or sets the database to perform the task on.
            </summary>
        </member>
        <member name="P:VC3.Deployment.Database.Connection.Username">
            <summary>
            Gets or sets the username to use to connect to the database.
            </summary>
        </member>
        <member name="P:VC3.Deployment.Database.Connection.Password">
            <summary>
            Gets or sets the password to use to connect to the database.
            </summary>
        </member>
        <member name="P:VC3.Deployment.Database.Connection.UseIntegratedSecurity">
            <summary>
            Specifies whether to use integrated security or use the specified
            <see cref="P:VC3.Deployment.Database.Connection.Username"/> and <see cref="P:VC3.Deployment.Database.Connection.Password"/>.
            </summary>
        </member>
        <member name="P:VC3.Deployment.Database.Connection.NoConnectionString">
            <summary>
            Indicates whether a connection string has been assigned or
            initialized for the connection.
            </summary>
        </member>
        <member name="P:VC3.Deployment.Database.Connection.ConnectionString">
            <summary>
            Gets or sets the connection string to use when connecting
            to the database to perform the task on.
            </summary>
        </member>
    </members>
</doc>
