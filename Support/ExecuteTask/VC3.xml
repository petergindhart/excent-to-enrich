<?xml version="1.0"?>
<doc>
    <assembly>
        <name>VC3</name>
    </assembly>
    <members>
        <member name="T:VC3.Diagnostics.PerformanceAuditor">
             <summary>
             The PerformanceAuditor provides time and iteration counting of audited areas of code.  The PerformanceAuditor is all static thus can be simply dropped into
             problematic code to determine bottlenecks.  The results of the performance monitoring will be calculated/summarized to the debug window by default or to a log file/folder if specified 
             in the StartProcess method.  The general idea is:
             
             PerformanceAuditor.StartProcess("Bottleneck Testing");		//Initialize the PerformanceAuditor to begin tracking
             ...
             using (IDisposable activity = PerformanceAuditor.AuditActivity("My Activity Type", "Generally"))		//Wrap the code you want to audit in using statements for the activity
             {
             ...
            		using (IDisposable activity = PerformanceAuditor.AuditActivity("My Activity Type", "Specifically"))		//Audited activities can be nested as many times as needed to give you a breakdown of a process
            		{
            		...
            		}
            	...
             }
            ...
            PerformanceAuditor.EndProcess();			//End the initial process which will cause all of the results to be output to the log
             </summary>
        </member>
        <member name="M:VC3.Diagnostics.PerformanceAuditor.StartProcess(System.String)">
            <summary>
            Calling this method begins the process of performance auditing.  The description is for informational purposes only in the log.  
            The debug window will be used to output log messages.
            </summary>
            <param name="description">String describing the performance auditing process.  Only used in logging.</param>
        </member>
        <member name="M:VC3.Diagnostics.PerformanceAuditor.StartProcess(System.String,System.String)">
            <summary>
            Calling this method begins the process of performance auditing.  The description is for informational purposes only in the log.  A log file will be created at
            <paramref name="logFilePath"/> if it doesn't exist.  If there is a file already at <paramref name="logFilePath"/> then the old file will be deleted.
            </summary>
            <param name="description">String describing the performance auditing process.  Only used in logging.</param>
            <param name="logFilePath">Path to log file.  Should be a text file.</param>
        </member>
        <member name="M:VC3.Diagnostics.PerformanceAuditor.StartProcess(System.String,System.IO.DirectoryInfo)">
            <summary>
            Begins the process of performance auditing.  The description is for informational purposes only in the log.  The <paramref name="logFileDirectory" />
            will be used to contain the log files which are timestamped.  
            </summary>
            <param name="description">String describing the performance auditing process.  Only used in logging.</param>
            <param name="logFileDirectory">The folder in which the timestamped logs should be created.  If the directory does not exist, it will be created.</param>
        </member>
        <member name="M:VC3.Diagnostics.PerformanceAuditor.EndProcess">
            <summary>
            Ends the process of performance auditing.  The metrics will then be calculated and output to the log 
            </summary>
        </member>
        <member name="M:VC3.Diagnostics.PerformanceAuditor.GetDescriptiveMetrics(System.String)">
            <summary>
            Gets the metrics for a specific type
            </summary>
            <param name="type">The type to retrieve metrics for.  This would be the user-defined type.</param>
            <returns>A list of metrics for the specified type or an empty list if there are none.</returns>
        </member>
        <member name="M:VC3.Diagnostics.PerformanceAuditor.ExtractMetrics(VC3.Diagnostics.PerformanceAuditor.Activity,VC3.Diagnostics.PerformanceAuditor.Metric)">
            <summary>
            Recursive method that extracts metrics for the activity passed in and all child metrics.  The metrics calculated are
            added to the parent metric.
            </summary>
            <param name="activity">The root activity from which to start the calculation of metrics.</param>
            <param name="parent">The metrics in which to add the calculated metrics onto.  This parameter is used in the recursive calls.  If calling this method directly, an empty <see cref="T:VC3.Diagnostics.PerformanceAuditor.Metric"/> should usually be passed in.</param>
        </member>
        <member name="M:VC3.Diagnostics.PerformanceAuditor.GetHighestDurationMetric">
            <summary>
            Retrieve the metric that lasted the longest
            </summary>
            <returns>The longest metric</returns>
        </member>
        <member name="M:VC3.Diagnostics.PerformanceAuditor.GetHighestActivityMetric">
            <summary>
            Retrieve the metric with the most iterations
            </summary>
            <returns>The most active metric</returns>
        </member>
        <member name="M:VC3.Diagnostics.PerformanceAuditor.GetHighestCostMetric">
            <summary>
            Retrieve the metric with the highest cost per iteration
            </summary>
            <returns>The most expensive metric</returns>
        </member>
        <member name="M:VC3.Diagnostics.PerformanceAuditor.GetTypeSummary(System.String)">
            <summary>
            Returns a <see cref="T:VC3.Diagnostics.PerformanceAuditor.Counters"/> containing the summarized information for a particular type
            </summary>
            <param name="type">The type to retrieve summarized information for</param>
            <returns></returns>
        </member>
        <member name="M:VC3.Diagnostics.PerformanceAuditor.AuditActivity(System.String,System.String)">
            <summary>
            Creates a new <see cref="T:System.IDisposable"/> that handles the tracking of time and counts of certain activity.  The type and description passed in help to identify
            the process that was monitored from the log so make them descriptive.  Metrics in the log will be summarized by type and then will be broken out by type and description.
            </summary>
            <param name="type">The type of the activity that is being tracked</param>
            <param name="description">The specifics to this instance of the <paramref name="type"/> activity</param>
            <returns></returns>
        </member>
        <member name="M:VC3.Diagnostics.PerformanceAuditor.Output(System.String)">
            <summary>
            Outputs a message without a line break to the log using the appropriate medium
            </summary>
            <param name="message">The message to output</param>
        </member>
        <member name="M:VC3.Diagnostics.PerformanceAuditor.OutputLine(System.String)">
            <summary>
            Outputs a single line message to the log using the appropriate medium
            </summary>
            <param name="message">The message to output</param>
        </member>
        <member name="M:VC3.Diagnostics.PerformanceAuditor.OutputDescriptiveMetrics">
            <summary>
            Outputs each of the metrics by task and description to the log
            </summary>
        </member>
        <member name="M:VC3.Diagnostics.PerformanceAuditor.OutputTypedMetrics">
            <summary>
            Outputs each type's summarized metrics
            </summary>
        </member>
        <member name="M:VC3.Diagnostics.PerformanceAuditor.OutputSummarizedMetrics">
            <summary>
            Output summarized metrics such as overall duration
            </summary>
        </member>
        <member name="M:VC3.Diagnostics.PerformanceAuditor.OutputTitle(System.String)">
            <summary>
            Outputs a title divider into the log
            </summary>
            <param name="title"></param>
        </member>
        <member name="T:VC3.Diagnostics.WebTraceListener">
            <summary>
            Summary description for WebTraceListener.
            </summary>
        </member>
        <member name="T:VC3.Security.IQualifiedName">
            <summary>
            Defines the basic contract that all qualified name objects used by the authentication providers must implement.
            </summary>
            <remarks>
            The following classes implement <b>IQualifiedName</b>:
            <list type="table">
            <listheader><term>Class</term><description>Descriptions</description></listheader>
            <item><term>GenericQualifiedName</term><description>The qualified name object used by the SQLAuthProvider and XMLAuthProvider classes.</description></item>
            </list>
            </remarks>
        </member>
        <member name="P:VC3.Security.IQualifiedName.QualifiedName">
            <summary>
            Gets a string representation of the qualified name,
            or sets the qualified name to a specific string.
            </summary>
            <value>A <see cref="T:System.String"/> containing the fully-qualified
            name of the user.</value>
        </member>
        <member name="P:VC3.Security.IQualifiedName.Username">
            <summary>
            Gets or sets the username qualifier.
            </summary>
            <value>
            A <see cref="T:System.String"/> containing the friendly username for the user.
            </value>
        </member>
        <member name="P:VC3.Security.IQualifiedName.Item(System.String)">
            <summary>
            Gets or sets the value associated with the given qualifier.
            </summary>
            <value>A <see cref="T:System.String"/> containing the value of the qualifier.</value>
        </member>
        <member name="P:VC3.Security.IQualifiedName.IsValid">
            <summary>
            Indicates whether the qualified name is valid
            for the current provider.
            </summary>
            <value>A <see cref="T:System.Boolean"/> value.</value>
        </member>
        <member name="P:VC3.Security.IQualifiedName.Qualifiers">
            <summary>
            Gets all of the key-value pairs valid for the qualified name class.
            </summary>
            <value>
            An <see cref="T:System.Collections.ICollection"/> containing all of the key-value pairs.
            </value>
        </member>
        <member name="T:VC3.Security.InvalidQualifiedNameException">
            <summary>
            An exception that indicates that the qualified name is invalid.
            </summary>
        </member>
        <member name="T:VC3.Security.Authentication.AuthenticationManager">
            <summary>
            Responsible for handling user authentication.
            </summary>
            <remarks>
            This class couples authentication, ticket and identity creation so that
            user classes that serve as principles can use an AuthenticatedIdentity
            as their identity.  This ensures that identities are actually
            authenticated.  In contrast, if a user class was to accept
            an IIdentity object, the identity could come from an untrusted source.
            This class cannot be inherited.
            </remarks>
        </member>
        <member name="M:VC3.Security.Authentication.AuthenticationManager.Authenticate(VC3.Security.Authentication.AuthenticationContext,System.String,System.String)">
            <summary>
            Authenticates a user and returns the corresponding principal object.
            </summary>
            <returns>Authenticated pricipal object</returns>
        </member>
        <member name="M:VC3.Security.Authentication.AuthenticationManager.Authenticate(System.String)">
            <summary>
            Authenticates a user based on a <see cref="P:VC3.Security.Authentication.AuthenticatedIdentity.Ticket"/>.
            </summary>
            <param name="ticket">Ticket taken previously from <see cref="P:VC3.Security.Authentication.AuthenticatedIdentity.Ticket"/></param>
            <returns>Authenticated pricipal object</returns>
        </member>
        <member name="M:VC3.Security.Authentication.AuthenticationManager.CreatePrincipal(System.Type,VC3.Security.Authentication.AuthenticatedIdentity)">
            <summary>
            Creates a new principal object of the specified type
            </summary>
        </member>
        <member name="P:VC3.Security.Authentication.AuthenticationManager.Contexts">
            <summary>
            Gets a list of all contexts available to this application
            </summary>
        </member>
        <member name="T:VC3.Security.Authentication.AuthenticationManager.StaticContextProvider">
            <summary>
            Interface for exposing a list authentication contexts 
            supported by an application.
            </summary>
        </member>
        <member name="T:VC3.Security.Authentication.IAuthenticationContextProvider">
            <summary>
            Interface for exposing a list authentication contexts 
            supported by an application.
            </summary>
        </member>
        <member name="M:VC3.Security.Authentication.IAuthenticationContextProvider.GetContexts">
            <summary>
            Gets a list of all contexts available from this provider to this application
            </summary>
        </member>
        <member name="M:VC3.Security.Authentication.AuthenticationManager.StaticContextProvider.GetContexts">
            <summary>
            Gets a list of all contexts available from this provider to this application
            </summary>
        </member>
        <member name="T:VC3.Security.Authentication.AuthenticationManager.CompositeContextProvider">
            <summary>
            Interface for exposing a list authentication contexts 
            supported by an application.
            </summary>
        </member>
        <member name="M:VC3.Security.Authentication.AuthenticationManager.CompositeContextProvider.GetContexts">
            <summary>
            Gets a list of all contexts available from this provider to this application
            </summary>
        </member>
        <member name="T:VC3.Security.Authentication.AuthenticationManager.Settings">
            <summary>
            Private class that holds settings for AuthenticationManager
            </summary>
        </member>
        <member name="M:VC3.Security.Authentication.AuthenticationManager.Settings.System#Configuration#IConfigurationSectionHandler#Create(System.Object,System.Object,System.Xml.XmlNode)">
            <summary>
            Reads the "authentication" configuration section.
            </summary>
            <returns>Settings object</returns>
        </member>
        <member name="P:VC3.Security.Authentication.AuthenticationManager.Settings.Current">
            <summary>
            Returns the current settings for the AuthenticationManager class.
            </summary>
        </member>
        <member name="T:VC3.Security.Authentication.AuthenticatedIdentity">
            <summary>
            Contains an identity that has been authenticated by
            the <see cref="T:VC3.Security.Authentication.AuthenticationManager"/>.
            </summary>
        </member>
        <member name="M:VC3.Security.Authentication.AuthenticatedIdentity.#ctor">
            <summary>
            Use <see cref="M:VC3.Security.Authentication.AuthenticatedIdentity.FromTicket(System.String)"/> or <see cref="M:VC3.Security.Authentication.AuthenticatedIdentity.FromUsername(System.String,System.Collections.IDictionary)"/>
            to create instances.
            </summary>
        </member>
        <member name="M:VC3.Security.Authentication.AuthenticatedIdentity.FromTicket(System.String)">
            <summary>
            Creates an authenticated identity based on a ticket.
            Throws an exception if ticket has expired.
            </summary>
            <param name="ticket">Ticket taken previously from the <see cref="P:VC3.Security.Authentication.AuthenticatedIdentity.Ticket"/> property</param>
        </member>
        <member name="M:VC3.Security.Authentication.AuthenticatedIdentity.FromUsername(System.String,System.Collections.IDictionary)">
            <summary>
            Creates an authenticated identity
            </summary>
            <param name="username"></param>
            <param name="profile"></param>
        </member>
        <member name="P:VC3.Security.Authentication.AuthenticatedIdentity.AuthenticatorProfile">
            <summary>
            Gets profile information returned by the
            IAuthenticator that authenticated this identity.
            Then the profile will be null If the identity was 
            resurrected from a <see cref="P:VC3.Security.Authentication.AuthenticatedIdentity.Ticket"/> or if the
            authenticator didn't return a profile.
            </summary>
        </member>
        <member name="P:VC3.Security.Authentication.AuthenticatedIdentity.Ticket">
            <summary>
            Gets a ticket that can be used to recreate the identity later.
            </summary>
        </member>
        <member name="P:VC3.Security.Authentication.AuthenticatedIdentity.IsAuthenticated">
            <summary>
            Indicates whether or not the user has been authenticated.
            Always returns true.
            </summary>
        </member>
        <member name="P:VC3.Security.Authentication.AuthenticatedIdentity.Name">
            <summary>
            Username
            </summary>
        </member>
        <member name="P:VC3.Security.Authentication.AuthenticatedIdentity.AuthenticationType">
            <summary>
            Authentication type.  "AuthenticatedIdentity"
            </summary>
        </member>
        <member name="T:VC3.Security.Authentication.IAuthenticator">
            <summary>
            Interface used by <see cref="T:VC3.Security.Authentication.AuthenticationManager"/> for 
            authenticating users.
            </summary>
        </member>
        <member name="M:VC3.Security.Authentication.IAuthenticator.Authenticate(VC3.Security.Authentication.AuthenticationContext,System.String,System.String)">
            <summary>
            Verifies a username and password. Must throw an exception if
            user cannot be authenticated.  Optionally can return
            a profile (as IDictionary) that the Principal/User object
            can use if it wants to.
            </summary>
            <exception cref="T:VC3.Security.Authentication.AuthenticationException">Thrown if user cannot be authenticated</exception>
        </member>
        <member name="T:VC3.Security.Authentication.AuthenticationContextAttribute">
            <summary>
            Indicates the type of <see cref="T:VC3.Security.Authentication.AuthenticationContext"/> required
            by an <see cref="T:VC3.Security.Authentication.IAuthenticator"/>
            </summary>
        </member>
        <member name="M:VC3.Security.Authentication.AuthenticationContextAttribute.CreateContext(System.Type)">
            <summary>
            Creates an instance of the authentication context declared via the attribute.
            </summary>
            <param name="authenticatorType">The type of authenticator to create the context for.</param>
            <returns>New context instance</returns>
        </member>
        <member name="T:VC3.Security.Authentication.AuthenticationContext">
            <summary>
            Authentication context that can be passed to <see cref="M:VC3.Security.Authentication.AuthenticationManager.Authenticate(VC3.Security.Authentication.AuthenticationContext,System.String,System.String)"/>
            </summary>
        </member>
        <member name="M:VC3.Security.Authentication.AuthenticationContext.ReadConfig(System.Xml.XmlNode)">
            <summary>
            Initializes the context based on a &lt;context&gt; element
            in the application config file.
            </summary>
            <param name="config">&lt;context&gt; element from config file</param>
        </member>
        <member name="P:VC3.Security.Authentication.AuthenticationContext.Type">
            <summary>
            The IAuthenticator type that can be used to authenticate
            users in this context
            </summary>
        </member>
        <member name="P:VC3.Security.Authentication.AuthenticationContext.Id">
            <summary>
            Unique id of the context.  Defaults to <see cref="P:VC3.Security.Authentication.AuthenticationContext.Name"/>.
            </summary>
        </member>
        <member name="P:VC3.Security.Authentication.AuthenticationContext.Name">
            <summary>
            Gets the display name that identifies this context
            </summary>
        </member>
        <member name="P:VC3.Security.Authentication.AuthenticationContext.AdditionalData">
            <summary>
            Gets additional, user-defined, data for the context
            </summary>
        </member>
        <member name="T:VC3.Security.Authentication.AuthenticationContext.Converter">
            <summary>
            Converts from an id to a business object and
            reverse
            </summary>
        </member>
        <member name="T:VC3.Security.Authentication.AuthenticationContextList">
            <summary>
            List of <see cref="T:VC3.Security.Authentication.AuthenticationContext"/> objects.
            </summary>
        </member>
        <member name="T:VC3.Security.Authentication.LdapContext">
            <summary>
            Represents an authentication context within an LDAP directory.
            Works in conjunction with an <see cref="T:VC3.Security.Authentication.LdapAuthenticator"/>
            </summary>
            <remarks>
            The context can operate in either an template mode or a search mode. In either case, the goal
            of the context is to convert a username into an LDAP distinguished name (DN). For example, a user
            may login with username "hooperma". However, to authenticate against the LDAP directory
            it must be converted to the DN "CN=hooperma,OU=VC3\, Inc - Corporate,DC=vc3,DC=com".
            
            <para>
            In template mode, a contextTemplate must be specified.  This template is used to determine
            the distinguished names of any user authenticating in this context is determined by replacing the "{0}"
            in the string with a username entered by a user. An example template would be:
            LDAP://mustang/CN={0},OU=VC3\, Inc - Corporate,DC=vc3,DC=com
            </para>
            
            <para>
            In search mode, the directory is search to determine DNs. The searchRoot attribute determines which 
            portion of the LDAP directory is searched. The searchFilter attribute is used to match a particular 
            user.  The username entered by the user during login will replace the "{0}" in the searchFilter. 
            The filter syntax is defined in RFC 2254 (http://www.faqs.org/rfcs/rfc2254.html).
            The searchScope attribute can be used to control how much of the directory can be specifed. Options are
            "base", "sub", and "one" (the default). searchUser and searchPassword can be specified if
            the search must be performed non-anonymously. In this case, the authenticator will bind using 
            these credentials first and then search the directory.
            </para>
            
            <para>
            Search mode is useful when authenticating against Active Directory. In AD users tend to have
            common names (CN) in the form "firstname lastname" unlike most other LDAP directories which use
            a username. In these cases, the directory can be searched, matching the sAMAccountName object property
            with the username entered. In other words the searchFilter would be: "(sAMAccountName={0})".
            </para>
            </remarks>
        </member>
        <member name="M:VC3.Security.Authentication.LdapContext.#ctor">
            <summary>
            Creates a new LdapAuthenticatorContext
            </summary>
        </member>
        <member name="M:VC3.Security.Authentication.LdapContext.GetDistinguishedName(System.String)">
            <summary>
            Gets a DN based on the specified user name
            </summary>
            <param name="username">Username to determine the DN for</param>
            <returns>Context path, with username substitued where appropriate.</returns>
        </member>
        <member name="M:VC3.Security.Authentication.LdapContext.ReadConfig(System.Xml.XmlNode)">
            <summary>
            Initializes the context from a config section
            </summary>
            <param name="config"></param>
        </member>
        <member name="P:VC3.Security.Authentication.LdapContext.SearchRoot">
            <summary>
            Gets or sets SearchRoot
            </summary>
        </member>
        <member name="P:VC3.Security.Authentication.LdapContext.SearchFilter">
            <summary>
            Gets or sets SearchFilter
            </summary>
        </member>
        <member name="P:VC3.Security.Authentication.LdapContext.SearchScope">
            <summary>
            Gets or sets SearchScope
            </summary>
        </member>
        <member name="P:VC3.Security.Authentication.LdapContext.SearchUsername">
            <summary>
            Gets or sets SearchUsername
            </summary>
        </member>
        <member name="P:VC3.Security.Authentication.LdapContext.SearchPassword">
            <summary>
            Sets the SearchPassword
            </summary>
        </member>
        <member name="P:VC3.Security.Authentication.LdapContext.ContextTemplate">
            <summary>
            Gets or sets ContextTemplate
            </summary>
        </member>
        <member name="T:VC3.Security.Authentication.LdapAuthenticator">
            <summary>
            Authenticates users against an LDAP directory
            </summary>
        </member>
        <member name="M:VC3.Security.Authentication.LdapAuthenticator.Authenticate(VC3.Security.Authentication.AuthenticationContext,System.String,System.String)">
            <summary>
            Verifies a user's credentials against an LDAP directory.
            Throws an exception if they are invalid.
            </summary>
            <remarks>
            <para>
            The returned profile will have the following values:
            username, firstname*, lastname*, emailaddress*, and all other attributes
            found in the context's config element (* indicates optional attribute). 
            All attributes of the user in the LDAP directory will be available in the profile
            as ldap.&lt;property&gt;.  For example, ldap.mail can be used to get the "mail" property.
            </para>
            </remarks>
            <param name="context">Used to qualify the username</param>
            <param name="username">Username to validate. In the form: "userid2".</param>
            <param name="password">Password to validate. Blank passwords are not allowed.</param>
        </member>
        <member name="T:VC3.Security.Authentication.LdapConfigurationException">
            <summary>
            Thrown when an Ldap directory is not configured appropriately for
            use by the <see cref="T:VC3.Security.Authentication.LdapAuthenticator"/>
            </summary>
        </member>
        <member name="T:VC3.ComponentModel.WeakValue">
            <summary>
            A special <see cref="T:System.WeakReference"/> that delegates <see cref="M:VC3.ComponentModel.WeakValue.Equals(System.Object)"/> and
            <see cref="M:VC3.ComponentModel.WeakValue.GetHashCode"/> to the underlying <see cref="P:System.WeakReference.Target"/>.
            </summary>
        </member>
        <member name="T:VC3.ComponentModel.WeakEventHandler">
            <summary>
            A special class that allows an <see cref="T:System.EventHandler"/> delegate
            to be created but where the target object can still be garbage collected
            if needed (due to the use of <see cref="T:System.WeakReference"/>).
            </summary>
        </member>
        <member name="M:VC3.ComponentModel.WeakEventHandler.GetDelegate">
            <summary>
            Gets the event handler if the target object has not yet been garbage collected.
            Returns null if it was GC'ed.
            </summary>
        </member>
        <member name="T:VC3.ComponentModel.CacheManager">
            <summary>
            Class to manage all caches within the application
            </summary>
        </member>
        <member name="M:VC3.ComponentModel.CacheManager.ClearCache">
            <summary>
            Clears all <see cref="T:VC3.ComponentModel.CachedObjectBase"/> objects
            </summary>
        </member>
        <member name="E:VC3.ComponentModel.CacheManager.CacheCleared">
            <summary>
            Raised to indicate that all caches should been cleared.
            </summary>
        </member>
        <member name="T:VC3.ComponentModel.CachedObjectBase">
            <summary>
            Base class for caching a single object for the duration
            of the application.  Object will be loaded on demand. It will
            be cleared when CacheManager.ClearCache is called.
            All methods on this class are thread safe and referencing
            the object property will always return an object (unless
            LoadCache returns null).
            </summary>
        </member>
        <member name="F:VC3.ComponentModel.CachedObjectBase.UnlimitedLifetime">
            <summary>
            Used to indicate that a cached object that will never expire.
            </summary>
        </member>
        <member name="M:VC3.ComponentModel.CachedObjectBase.#ctor">
            <summary>
            Creates a new cached object
            </summary>
        </member>
        <member name="M:VC3.ComponentModel.CachedObjectBase.#ctor(System.TimeSpan)">
            <summary>
            Creates a new cached object that will expire after the specified amount of time.
            </summary>
            <param name="lifetime">Length of time an object should remain in the cache before being reloaded.</param>
        </member>
        <member name="M:VC3.ComponentModel.CachedObjectBase.LoadCache">
            <summary>
            Called to load the object to cache.
            Override in sub classes.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VC3.ComponentModel.CachedObjectBase.Clear">
            <summary>
            Clears the cache.
            </summary>
        </member>
        <member name="P:VC3.ComponentModel.CachedObjectBase.Object">
            <summary>
            Gets the cached object, forcing it to load if needed.
            </summary>
        </member>
        <member name="E:VC3.ComponentModel.CachedObjectBase.Loaded">
            <summary>
            Raised after the cached object is loaded.
            Invoked by the thread that loaded the object.
            All access to the <see cref="P:VC3.ComponentModel.CachedObjectBase.Object"/> will be blocked
            until after the event has been handled.
            </summary>
        </member>
        <member name="T:VC3.ComponentModel.CachedObjectBase.ObjectInfo">
            <summary>
            Store object and time data in a single object
            so they are read atomically.
            </summary>
        </member>
        <member name="P:VC3.ComponentModel.CachedObjectBase.ObjectInfo.IsExpired">
            <summary>
            True if the item has expired and needs to be reloaded
            </summary>
        </member>
        <member name="T:VC3.ComponentModel.CachedObject">
            <summary>
            Delegate driven object instance cache
            </summary>
        </member>
        <member name="T:VC3.ComponentModel.CachedObjectLoader">
            <summary>
            Used by the <see cref="T:VC3.ComponentModel.CachedObject"/> to obtain the object that will
            be cached
            </summary>
        </member>
        <member name="T:VC3.ComponentModel.CachedObjectEventHandler">
            <summary>
            Used by the <see cref="T:VC3.ComponentModel.CachedObjectBase"/> class to expose events.
            </summary>
        </member>
        <member name="T:VC3.ComponentModel.CachedObjectEventArgs">
            <summary>
            Information about events raised by the <see cref="T:VC3.ComponentModel.CachedObjectBase"/> class.
            </summary>
        </member>
        <member name="P:VC3.ComponentModel.CachedObjectEventArgs.Cache">
            <summary>
            The object that was or is cached.  This reference will not change, even
            if related <see cref="T:VC3.ComponentModel.CachedObjectBase"/> object is cleared.
            </summary>
        </member>
        <member name="T:VC3.ComponentModel.CachedDataLoader">
            <summary>
            Used by <see cref="T:VC3.ComponentModel.CachedComponentList"/> to fetch data
            which will be used to populate the list.
            </summary>
        </member>
        <member name="T:VC3.ComponentModel.CachedComponentList">
            <summary>
            Utility class for caching a ComponentList
            </summary>
        </member>
        <member name="M:VC3.ComponentModel.CachedComponentList.#ctor(System.Type,VC3.ComponentModel.CachedDataLoader)">
            <summary>
            Creates a new CachedComponentList to cache the specified type of list.
            List class must have a constructor that takes an IDataReader.
            </summary>
            <param name="listType">Type of list to load</param>
            <param name="listLoader">Delegate used to retrieve data when cache has been cleared. Must return an IDataReader</param>
        </member>
        <member name="M:VC3.ComponentModel.CachedComponentList.#ctor(System.Type,VC3.ComponentModel.CachedDataLoader,System.TimeSpan)">
            <summary>
            Creates a new CachedComponentList to cache the specified type of list.
            List class must have a constructor that takes an IDataReader.
            </summary>
            <param name="listType">Type of list to load</param>
            <param name="listLoader">Delegate used to retrieve data when cache has been cleared. Must return an IDataReader</param>
        </member>
        <member name="M:VC3.ComponentModel.CachedComponentList.LoadCache">
            <summary>
            Loads the list
            </summary>
            <returns></returns>
        </member>
        <member name="T:VC3.ComponentModel.ICache">
            <summary>
            Summary description for ICache.
            </summary>
        </member>
        <member name="P:VC3.ComponentModel.ICache.Item(System.Object)">
            <summary>
            Gets or sets a cached item
            </summary>
        </member>
        <member name="T:VC3.ComponentModel.WebCache">
            <summary>
            A cache scoped to the current HTTP request.
            </summary>
        </member>
        <member name="P:VC3.ComponentModel.WebCache.VC3#ComponentModel#ICache#Item(System.Object)">
            <summary>
            Gets or sets a cached item
            </summary>
        </member>
        <member name="P:VC3.ComponentModel.WebCache.IsSupported">
            <summary>
            Returns true if running in the context
            of a web application.
            </summary>
        </member>
        <member name="T:VC3.ComponentModel.StaticCache">
            <summary>
            A cache scoped to the current app domain.
            </summary>
        </member>
        <member name="P:VC3.ComponentModel.StaticCache.VC3#ComponentModel#ICache#Item(System.Object)">
            <summary>
            Gets or sets a cached item
            </summary>
        </member>
        <member name="T:VC3.ComponentModel.CacheDependencyAttribute">
            <summary>
            Instructs the <see cref="T:VC3.ComponentModel.BusinessObject"/> instance to clear the cache on any persist back to the database.
            </summary>
            <remarks>
            Watches for insert/update/delete of the dependency object and then clears the cache after the db 
            transaction is committed.
            </remarks>
        </member>
        <member name="T:VC3.ComponentModel.BusinessObject.ISubscriberAttribute">
            <summary>
            Defines an interface that may be implemented by attributes placed on
            <see cref="T:VC3.ComponentModel.BusinessObject"/> subclasses to enable the attributes to
            perform tasks or set up event handlers.
            </summary>
            <remarks>
            Subscription will occur after construction and registration, but before
            the BeforeInit event is raised.  Objects that are never initialized will
            not cause subscription to occur.
            </remarks>
        </member>
        <member name="T:VC3.ComponentModel.BusinessObject">
            <summary>
            Abstract base class for objects representing the business layer
            in a three-tier architectural design.  
            </summary>
            <remarks>
            This common base class addresses common development issues by:	
            <list type="bullet">
            <item>Facilitating a mechanism for tracking objects
            that have not be loaded and then performing on-demand bulk load
            procedures to load data efficiently
            </item>
            <item>
            Providing a datasource agnostic approach that may be used for
            relational, xml, or other data that consists of objects and
            object relations through one to one, one to many, and many to
            many relationships.
            </item>
            <item>
            Incorporating an attribute-based approach to property-level
            validation to support common types of business rules. 
            See <see cref="T:VC3.ComponentModel.PreconditionAttribute"/> for more information.
            </item>
            <item>
            Providing a consistent mechanism for committing complete
            object graphs in the appropriate sequence, including the ability
            to easily hook in transaction support.
            </item>
            </list>
            
            <para>
            The VC3 Modeler automates the creation of BusinessObject subclasses.
            </para>
            </remarks>
        </member>
        <member name="T:VC3.ComponentModel.Component">
            <summary>
            Provides an implementation of <see cref="T:System.ComponentModel.ICustomTypeDescriptor"/>.
            </summary>
        </member>
        <member name="M:VC3.ComponentModel.Component.System#ComponentModel#ICustomTypeDescriptor#GetConverter">
            <summary>
            Delegates to the default implementation defined by
            <see cref="T:System.ComponentModel.TypeDescriptor"/>.
            </summary>
            <returns>The <see cref="T:System.ComponentModel.TypeConverter"/> for the current instance</returns>
        </member>
        <member name="T:VC3.ComponentModel.IEditable">
            <summary>
            Combines the concepts of commitable and deletable and adds
            a flag indicating whether the instance is read-only to expose
            standard means of performing update operations on an instance.
            </summary>
        </member>
        <member name="T:VC3.ComponentModel.IDeletable">
            <summary>
            Interface for components supporting deletion through
            a standard Delete() method.
            </summary>
        </member>
        <member name="P:VC3.ComponentModel.IEditable.IsNew">
            <summary>
            Indicates whether the instance represents a new or existing item.
            </summary>
        </member>
        <member name="P:VC3.ComponentModel.IEditable.IsReadOnly">
            <summary>
            Indicates whether an instance of the class may be edited or is read-only.
            </summary>
        </member>
        <member name="P:VC3.ComponentModel.IEditable.CanEdit">
            <summary>
            Indicates whether an instance of the class may be edited or is read-only.
            </summary>
        </member>
        <member name="T:VC3.Security.Authorization.ISecurityContext">
            <summary>
            Summary description for ISecurityContext.
            </summary>
        </member>
        <member name="F:VC3.ComponentModel.BusinessObject.DirtyMask">
            <summary>
            Constants for bit masks used in conjunction with the
            <see cref="F:VC3.ComponentModel.BusinessObject.state"/> field in order to track the state
            of the object using only a single integer value.
            </summary>
        </member>
        <member name="F:VC3.ComponentModel.BusinessObject.supportsCommit">
            <summary>
            Static cache tracking which business object subclasses support commit operations.
            </summary>
        </member>
        <member name="F:VC3.ComponentModel.BusinessObject.cache">
            <summary>
            Static thread-scoped cache exposed by the object for use by 
            sub-classes to cache data scoped to the life of a session.
            </summary>
            <seealso cref="T:VC3.ComponentModel.ICache"/>
        </member>
        <member name="F:VC3.ComponentModel.BusinessObject.currentTraversal">
            <summary>
            Tracks the unique thread-scoped traversal instance used to
            ensure that instances are not reprocessed during the recursive
            operation on the object graph.
            </summary>
        </member>
        <member name="F:VC3.ComponentModel.BusinessObject.Uninitialized">
            <summary>
            This value can be used by sub classes that are manually loading
            objects on demand to denote an "uninitialized" state.
            </summary>
            <remarks>
            Situations may arise where subclasses need to keep track 
            of three states: "unintialized", "initialized to null", and "initialized to an object".
            Typically null is used to denote whether or not a data member is inialized however
            if null is a valid value the null strategy breaks down.
            </remarks>
        </member>
        <member name="F:VC3.ComponentModel.BusinessObject.state">
            <summary>
            The current state of the object. Stored as a single value 
            for storage efficency purposes.
            </summary>
        </member>
        <member name="F:VC3.ComponentModel.BusinessObject.traversal">
            <summary>
            Tracks the current traveral the object is participanting in due
            to a recursive operation on the object graph.
            
            The instance is considered to be committing when the
            <see cref="F:VC3.ComponentModel.BusinessObject.traversal"/> instance member is the same as the
            <see cref="F:VC3.ComponentModel.BusinessObject.currentTraversal"/> thread static member.
            </summary>
        </member>
        <member name="F:VC3.ComponentModel.BusinessObject.id">
            <summary>
            Cache for the <see cref="T:VC3.ComponentModel.BusinessObject.Identifier"/> subclass instance
            that stores that values that represents the unique key
            or identifier for the current instance.
            </summary>
            <remarks>
            The id will be null for new instances, and will be
            initialized after a call to <see cref="M:VC3.ComponentModel.BusinessObject.OnInsert"/>.
            The id will be initialized for existing instances
            through the <see cref="M:VC3.ComponentModel.BusinessObject.Register"/> method.
            
            The id is not serialized b/c it can be recreated
            </remarks>
        </member>
        <member name="F:VC3.ComponentModel.BusinessObject.events">
            <summary>
            Stores event information for business objects that have event subscribers.
            </summary>
        </member>
        <member name="F:VC3.ComponentModel.BusinessObject.context">
            <summary>
            Tracks the scope context in which this object resides.
            </summary>
        </member>
        <member name="M:VC3.ComponentModel.BusinessObject.#ctor">
            <summary>
            Creates a new uninitialized business object instance.
            </summary>
        </member>
        <member name="M:VC3.ComponentModel.BusinessObject.AddDependent(VC3.ComponentModel.BusinessObject)">
            <summary>
            Allows the manual addition of a dependent Business Object for the current one.
            </summary>
            <param name="dependent"></param>
        </member>
        <member name="M:VC3.ComponentModel.BusinessObject.AddDependency(VC3.ComponentModel.BusinessObject)">
            <summary>
            Allows the manual addition of a the current Business Object as a dependent of another.
            </summary>
            <param name="dependency"></param>
        </member>
        <member name="M:VC3.ComponentModel.BusinessObject.InitializeAppDomain">
            <summary>
            Call this method once per app domain to initialize the business object
            framework.  This method can safely be called multiple times but only
            the first call will perform the initialization.
            </summary>
        </member>
        <member name="M:VC3.ComponentModel.BusinessObject.OnPropertyGet">
            <summary>
            Initializes the business object if it is not already.
            </summary>
        </member>
        <member name="M:VC3.ComponentModel.BusinessObject.OnPropertySet(System.String,System.Object)">
            <summary>
            Verifies that declared preconditions of the property
            are not violated. Throws an exception if they are.
            </summary>
            <param name="name">The name of the property</param>
            <param name="newValue">A value to test</param>
            <returns>A modified value if value is changed in order to meet precondition</returns>
            <exception cref="T:VC3.ComponentModel.PreconditionsViolatedException">
            When preconditions are not met.
            </exception>
        </member>
        <member name="M:VC3.ComponentModel.BusinessObject.OnPropertySet(System.String,System.Object,System.Boolean)">
            <summary>
            Verifies that declared preconditions of the property
            are not violated. Throws an exception if they are.
            </summary>
            <param name="name">The name of the property</param>
            <param name="newValue">A value to test</param>
            <param name="enforceRules">If true, <see cref="T:VC3.ComponentModel.PreconditionAttribute"/> rules will be applied to
            the new value</param>
            <returns>A modified value if value is changed in order to meet precondition</returns>
            <exception cref="T:VC3.ComponentModel.PreconditionsViolatedException">
            When preconditions are not met.
            </exception>
        </member>
        <member name="M:VC3.ComponentModel.BusinessObject.SupportsCommit(System.Type)">
            <summary>
            Determines whether the specified type overrides OnInsert or OnUpdate or OnDelete and can be committed.
            </summary>
            <param name="type">The type to evaluate</param>
            <returns></returns>
        </member>
        <member name="M:VC3.ComponentModel.BusinessObject.CommitChanges">
            <summary>
            Commits any changes made to the business object properties.
            
            The order objects are committed in is:
            
            <list type="number">
            <item>
            <term>Dependencies</term>
            </item>
            
            <item>
            <term>Self</term>
            </item>
            
            <item>
            <term>Dependents</term>
            </item>
            </list>
            
            </summary>
            <seealso cref="M:VC3.ComponentModel.BusinessObject.CommitDependencies"/>
            <seealso cref="M:VC3.ComponentModel.BusinessObject.CommitDependents"/>
        </member>
        <member name="M:VC3.ComponentModel.BusinessObject.OnBeforeDelete">
            <summary>
            Allows sub-classes to perform custom cleanup before deleting an instance.
            </summary>
            <remarks>
            This method should be overridden in sub-classes to perform cleanup.
            </remarks>
        </member>
        <member name="M:VC3.ComponentModel.BusinessObject.Delete">
            <summary>
            Called to delete an existing business object.
            </summary>
        </member>
        <member name="M:VC3.ComponentModel.BusinessObject.Delete(System.Boolean)">
            <summary>
            Called to delete an existing business object.
            Sub classes can override this method, however
            it is recommended that <see cref="M:VC3.ComponentModel.BusinessObject.OnDelete"/> be overridden instead.
            </summary>
            <remarks>
            Sub classes can override this method, however
            it is recommended that <see cref="M:VC3.ComponentModel.BusinessObject.OnDelete"/> be overridden instead.
            If the method is overridden, base.Delete() should be called otherwise the 
            BeforeDelete and AfterDelete events will not be raised.
            </remarks>
        </member>
        <member name="M:VC3.ComponentModel.BusinessObject.OnDelete">
            <summary>
            Called by <see cref="M:VC3.ComponentModel.BusinessObject.Delete(System.Boolean)"/> to delete an existing business object.
            A transaction will be started automatically before OnDelete is invoked.
            </summary>
            <remarks>
            This method should be overridden in sub-classes to delete
            existing business objects.  It is appropriate for this method
            to throw an exception if the persistance fails due to business 
            rules.
            </remarks>
        </member>
        <member name="M:VC3.ComponentModel.BusinessObject.Register">
            <summary>
            Registers an object for lazy initialization.
            </summary>
            <remarks>
            The <see cref="T:VC3.ComponentModel.BusinessObject.Identifier"/> for the instance is
            initialized by inferring values using the
            appropriate <see cref="T:VC3.ComponentModel.IScheme"/>.
            </remarks>
        </member>
        <member name="M:VC3.ComponentModel.BusinessObject.Register(VC3.ComponentModel.BusinessObject.Identifier)">
            <summary>
            Registers an object for lazy initialization.
            </summary>
            <param name="id">The <see cref="T:VC3.ComponentModel.BusinessObject.Identifier"/> for the current instance</param>
        </member>
        <member name="M:VC3.ComponentModel.BusinessObject.Register(VC3.ComponentModel.BusinessObject,VC3.ComponentModel.RegistrationBehavior)">
            <summary>
            Registers the <see cref="T:VC3.ComponentModel.BusinessObject"/> graph with the current
            <see cref="T:VC3.ComponentModel.IScheme"/> implementation by registering the specified
            root instance and recursively registering all <see cref="T:VC3.ComponentModel.BusinessObject"/>
            instances stored in all <see cref="T:VC3.ComponentModel.BusinessObject"/> and 
            <see cref="T:VC3.ComponentModel.BusinessObjectList"/> fields.
            </summary>
            <param name="root">The root instance of the graph to register</param>
            <param name="behavior">Indicates how duplicate objects in the pool should be handled</param>
        </member>
        <member name="M:VC3.ComponentModel.BusinessObject.RestoreContext(VC3.ComponentModel.BusinessObject)">
            <summary>
            Restores the context of the specified business object.
            </summary>
            <param name="root"></param>
        </member>
        <member name="M:VC3.ComponentModel.BusinessObject.RegisterRecursive(VC3.ComponentModel.RegistrationBehavior)">
            <summary>
            Recursively registers all
            </summary>
        </member>
        <member name="M:VC3.ComponentModel.BusinessObject.RegisterOwnership">
            <summary>
            Sets the owner of all <see cref="T:VC3.ComponentModel.BusinessObjectList"/> subclasses owned
            by the current <see cref="T:VC3.ComponentModel.BusinessObject"/> instance.
            </summary>
        </member>
        <member name="M:VC3.ComponentModel.BusinessObject.GetOwnedObjects">
            <summary>
            Gets all <see cref="T:VC3.ComponentModel.BusinessObjectList"/> instances associated 
            with this business object.
            </summary>
            <returns>Enumeration of <see cref="T:VC3.ComponentModel.BusinessObjectList"/> objects</returns>
        </member>
        <member name="M:VC3.ComponentModel.BusinessObject.Load(System.Data.IDataRecord)">
            <summary>
            Allows subclasses to create an initialized instance without using
            lazy initialization.
            </summary>
            <param name="data">The data to initialize the object from</param>
        </member>
        <member name="M:VC3.ComponentModel.BusinessObject.Init(System.Data.IDataRecord)">
            <summary>
            Initializes the object.
            </summary>
        </member>
        <member name="M:VC3.ComponentModel.BusinessObject.InitInternal(System.Data.IDataRecord)">
            <summary>
            Initializes the object.
            </summary>
        </member>
        <member name="M:VC3.ComponentModel.BusinessObject.OnInit(System.Data.IDataRecord)">
            <summary>
            Must be implemented by subclasses in order to initialize
            instance data using the specified <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="data">The data to use</param>
            <remarks>
            <see cref="M:VC3.ComponentModel.BusinessObject.OnInit(System.Data.IDataRecord)"/> is called by an <see cref="T:VC3.ComponentModel.ILoader"/>
            to inialized this object with its data.
            </remarks>
        </member>
        <member name="M:VC3.ComponentModel.BusinessObject.GetData(VC3.ComponentModel.BusinessObject.IdentifierList)">
            <summary>
            Base classes must override this method to retrieve business object data for the specified ids.
            </summary>
            <param name="ids">The identifiers of the business objects to retrieve.</param>
            <returns>An IDataReader with the requested data.</returns>
        </member>
        <member name="M:VC3.ComponentModel.BusinessObject.OnInsert">
            <summary>
            Persists an unsaved object.  Always invoked inside of a transaction.
            </summary>
            <remarks>
            This method should be overridden in sub-classes to persist new 
            data.  It is appropriate for this method to throw an exception 
            if the persistance fails due to business rules.
            </remarks>
            <seealso cref="M:VC3.ComponentModel.BusinessObject.CommitChanges"/>
            <seealso cref="M:VC3.ComponentModel.BusinessObject.OnUpdate"/>
        </member>
        <member name="M:VC3.ComponentModel.BusinessObject.CommitNew">
            <summary>
            Performs the insert process and updates the current instance to reflect 
            that is has been committed.
            </summary>
            <remarks>
            Sub classes can override <see cref="M:VC3.ComponentModel.BusinessObject.OnInsert"/> to customize insert behavior.
            </remarks>
        </member>
        <member name="M:VC3.ComponentModel.BusinessObject.OnUpdate">
            <summary>
            Re-persists a changed object.  Always invoked inside of a transaction.
            </summary>
            <remarks>
            This method should be overridden in sub-classes to persist 
            changes to existing data.  It is appropriate for this method
            to throw an exception if the persistance fails due to business 
            rules.
            </remarks>
            <seealso cref="M:VC3.ComponentModel.BusinessObject.CommitChanges"/>
            <seealso cref="M:VC3.ComponentModel.BusinessObject.OnInsert"/>
        </member>
        <member name="M:VC3.ComponentModel.BusinessObject.CommitExisting">
            <summary>
            Performs the insert process and updates the current instance to reflect 
            that is has been committed.
            </summary>
            <remarks>
            Sub classes can override <see cref="M:VC3.ComponentModel.BusinessObject.OnUpdate"/> to customize update behavior.
            </remarks>
        </member>
        <member name="M:VC3.ComponentModel.BusinessObject.OnBeforeCommit">
            <summary>
            Allows sub-classes to perform custom validation before commiting an instance.
            </summary>
            <remarks>
            This method should be overridden in sub-classes to perform validation
            that cannot be handled by property preconditions.
            </remarks>
            <seealso cref="M:VC3.ComponentModel.BusinessObject.CommitChanges"/>
        </member>
        <member name="M:VC3.ComponentModel.BusinessObject.DemandPermission(VC3.Security.Authorization.IRole)">
            <summary>
            Demands that the current user has permission to perform the specified role.
            </summary>
            <param name="role">The role to be performed.</param>
            <exception cref="T:System.Security.SecurityException">Thrown when the user has insufficient permissions.</exception>
        </member>
        <member name="M:VC3.ComponentModel.BusinessObject.VC3#Security#Authorization#ISecurityContext#GetPermission(VC3.Security.Authorization.IRole)">
            <summary>
            Gets the context permissions on the object for the specified task.
            </summary>
        </member>
        <member name="M:VC3.ComponentModel.BusinessObject.GetPermission(VC3.Security.Authorization.IRole)">
            <summary>
            Gets the context permissions on the object for the specified task.
            </summary>
        </member>
        <member name="M:VC3.ComponentModel.BusinessObject.OnGetPermission(VC3.Security.Authorization.IRole)">
            <summary>
            Gets the <see cref="T:VC3.Security.Authorization.ContextPermission"/> related to this class
            </summary>
            <param name="role"></param>
            <returns></returns>
        </member>
        <member name="M:VC3.ComponentModel.BusinessObject.GetId">
            <summary>
            Gets the <see cref="T:VC3.ComponentModel.BusinessObject.Identifier"/> for the current instance,
            or null if the instance represents a new object.
            </summary>
            <returns>The requested identifier</returns>
        </member>
        <member name="M:VC3.ComponentModel.BusinessObject.SetId(VC3.ComponentModel.BusinessObject.Identifier)">
            <summary>
            Gets the <see cref="T:VC3.ComponentModel.BusinessObject.Identifier"/> for the current instance,
            or null if the instance represents a new object.
            </summary>
            <returns>The requested identifier</returns>
        </member>
        <member name="M:VC3.ComponentModel.BusinessObject.GetInstance(System.Type,System.Object[])">
            <summary>
            Gets an instance of the specified type based on the identifer.
            </summary>
            <param name="type">Type of object to create</param>
            <param name="id">Identity of the object</param>
            <returns>
            If any value of the id is <see cref="M:VC3.ComponentModel.DataConverter.IsNull(System.Object)"/> then null.
            If id length == 0 then a new object.
            Otherwise the instance with the specified ID.
            </returns>
        </member>
        <member name="M:VC3.ComponentModel.BusinessObject.GetInstance(System.Type,System.String)">
            <summary>
            Gets an instance of the specified type based on the identifer.
            </summary>
            <param name="type">Type of object to create</param>
            <param name="id">Identity of the object</param>
            <returns>
            If id is <see cref="F:VC3.ComponentModel.DataConverter.StringNull"/> then null.
            If id is null then a new object.
            Otherwise the instance with the specified ID.
            </returns>
        </member>
        <member name="M:VC3.ComponentModel.BusinessObject.GetCurrentScope(VC3.ComponentModel.BusinessObject)">
            <summary>
            Gets the current scope of the specified business object 
            </summary>
        </member>
        <member name="M:VC3.ComponentModel.BusinessObject.ResetThreadScope">
            <summary>
            Disposes of all <see cref="T:VC3.ComponentModel.BusinessObject"/> within the current <see cref="T:VC3.ComponentModel.ThreadScope"/>.
            </summary>
        </member>
        <member name="M:VC3.ComponentModel.BusinessObject.ResetGlobalScope">
            <summary>
            Disposes of all global <see cref="T:VC3.ComponentModel.BusinessObject"/>.
            </summary>
        </member>
        <member name="M:VC3.ComponentModel.BusinessObject.Clone(System.Boolean,System.Boolean)">
            <summary>
            Clones this object. Overriden to initialize the object first.
            </summary>
            <param name="isNew">If true, the cloned object will be new (<see cref="P:VC3.ComponentModel.BusinessObject.IsNew"/>)
            and will have a new id.</param>
            <param name="fields">If true, all fields of the object will also be cloned</param>
            <returns>The cloned object</returns>
        </member>
        <member name="M:VC3.ComponentModel.BusinessObject.ToString">
            <summary>
            Default implementation of <see cref="M:System.Object.ToString"/>. Returns type and 
            id information about the instance.
            </summary>
            <returns>Returns type and id information about the instance.</returns>
        </member>
        <member name="M:VC3.ComponentModel.BusinessObject.ToString(VC3.ComponentModel.BusinessObject)">
            <summary>
            Returns a string with technical information about the object that includes
            type and id information. Useful for error messages.
            </summary>
            <returns>String with technical information about the object</returns>
        </member>
        <member name="M:VC3.ComponentModel.BusinessObject.ToIdString">
            <summary>
            Gets a string representation of the identity of the instance that
            can later be passed to <see cref="M:VC3.ComponentModel.BusinessObject.GetInstance(System.Type,System.String)"/>
            </summary>
            <remarks>
            Use this method if possible instead of formulating your own id strings.  It
            abstracts the identity of objects and makes using compound keys and classes
            that use the <see cref="T:VC3.ComponentModel.InheritanceSchemeAttribute"/> fun.
            </remarks>
            <returns>null for new instances, otherwise the string id.</returns>
        </member>
        <member name="M:VC3.ComponentModel.BusinessObject.FromIdString(System.Type,System.String)">
            <summary>
            Gets an instance of the specified type based on the identifer.
            </summary>
            <param name="type">Type of object to create</param>
            <param name="id">Identity of the object</param>
            <returns>
            If id is <see cref="F:VC3.ComponentModel.DataConverter.StringNull"/> then null.
            If id is null then a new object.
            Otherwise the instance with the specified ID.
            </returns>
        </member>
        <member name="M:VC3.ComponentModel.BusinessObject.AllowEditing">
            <summary>
            Allows for temporary editing of a business object by suspending permission checks.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VC3.ComponentModel.BusinessObject.InitializeSubscribers">
            <summary>
            Invokes the <see cref="M:VC3.ComponentModel.BusinessObject.ISubscriberAttribute.Subscribe(VC3.ComponentModel.BusinessObject)"/> method on all
            class-level attributes for the current instance that implement the
            <see cref="T:VC3.ComponentModel.BusinessObject.ISubscriberAttribute"/> interface.
            </summary>
        </member>
        <member name="M:VC3.ComponentModel.BusinessObject.RaiseBeforePropertySet(VC3.ComponentModel.PropertyReflector,System.Object@)">
            <summary>
            Raises the PropertySet event.
            </summary>
        </member>
        <member name="M:VC3.ComponentModel.BusinessObject.RaiseBeforeInit">
            <summary>
            Raises the BeforeInit event.
            </summary>
        </member>
        <member name="M:VC3.ComponentModel.BusinessObject.RaiseAfterInit">
            <summary>
            Raises the AfterInit event.
            </summary>
        </member>
        <member name="M:VC3.ComponentModel.BusinessObject.RaiseBeforeInsert">
            <summary>
            Raises the BeforeInsert event.
            </summary>
        </member>
        <member name="M:VC3.ComponentModel.BusinessObject.RaiseAfterInsert">
            <summary>
            Raises the AfterInsert event.
            </summary>
        </member>
        <member name="M:VC3.ComponentModel.BusinessObject.RaiseBeforeUpdate">
            <summary>
            Raises the BeforeUpdate event.
            </summary>
        </member>
        <member name="M:VC3.ComponentModel.BusinessObject.RaiseAfterUpdate">
            <summary>
            Raises the AfterUpdate event.
            </summary>
        </member>
        <member name="M:VC3.ComponentModel.BusinessObject.RaiseBeforeDelete">
            <summary>
            Raises the BeforeDelete event.
            </summary>
        </member>
        <member name="M:VC3.ComponentModel.BusinessObject.RaiseAfterDelete">
            <summary>
            Raises the AfterDelete event.
            </summary>
        </member>
        <member name="M:VC3.ComponentModel.BusinessObject.GetReferenceHashCode">
            <summary>
            Enables the <see cref="T:VC3.ComponentModel.BusinessObject.ReferenceComparer"/> to obtain the reference hash code.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VC3.ComponentModel.BusinessObject.GetHashCode">
            <summary>
            All BusinessObjects with the same <see cref="M:VC3.ComponentModel.BusinessObject.GetId"/>
            value will have the same hash code.
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:VC3.ComponentModel.BusinessObject.Equals(System.Object)">
            <summary>
            Rules:
            1) Two null references are equal.  
            2) A null reference and a non-null reference are not equal.
            3) Two new objects are equal only if they are the same object (references are equal).
            4) A new and non-new object are never equal.  
            5) Two non-new (<see cref="P:VC3.ComponentModel.BusinessObject.IsNew"/>) BusinessObjects will be considered 
            equal if they have the same <see cref="F:VC3.ComponentModel.BusinessObject.id"/>. 
            </summary>
            <param name="o">Other object to compare to</param>
            <returns>True if both objects are BusinessObjects with the same Id</returns>
        </member>
        <member name="M:VC3.ComponentModel.BusinessObject.Equals(VC3.ComponentModel.BusinessObject,VC3.ComponentModel.BusinessObject)">
            <summary>
            Tests if two BusinessObjects are equal.
            </summary>
            <remarks>
            Rules:
            1) Two null references are equal.  
            2) A null reference and a non-null reference are not equal.
            3) Two new objects are equal only if they are the same object (references are equal).
            4) A new and non-new object are never equal.  
            5) Two non-new (<see cref="P:VC3.ComponentModel.BusinessObject.IsNew"/>) BusinessObjects will be considered 
            equal if they have the same <see cref="F:VC3.ComponentModel.BusinessObject.id"/>. 
            </remarks>
            <param name="a">Object to compare with b</param>
            <param name="b">Object to compare with a</param>
            <returns>True if they are considered equal. (See remarks)</returns>
        </member>
        <member name="M:VC3.ComponentModel.BusinessObject.op_Equality(VC3.ComponentModel.BusinessObject,VC3.ComponentModel.BusinessObject)">
            <summary>
            Compares two BusinessObjects. See the <see cref="M:VC3.ComponentModel.BusinessObject.Equals(System.Object)"/> method for
            more information.
            </summary>
            <returns>True if a.Equals(b)</returns>
        </member>
        <member name="M:VC3.ComponentModel.BusinessObject.op_Inequality(VC3.ComponentModel.BusinessObject,VC3.ComponentModel.BusinessObject)">
            <summary>
            Compares two BusinessObjects. See the <see cref="M:VC3.ComponentModel.BusinessObject.Equals(System.Object)"/> method for
            more information.
            </summary>
            <returns>True if !a.Equals(b).</returns>
        </member>
        <member name="M:VC3.ComponentModel.BusinessObject.OnDeserialization">
            <summary>
            Called after this object has been deserialized. 
            
            In order for BusinessObject to function properly,
            Override this method instead of implementing IDeserializationCallback.
            </summary>
        </member>
        <member name="M:VC3.ComponentModel.BusinessObject.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization(System.Object)">
            <summary>
            Called after each instance has been deserialized
            </summary>
            <param name="sender"></param>
        </member>
        <member name="M:VC3.ComponentModel.BusinessObject.CreateReference``1(System.String)">
            <summary>
            Creates a reference to a list of items that are in a more local scope.
            This allows global objects to hold loose references to objects in more local scopes.
            </summary>
            <typeparam name="T">The type of BusinessObject to indirectly reference</typeparam>
        </member>
        <member name="M:VC3.ComponentModel.BusinessObject.CreateListReference``1(VC3.ComponentModel.BusinessObject.ListLoader)">
            <summary>
            Creates a reference to a list of items that are in a more local scope.
            This allows global objects to hold loose references to objects in more local scopes.
            </summary>
            <typeparam name="T">The type of list to indirectly reference</typeparam>
        </member>
        <member name="M:VC3.ComponentModel.BusinessObject.CreateListReference``1(VC3.ComponentModel.BusinessObject.ListLoader,VC3.ComponentModel.BusinessObject.ListPersister)">
            <summary>
            Creates a reference to a list of items that are in a more local scope.
            This allows global objects to hold loose references to objects in more local scopes.
            </summary>
            <typeparam name="T">The type of list to indirectly reference</typeparam>
        </member>
        <member name="M:VC3.ComponentModel.BusinessObject.CreateListReference``1(VC3.ComponentModel.BusinessObject.ListLoader,System.String)">
            <summary>
            Creates a reference to a list of items that are in a more local scope.
            This allows global objects to hold loose references to objects in more local scopes.
            </summary>
            <typeparam name="T">The type of list to indirectly reference</typeparam>
        </member>
        <member name="M:VC3.ComponentModel.BusinessObject.CreateListReference``1(VC3.ComponentModel.BusinessObject.ListLoader,VC3.ComponentModel.BusinessObject.ListPersister,VC3.ComponentModel.BusinessObject.ListPersister)">
            <summary>
            Creates a reference to a list of items that are in a more local scope.
            This allows global objects to hold loose references to objects in more local scopes.
            </summary>
            <typeparam name="T">The type of list to indirectly reference</typeparam>
        </member>
        <member name="M:VC3.ComponentModel.BusinessObject.CreateListReference``1(VC3.ComponentModel.CachedDataLoader)">
            <summary>
            Creates a reference to a list of items that are in a more local scope.
            This allows global objects to hold loose references to objects in more local scopes.
            </summary>
            <typeparam name="T">The type of list to indirectly reference</typeparam>
        </member>
        <member name="P:VC3.ComponentModel.BusinessObject.Context">
            <summary>
            Gets the graph context in which this object resides.
            </summary>
        </member>
        <member name="P:VC3.ComponentModel.BusinessObject.IsNew">
            <summary>
            Indicates whether the business object represents a new or existing item.
            </summary>
            <remarks>
            Sub-classes should set this property in the constructor to
            indicate whether the business object already exists, or represents
            an new unpersisted business object.
            </remarks>
        </member>
        <member name="P:VC3.ComponentModel.BusinessObject.IsReadOnly">
            <summary>
            If true, none of the properties on the business object can be changed.
            </summary>
            <remarks>
            Sub-classes can override this property with specific
            rules for when they can be changed.
            <see cref="M:VC3.ComponentModel.BusinessObject.OnPropertySet(System.String,System.Object,System.Boolean)"/> and <see cref="M:VC3.ComponentModel.BusinessObject.CommitChanges"/>
            are affected by this property.
            </remarks>
        </member>
        <member name="P:VC3.ComponentModel.BusinessObject.CanEditGranted">
            <summary>
            Indicates if CanEdit has been demanded. If false, the next property set
            or the committing of the object will demand the <see cref="P:VC3.ComponentModel.BusinessObject.CanEdit"/> permission.
            Initial value: false.  Changes as the object transistions between clean and dirty states.
            </summary>
        </member>
        <member name="P:VC3.ComponentModel.BusinessObject.IsDirty">
            <summary>
            Indicates if the business object's state has changed and needs to be
            persisted when <see cref="M:VC3.ComponentModel.BusinessObject.CommitChanges"/> is called.  Enforces <see cref="P:VC3.ComponentModel.BusinessObject.CanEdit"/>
            when transitioning from a clean to dirty state and <see cref="P:VC3.ComponentModel.BusinessObject.CanEditGranted"/> is false.
            </summary>
            <seealso cref="M:VC3.ComponentModel.BusinessObject.CommitChanges"/>
        </member>
        <member name="P:VC3.ComponentModel.BusinessObject.IsInitialized">
            <summary>
            Indicates if the business object has been initialized.
            Uninitialized business objects are not persisted when
            <see cref="M:VC3.ComponentModel.BusinessObject.CommitChanges"/> is called.
            </summary>
            <seealso cref="M:VC3.ComponentModel.BusinessObject.CommitChanges"/>
        </member>
        <member name="P:VC3.ComponentModel.BusinessObject.CanLoad">
            <summary>
            Indicates if the business object can safely load state associated with it.
            </summary>
        </member>
        <member name="P:VC3.ComponentModel.BusinessObject.IsTraversing">
            <summary>
            Indicates if the business object is currently being processed
            as part of a recursive traversal of the object graph.
            </summary>
        </member>
        <member name="P:VC3.ComponentModel.BusinessObject.IsPendingDelete">
            <summary>
            Indicates that the business object has been marked for deletion.
            If true and <see cref="M:VC3.ComponentModel.BusinessObject.CommitChanges"/> is called, <see cref="M:VC3.ComponentModel.BusinessObject.Delete"/>
            will be called on this object.
            </summary>
            <seealso cref="M:VC3.ComponentModel.BusinessObject.CommitChanges"/>
        </member>
        <member name="P:VC3.ComponentModel.BusinessObject.IsCommittable">
            <summary>
            Indicates that the business object can be committed.
            </summary>
        </member>
        <member name="P:VC3.ComponentModel.BusinessObject.IsPendingCommit">
            <summary>
            Indicates that the current business object is in a state in which
            it is eligible to be committed.
            </summary>
        </member>
        <member name="P:VC3.ComponentModel.BusinessObject.IsDeleted">
            <summary>
            Indicates that the business object has been deleted.
            </summary>
            <seealso cref="M:VC3.ComponentModel.BusinessObject.CommitChanges"/>
        </member>
        <member name="P:VC3.ComponentModel.BusinessObject.Cache">
            <summary>
            Provides per request caching services for business object subclasses.
            </summary>
            <remarks>
            If the object is running the context of a web request, the
            <see cref="T:VC3.ComponentModel.ICache"/> will be an instance of <see cref="T:VC3.ComponentModel.WebCache"/>,
            which delegates to the <see cref="P:System.Web.HttpContext.Items"/> collection
            to provide a request-scoped cache.
            
            If the object is running outside of a web request, an instance
            of <see cref="T:VC3.ComponentModel.StaticCache"/> will be used, which simply stores
            cached items in a <see cref="T:System.Collections.Hashtable"/>, resulting in a
            thread-scoped cache that will never disapear for the life of
            the application.
            </remarks>
        </member>
        <member name="P:VC3.ComponentModel.BusinessObject.Transaction">
            <summary>
            If specified, the transaction provider to use when
            <see cref="M:VC3.ComponentModel.BusinessObjectList.CommitChanges"/> is called.
            </summary>
        </member>
        <member name="P:VC3.ComponentModel.BusinessObject.Scheme">
            <summary>
            Gets the <see cref="T:VC3.ComponentModel.IScheme"/> of this BusinessObject.
            </summary>
        </member>
        <member name="P:VC3.ComponentModel.BusinessObject.Events">
            <summary>
            Various events for the current object. Non-public event handlers will not be serialized.
            Have your event handler class implement <see cref="T:System.Runtime.Serialization.IDeserializationCallback"/>
            or override <see cref="M:VC3.ComponentModel.BusinessObject.OnDeserialization"/> to re-hookup events after deserialization.
            </summary>
            <remarks>
            A seperate structure is used to store the events and is created only 
            when events are actually used. 
            </remarks>
        </member>
        <member name="P:VC3.ComponentModel.BusinessObject.CanView">
            <summary>
            Indicates whether the current instance can be viewed.
            </summary>
        </member>
        <member name="P:VC3.ComponentModel.BusinessObject.CanEdit">
            <summary>
            Indicates whether the current instance can be edited.
            </summary>
        </member>
        <member name="P:VC3.ComponentModel.BusinessObject.CanEditExisting">
            <summary>
            Indicates whether an instance that is !<see cref="P:VC3.ComponentModel.BusinessObject.IsNew"/> can be edited.
            </summary>
        </member>
        <member name="P:VC3.ComponentModel.BusinessObject.CanEditNew">
            <summary>
            Indicates whether an instance that is <see cref="P:VC3.ComponentModel.BusinessObject.IsNew"/> can be edited.
            </summary>
        </member>
        <member name="P:VC3.ComponentModel.BusinessObject.CanDelete">
            <summary>
            Indicates whether the current instance can be deleted.
            </summary>
        </member>
        <member name="T:VC3.ComponentModel.BusinessObject.TraversalInfo">
            <summary>
            Stores information about a traversal of a <see cref="T:VC3.ComponentModel.BusinessObject"/>
            instance graph.
            </summary>
        </member>
        <member name="F:VC3.ComponentModel.BusinessObject.TraversalInfo.Depth">
            <summary>
            Tracks the depth during a recursive traversal of the object graph.
            </summary>
        </member>
        <member name="M:VC3.ComponentModel.BusinessObject.TraversalInfo.#ctor">
            <summary>
            Creates a new <see cref="T:VC3.ComponentModel.BusinessObject.TraversalInfo"/> instance with a depth
            of zero.
            </summary>
        </member>
        <member name="T:VC3.Util.ObjectConstant">
            <summary>
            Abstract base class for special constant values that have no
            state other than their identitity.  All instances of this type are considered equal
            so that equality is maintained across serializations.  In other words: v == deserialize(serialize(v)).
            </summary>
            <remarks>
            To implement a new constant, subclass this class and then mark it as serializable. The
            subclass should probably be narrowly scoped (ie, use a private nested class). Then create
            an instance and assign it to a static field.
            </remarks>
        </member>
        <member name="M:VC3.Util.ObjectConstant.#ctor">
            <summary>
            Must subclass this class
            </summary>
        </member>
        <member name="M:VC3.Util.ObjectConstant.Equals(System.Object)">
            <summary>
            All instances of the same type are equal.
            </summary>
        </member>
        <member name="M:VC3.Util.ObjectConstant.GetHashCode">
            <summary>
            All instances of the same type are equal.
            </summary>
        </member>
        <member name="T:VC3.ComponentModel.BusinessObject.ISubscriberAttribute">
            <summary>
            Defines an interface that may be implemented by attributes placed on
            <see cref="T:VC3.ComponentModel.BusinessObject"/> subclasses to enable the attributes to
            perform tasks or set up event handlers.
            </summary>
            <remarks>
            Subscription will occur after construction and registration, but before
            the BeforeInit event is raised.  Objects that are never initialized will
            not cause subscription to occur.
            </remarks>
        </member>
        <member name="T:VC3.ComponentModel.BusinessObject.SubscriberAttribute">
            <summary>
            Base class for attributes implementing <see cref="T:VC3.ComponentModel.BusinessObject.ISubscriberAttribute"/> that exposes
            information necessary for external implementations to interact with <see cref="T:VC3.ComponentModel.BusinessObject"/>
            instances efficiently.
            </summary>
        </member>
        <member name="T:VC3.ComponentModel.BusinessObject.EventStore">
            <summary>
            Storage class for <see cref="T:VC3.ComponentModel.BusinessObject"/> event handlers.
            Non-public event handlers will not be serialized.  Have your event
            handler class implement <see cref="T:System.Runtime.Serialization.IDeserializationCallback"/>
            to re-hookup events after deserialization.
            </summary>
        </member>
        <member name="M:VC3.ComponentModel.BusinessObject.EventStore.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            This constructor is only called during deserialization
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="E:VC3.ComponentModel.BusinessObject.EventStore.BeforePropertySet">
            <summary>
            Occurs before a property value is set.
            </summary>
        </member>
        <member name="E:VC3.ComponentModel.BusinessObject.EventStore.BeforeInit">
            <summary>
            Occurs immediately before the instance is initialized.
            </summary>
        </member>
        <member name="E:VC3.ComponentModel.BusinessObject.EventStore.AfterInit">
            <summary>
            Occurs immediately after the instance is initialized.
            </summary>
        </member>
        <member name="E:VC3.ComponentModel.BusinessObject.EventStore.BeforeCommit">
            <summary>
            Occurs immediately before the instance is committed. The transaction
            used by the commit process is started before this event is raised.
            </summary>
        </member>
        <member name="E:VC3.ComponentModel.BusinessObject.EventStore.AfterCommit">
            <summary>
            Occurs immediately after the instance is committed. The transaction
            used by the commit process is ended after this event is raised.
            </summary>
        </member>
        <member name="E:VC3.ComponentModel.BusinessObject.EventStore.CommitSucceeded">
            <summary>
            Occurs immediately after the instance is successfully committed.
            The transaction used by the commit process *may* be ended before this 
            event is raised.
            </summary>
        </member>
        <member name="E:VC3.ComponentModel.BusinessObject.EventStore.CommitFailed">
            <summary>
            Occurs immediately after the instance fails while committing.
            The transaction used by the commit process *may* be ended before this 
            event is raised.
            </summary>
        </member>
        <member name="E:VC3.ComponentModel.BusinessObject.EventStore.BeforeInsert">
            <summary>
            Occurs immediately before the instance is inserted.
            </summary>
        </member>
        <member name="E:VC3.ComponentModel.BusinessObject.EventStore.AfterInsert">
            <summary>
            Occurs immediately after the instance is inserted.
            </summary>
        </member>
        <member name="E:VC3.ComponentModel.BusinessObject.EventStore.BeforeUpdate">
            <summary>
            Occurs immediately before the instance is updated.
            </summary>
        </member>
        <member name="E:VC3.ComponentModel.BusinessObject.EventStore.AfterUpdate">
            <summary>
            Occurs immediately after the instance is updated.
            </summary>
        </member>
        <member name="E:VC3.ComponentModel.BusinessObject.EventStore.BeforeDelete">
            <summary>
            Occurs immediately before the instance is deleted.
            </summary>
        </member>
        <member name="E:VC3.ComponentModel.BusinessObject.EventStore.AfterDelete">
            <summary>
            Occurs immediately after the instance is deleted.
            </summary>
        </member>
        <member name="T:VC3.ComponentModel.BusinessObject.ReferenceComparer">
            <summary>
            Implements reference equality comparison for business objects.
            </summary>
        </member>
        <member name="T:VC3.ComponentModel.BusinessObject.EditingActivity">
            <summary>
            Enables business objects to be editing by suspending permission checks.
            </summary>
        </member>
        <member name="T:VC3.ComponentModel.IActivity">
             <summary>
             Represents a set of actions.  The activity is automatically
             started when the object is started.
             </summary>
             <remarks>
             Implementations of this interface should implement <see cref="M:System.IDisposable.Dispose"/>
             such that it calls Abort in the case that Complete is not called prior.
             This enables it to be easily used in a C# "using" block.
             </remarks>
             <example>
             The following is an example usage of <see cref="T:VC3.ComponentModel.TransactedActivity"/>
             which implements IActivity:
             <code>
             	using( IActivity activity = new TransactedActivity(Transaction) )
             	{
             		// A transaction is automattically started when TransactedActivity
             		// is constructed.
            
             		// if an exception is thrown before Complete()
             		// is called, the transaction will automattically be rolled back.
            			RaiseBeforeDelete();
            			OnDelete();
            			RaiseAfterDelete();
            
            			// This will commit the transaction
            			activity.Complete();
            		}
             </code>
             </example>
        </member>
        <member name="M:VC3.ComponentModel.IActivity.Complete">
            <summary>
            Called to signal the activity was completed successfuly.
            </summary>
        </member>
        <member name="M:VC3.ComponentModel.IActivity.Abort">
            <summary>
            Called to signal the activity failed successfuly.
            </summary>
        </member>
        <member name="T:VC3.ComponentModel.BusinessObject.Identifier">
            <summary>
            Represents the unique identifier for a <see cref="T:VC3.ComponentModel.BusinessObject"/> instance.
            </summary>
            <remarks>
            <para>
            Subclasses must override <see cref="P:VC3.ComponentModel.BusinessObject.Identifier.Values"/> in order to expose the values
            the identifier represents, and <see cref="M:System.Object.ToString"/> in order to convert
            the identifier to a compact string representation.
            </para>
            
            <para>
            An assumption is that there will be many instances of this class and that 
            subclasses will be responsible for most of the implementation.
            Because of this, this class is as lightweight as possible and each instance
            has no memory footprint due to their being no fields delgating all storage
            responsibilities to subclasses.
            </para>
            </remarks>
        </member>
        <member name="M:VC3.ComponentModel.BusinessObject.Identifier.#ctor">
            <summary>
            Creates a new <see cref="T:VC3.ComponentModel.BusinessObject.Identifier"/>.
            </summary>
        </member>
        <member name="M:VC3.ComponentModel.BusinessObject.Identifier.Equals(System.Object)">
            <summary>
            Overriden to support the == and != operators.
            </summary>
            <param name="obj">The object to compare</param>
            <returns>True if the identifiers are the same, otherwise false</returns>
        </member>
        <member name="M:VC3.ComponentModel.BusinessObject.Identifier.GetHashCode">
            <summary>
            Override to support the == and != operators.
            </summary>
            <returns>The hash for the identifier</returns>
        </member>
        <member name="M:VC3.ComponentModel.BusinessObject.Identifier.op_Equality(VC3.ComponentModel.BusinessObject.Identifier,VC3.ComponentModel.BusinessObject.Identifier)">
            <summary>
            Delegates equality checks to the <see cref="M:VC3.ComponentModel.BusinessObject.Identifier.Equals(System.Object)"/> method.
            </summary>
            <param name="a">The first identifier to compare</param>
            <param name="b">The second identifier to compare</param>
            <returns>True if the identifiers are the same, otherwise false</returns>
        </member>
        <member name="M:VC3.ComponentModel.BusinessObject.Identifier.op_Inequality(VC3.ComponentModel.BusinessObject.Identifier,VC3.ComponentModel.BusinessObject.Identifier)">
            <summary>
            Delegates equality checks to the <see cref="M:VC3.ComponentModel.BusinessObject.Identifier.Equals(System.Object)"/> method.
            </summary>
            <param name="a">The first identifier to compare</param>
            <param name="b">The second identifier to compare</param>
            <returns>True if the identifiers are not the same, otherwise false</returns>
        </member>
        <member name="M:VC3.ComponentModel.BusinessObject.Identifier.ToString">
            <summary>
            Must be implemented in subclasses to return a string representation
            of the Id
            </summary>
            <returns>String representation of the id that can be used
            later to recreate the instance</returns>
        </member>
        <member name="M:VC3.ComponentModel.BusinessObject.Identifier.ToDbString">
            <summary>
            Gets a string that can be parsed by database stored procedures.
            Default implementation returns ToString()
            </summary>
            <returns>Id values in a format that can be parsed by stored procedures</returns>
        </member>
        <member name="P:VC3.ComponentModel.BusinessObject.Identifier.Values">
            <summary>
            Gets the base type values that the identifier represents.
            </summary>
        </member>
        <member name="T:VC3.ComponentModel.BusinessObject.IdentifierList">
            <summary>
            Represents a collection of <see cref="T:VC3.ComponentModel.BusinessObject.Identifier"/> instances.
            </summary>
        </member>
        <member name="M:VC3.ComponentModel.BusinessObject.IdentifierList.ToString">
            <summary>
            Concatenates the string representations of all <see cref="T:VC3.ComponentModel.BusinessObject.Identifier"/>
            instances contained in the list, using a vertical pipe "|" as a separator.
            </summary>
            <returns>The concatenated ids</returns>
        </member>
        <member name="M:VC3.ComponentModel.BusinessObject.IdentifierList.ToDbString">
            <summary>
            Concatenates the string representations of all <see cref="T:VC3.ComponentModel.BusinessObject.Identifier"/>
            instances contained in the list, using a vertical pipe "|" as a separator.
            </summary>
            <returns>The concatenated ids</returns>
        </member>
        <member name="M:VC3.ComponentModel.BusinessObject.IdentifierList.Add(VC3.ComponentModel.BusinessObject.Identifier)">
            <summary>
            Adds a <see cref="T:VC3.ComponentModel.BusinessObject.Identifier"/> to the list.
            </summary>
            <param name="item">The item to add to the list</param>
            <returns>The position at which the item was inserted</returns>
        </member>
        <member name="M:VC3.ComponentModel.BusinessObject.IdentifierList.Contains(VC3.ComponentModel.BusinessObject.Identifier)">
            <summary>
            Determines if a particular <see cref="T:VC3.ComponentModel.BusinessObject.Identifier"/> is in the list.
            </summary>
            <param name="item">The item to search for</param>
            <returns>True if item is found. False otherwise.</returns>
        </member>
        <member name="M:VC3.ComponentModel.BusinessObject.IdentifierList.IndexOf(VC3.ComponentModel.BusinessObject.Identifier)">
            <summary>
            Determines the index of a particular <see cref="T:VC3.ComponentModel.BusinessObject.Identifier"/> in the list.
            </summary>
            <param name="item">The item to search for</param>
            <returns>The index if item is found. -1 otherwise.</returns>
        </member>
        <member name="M:VC3.ComponentModel.BusinessObject.IdentifierList.Insert(System.Int32,VC3.ComponentModel.BusinessObject.Identifier)">
            <summary>
            Adds a <see cref="T:VC3.ComponentModel.BusinessObject.Identifier"/> to the list.
            </summary>
            <param name="index">Position at which the item will be inserted</param>
            <param name="item">The item to add to the list</param>
        </member>
        <member name="M:VC3.ComponentModel.BusinessObject.IdentifierList.Remove(VC3.ComponentModel.BusinessObject.Identifier)">
            <summary>
            Removes a particular <see cref="T:VC3.ComponentModel.BusinessObject.Identifier"/> from the list.
            </summary>
            <param name="item">The item to search for</param>
        </member>
        <member name="M:VC3.ComponentModel.BusinessObject.IdentifierList.RemoveAt(System.Int32)">
            <summary>
            Removes a particular <see cref="T:VC3.ComponentModel.BusinessObject.Identifier"/> from the list.
            </summary>
            <param name="index">Position of the item to remove from the list</param>
        </member>
        <member name="M:VC3.ComponentModel.BusinessObject.IdentifierList.Clear">
            <summary>
            Removes all <see cref="T:VC3.ComponentModel.BusinessObject.Identifier"/> instances from the list.
            </summary>
        </member>
        <member name="M:VC3.ComponentModel.BusinessObject.IdentifierList.GetEnumerator">
            <summary>
            Enables enumeration over all <see cref="T:VC3.ComponentModel.BusinessObject.Identifier"/>
            instances in the list.
            </summary>
            <returns>An <see cref="T:System.Collections.IEnumerator"/> instance</returns>
        </member>
        <member name="M:VC3.ComponentModel.BusinessObject.IdentifierList.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the <see cref="T:VC3.ComponentModel.BusinessObject.Identifier"/> instances in the list
            to the specified array.
            </summary>
            <param name="array">The array to copy the <see cref="T:VC3.ComponentModel.BusinessObject.Identifier"/> instances into</param>
            <param name="index">The position in the array to start the copy operation</param>
        </member>
        <member name="P:VC3.ComponentModel.BusinessObject.IdentifierList.Item(System.Int32)">
            <summary>
            Retrieves a <see cref="T:VC3.ComponentModel.BusinessObject.Identifier"/> from the list based on position in the list.
            </summary>
            <param name="index">Position of the item in the list</param>
        </member>
        <member name="P:VC3.ComponentModel.BusinessObject.IdentifierList.Count">
            <summary>
            Gets the number of <see cref="T:VC3.ComponentModel.BusinessObject.Identifier"/> instances in the list.
            </summary>
        </member>
        <member name="P:VC3.ComponentModel.BusinessObject.IdentifierList.System#Collections#ICollection#IsSynchronized">
            <summary>
            Indicates whether the list is synchronized.
            </summary>
        </member>
        <member name="P:VC3.ComponentModel.BusinessObject.IdentifierList.System#Collections#ICollection#SyncRoot">
            <summary>
            Gets the synchronization root for the list.
            </summary>
        </member>
        <member name="T:VC3.ComponentModel.BusinessObject.IdAttribute">
            <summary>
            Identifies properties on a business object that represent key identifiers
            in the underlying datasource.
            </summary>
        </member>
        <member name="M:VC3.ComponentModel.BusinessObject.IdAttribute.#ctor">
            <summary>
            Constructs a new instance of <see cref="T:VC3.ComponentModel.BusinessObject.IdAttribute"/> and allows
            the name to default to the name of the underlying property.
            </summary>
        </member>
        <member name="M:VC3.ComponentModel.BusinessObject.IdAttribute.#ctor(System.String)">
            <summary>
            Constructs a new instance of <see cref="T:VC3.ComponentModel.BusinessObject.IdAttribute"/> and specifies
            the name of the key in the underlying datasource, which may be different
            than the name of the underlying property.
            </summary>
        </member>
        <member name="M:VC3.ComponentModel.BusinessObject.IdAttribute.#ctor(System.Int32)">
            <summary>
            Constructs a new instance of <see cref="T:VC3.ComponentModel.BusinessObject.IdAttribute"/> and specifies
            the sequence of the id relative to other ids within a complex key.
            </summary>
        </member>
        <member name="M:VC3.ComponentModel.BusinessObject.IdAttribute.#ctor(System.String,System.Int32)">
            <summary>
            Constructs a new instance of <see cref="T:VC3.ComponentModel.BusinessObject.IdAttribute"/> and specifies
            the name of the key in the underlying datasource, which may be different
            than the name of the underlying property, and the sequence of the id
            relative to other ids within a complex key.
            </summary>
        </member>
        <member name="M:VC3.ComponentModel.BusinessObject.IdAttribute.Initialize(System.Reflection.PropertyInfo)">
            <summary>
            Stores information about the underlying property that cannot be
            determine during attribute construction
            </summary>
            <param name="property">The underlying property the attribute is assigned to</param>
        </member>
        <member name="M:VC3.ComponentModel.BusinessObject.IdAttribute.GetValue(System.Object)">
            <summary>
            Gets the value of the id property for the specified instance.
            </summary>
            <param name="instance">The instance to retrieve the id property value for</param>
            <returns>The value of the id property</returns>
        </member>
        <member name="M:VC3.ComponentModel.BusinessObject.IdAttribute.ToString(System.Object)">
            <summary>
            Converts the value of the id property to a string representation.
            </summary>
            <param name="value">The instance to retrieve the id property string for</param>
            <returns>The string representation of the id property</returns>
        </member>
        <member name="M:VC3.ComponentModel.BusinessObject.IdAttribute.FromString(System.String)">
            <summary>
            Converts a string representation of the id property to a strongly-typed value.
            </summary>
            <param name="value">The string representation of the property to convert</param>
            <returns>A strongly-type value based on the string representation</returns>
        </member>
        <member name="M:VC3.ComponentModel.BusinessObject.IdAttribute.System#IComparable#CompareTo(System.Object)">
            <summary>
            Indicates the sorting order of two <see cref="T:VC3.ComponentModel.BusinessObject.IdAttribute"/> instances
            based on the <see cref="P:VC3.ComponentModel.BusinessObject.IdAttribute.Sequence"/> property.
            </summary>
            <param name="value">The <see cref="T:VC3.ComponentModel.BusinessObject.IdAttribute"/> to compare to</param>
            <returns>The comparison result</returns>
        </member>
        <member name="M:VC3.ComponentModel.BusinessObject.IdAttribute.GetIds(System.Type)">
            <summary>
            Gets the set of <see cref="T:VC3.ComponentModel.BusinessObject.IdAttribute"/> instances for the specified type.
            </summary>
            <param name="type">The type to retrieve ids for</param>
            <returns>An array of ids for the type</returns>
            <remarks>
            If the type contains multiple ids, the array will be sorted by the
            <see cref="P:VC3.ComponentModel.BusinessObject.IdAttribute.Sequence"/> property of the ids in the set.
            </remarks>
        </member>
        <member name="P:VC3.ComponentModel.BusinessObject.IdAttribute.Name">
            <summary>
            Gets the name of the Id.
            </summary>
            <remarks>
            The name will default to the name of the underlying property
            to which the attribute is assigned if a name is not specified.
            The name must match the name of the key in the underlying datasource.
            </remarks>
        </member>
        <member name="P:VC3.ComponentModel.BusinessObject.IdAttribute.Sequence">
            <summary>
            Gets the sequence of the Id.
            </summary>
            <remarks>
            The sequence will determine the order of the id relative
            to other ids for the same business object when the id is part
            of a complex identifier.
            </remarks>
        </member>
        <member name="P:VC3.ComponentModel.BusinessObject.IdAttribute.Type">
            <summary>
            Gets the <see cref="T:System.Type"/> of the underlying property
            to which the attribute is assigned.
            </summary>
        </member>
        <member name="P:VC3.ComponentModel.BusinessObject.IdAttribute.DeclaringType">
            <summary>
            Gets the <see cref="T:System.Type"/> of the declaring class of the
            underlying property to which the attribute is assigned.
            </summary>
        </member>
        <member name="P:VC3.ComponentModel.BusinessObject.IdAttribute.Children">
            <summary>
            Gets the child ids if the current id is a subclass of <see cref="T:VC3.ComponentModel.BusinessObject"/>.
            </summary>
        </member>
        <member name="T:VC3.ComponentModel.BusinessObject.Converter">
            <summary>
            Converts from an id to a business object and
            reverse
            </summary>
        </member>
        <member name="T:VC3.ComponentModel.BusinessObject.ListLoader">
            <summary>
            Called to retrieve data used to populate a list
            </summary>
        </member>
        <member name="T:VC3.ComponentModel.BusinessObject.ListPersister">
            <summary>
            Called to create or remove associations between parent and children
            </summary>
        </member>
        <member name="T:VC3.ComponentModel.BusinessObject.ListCommitter">
            <summary>
            Called to create or remove associations between parent and children
            </summary>
        </member>
        <member name="T:VC3.ComponentModel.BusinessObject.OwnedObjectsEnumerator">
            <summary>
            Utility class used to enumerate all owned objects associated with this object
            </summary>
        </member>
        <member name="T:VC3.ComponentModel.BusinessObject.Reference`1">
            <summary>
            Allows for an indirect reference to be held to an object.  The object's
            lifetime is governed by the specified scope.
            </summary>
            <remarks>
            This class is protected and nested to prevent public dependencies on References.
            </remarks>
        </member>
        <member name="T:VC3.ComponentModel.IOwned">
            <summary>
            Represents an ownership relation between two objects (typically a list and business object).
            </summary>
        </member>
        <member name="P:VC3.ComponentModel.IOwned.Owner">
            <summary>
            Gets or sets the BusinessObject that is the owner of this object
            </summary>
        </member>
        <member name="T:VC3.ComponentModel.IReference`1">
            <summary>
            An indirect reference to an object.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:VC3.ComponentModel.IReference`1.Object">
            <summary>
            Gets or sets the referenced object
            </summary>
        </member>
        <member name="M:VC3.ComponentModel.BusinessObject.Reference`1.op_Implicit(VC3.ComponentModel.BusinessObject.Reference{`0})~`0">
            <summary>
            Implicit cast to <typeparamref name="T"/> so that generated BusinessObject
            code doesn't have to be changed if field type is changed to a Reference.
            </summary>
        </member>
        <member name="M:VC3.ComponentModel.BusinessObject.Reference`1.op_Implicit(VC3.ComponentModel.BusinessObject)~VC3.ComponentModel.BusinessObject.Reference{`0}">
            <summary>
            Implicit cast from BusinessObject to reference so that generated BusinessObject
            code doesn't have to be changed if field type is changed to a Reference.  There is 
            not a cast for lists b/c its not really needed and doesn't make sense.
            </summary>
        </member>
        <member name="T:VC3.ComponentModel.BusinessObject.BusinessObjectListReference`1">
            <summary>
            Specialized reference for use with <see cref="T:VC3.ComponentModel.BusinessObjectList"/>s.
            </summary>
        </member>
        <member name="P:VC3.ComponentModel.BusinessObject.BusinessObjectListReference`1.Object">
            <summary>
            The object that is being indirectly referenced
            </summary>
        </member>
        <member name="T:VC3.ComponentModel.BusinessObject.BusinessObjectReference`1">
            <summary>
            Keeps an indirect reference to a BusinessObject.  The object's lifetime
            is governed by its scope.
            </summary>
        </member>
        <member name="M:VC3.ComponentModel.BusinessObject.BusinessObjectReference`1.#ctor(System.String)">
            <summary>
            Builds a reference based on an object's string id
            </summary>
            <param name="id"></param>
        </member>
        <member name="M:VC3.ComponentModel.BusinessObject.BusinessObjectReference`1.#ctor(VC3.ComponentModel.BusinessObject.Identifier)">
            <summary>
            Use this constructor if possible, its a little faster.
            </summary>
            <param name="id"></param>
        </member>
        <member name="P:VC3.ComponentModel.BusinessObject.BusinessObjectReference`1.Object">
            <summary>
            Gets the BusinessObject
            </summary>
        </member>
        <member name="T:VC3.ComponentModel.ICache`2">
            <summary>
            Interface for a cache. The operations are designed to internalize thread
            synchronization.
            </summary>
            <typeparam name="TKey">The type of key used to uniquely identify objects in the cache</typeparam>
            <typeparam name="TValue">The type of object stored in the cache</typeparam>
        </member>
        <member name="M:VC3.ComponentModel.ICache`2.GetOrAdd(`0,VC3.ComponentModel.FactoryMethod{`1,`0})">
            <summary>
            Reads a value from the cache. If the value is not found, it will be
            created using the <paramref name="factory"/> and then added to the cache.
            If no factory is specified, a null value is returned if the item is not already in the cache.
            </summary>
        </member>
        <member name="M:VC3.ComponentModel.ICache`2.Remove(`0)">
            <summary>
            Ensures that an item has been removed from the cache.
            </summary>
        </member>
        <member name="M:VC3.ComponentModel.ICache`2.Reset">
            <summary>
            Removes all items from the cache.
            </summary>
        </member>
        <member name="T:VC3.ComponentModel.MultiThreadedCache`2">
            <summary>
            A thread-safe <see cref="T:VC3.ComponentModel.ICache`2"/> implementation.  Multiple readers
            will not block one another.  Write operations will block all readers and writers
            until completed.  <see cref="M:VC3.ComponentModel.MultiThreadedCache`2.Reset"/> will gracefully clear the cache.
            </summary>
        </member>
        <member name="M:VC3.ComponentModel.MultiThreadedCache`2.GetOrAdd(`0,VC3.ComponentModel.FactoryMethod{`1,`0})">
            <summary>
            Reads a value from the cache. If the value is not found, it will be
            created using the <paramref name="factory"/> and then added to the cache.
            If no factory is specified, a null value is returned if the item is not already in the cache.
            This method is thread safe and allows for concurrent cache reads. Keys will only be added
            to the cache exactly once (unless they are removed with <see cref="M:VC3.ComponentModel.MultiThreadedCache`2.Remove(`0)"/> or <see cref="M:VC3.ComponentModel.MultiThreadedCache`2.Reset"/>).
            </summary>
        </member>
        <member name="M:VC3.ComponentModel.MultiThreadedCache`2.Remove(`0)">
            <summary>
            Removes an item from the cache
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:VC3.ComponentModel.MultiThreadedCache`2.Reset">
            <summary>
            Removes all items from the cache. This operation is only
            visible to the current thread and future ones, or when in a web
            application, the current request and future requests.
            </summary>
        </member>
        <member name="T:VC3.ComponentModel.SingleThreadedCache`2">
            <summary>
            A kind of cache that assumes only one thread of execution will access it at a time.
            This assumption means that there is no locking overhead for cache read and write operations.
            </summary>
        </member>
        <member name="T:VC3.ComponentModel.PerThreadCache`2">
            <summary>
            A thread-safe ICache implementation. A seperate copy
            of the cache is kept per thread (or per request if in a web application).
            </summary>
        </member>
        <member name="M:VC3.ComponentModel.PerThreadCache`2.GetOrAdd(`0,VC3.ComponentModel.FactoryMethod{`1,`0})">
            <summary>
            Reads a value from the cache. If the value is not found, it will be
            created using the <paramref name="factory"/> and then added to the cache.
            If no factory is specified, a null value is returned if the item is not already in the cache.
            This method is thread safe and allows for concurrent cache reads. Keys will only be added
            to the cache exactly once (unless they are removed with <see cref="M:VC3.ComponentModel.PerThreadCache`2.Remove(`0)"/> or <see cref="M:VC3.ComponentModel.PerThreadCache`2.Reset"/>).
            </summary>
        </member>
        <member name="M:VC3.ComponentModel.PerThreadCache`2.Remove(`0)">
            <summary>
            Removes an item from the cache
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:VC3.ComponentModel.PerThreadCache`2.Reset">
            <summary>
            Removes all items from the cache. This operation is only
            visible to the current thread and future ones, or when in a web
            application, the current request and future requests.
            </summary>
        </member>
        <member name="T:VC3.Collections.EnumeratorFilter">
            <summary>
            Delegate for filtering an enumeration. Returns true
            if item should be included in the enumeration.
            </summary>
        </member>
        <member name="T:VC3.Collections.EnumeratorFilter`1">
            <summary>
            Delegate for filtering an enumeration. Returns true
            if item should be included in the enumeration.
            </summary>
        </member>
        <member name="T:VC3.Collections.FilteredEnumerator">
            <summary>
            transforms a another enumerator, filtering out certain items.
            </summary>
        </member>
        <member name="M:VC3.Collections.FilteredEnumerator.GetEnumerator">
            <summary>
            Returns an enumerator that will the underlying enumerator
            </summary>
            <returns></returns>
        </member>
        <member name="M:VC3.Collections.FilteredEnumerator.OnFilter(System.Int32,System.Object)">
            <summary>
            Determines if an item should be included in the enumeration.
            </summary>
            <param name="index">Position of the item to test</param>
            <param name="item">Item to test</param>
            <returns>True if item should be included in the enumeration</returns>
        </member>
        <member name="M:VC3.Collections.FilteredEnumerator.MoveNext">
            <summary>
            Moves to the next item in the filtered list
            </summary>
            <returns>True if currently on an item</returns>
        </member>
        <member name="M:VC3.Collections.FilteredEnumerator.Move(System.Int32)">
            <summary>
            Moves ahead in the enumeration
            </summary>
            <param name="count">Number of elements to move ahead</param>
            <returns>true if positioned on an element</returns>
        </member>
        <member name="P:VC3.Collections.FilteredEnumerator.Current">
            <summary>
            Gets the current item
            </summary>
        </member>
        <member name="T:VC3.Collections.RangeEnumerator">
            <summary>
            transforms a range of another enumerator
            </summary>
        </member>
        <member name="M:VC3.Collections.RangeEnumerator.#ctor(System.Collections.IEnumerable,System.Int32,System.Int32)">
            <summary>
            Creates an enumerator that will transform another list.
            </summary>
            <param name="list">List to enumerator</param>
            <param name="start">Index of first to return</param>
            <param name="count">Number of items to return</param>
        </member>
        <member name="M:VC3.Collections.RangeEnumerator.#ctor(System.Collections.IEnumerable,System.Int32)">
            <summary>
            Creates an enumerator that will transform another list.
            </summary>
            <param name="list">List to enumerator</param>
            <param name="start">Index of first to return</param>
        </member>
        <member name="M:VC3.Collections.RangeEnumerator.OnFilter(System.Int32,System.Object)">
            <summary>
            Filters the underlying enumeration
            </summary>
            <returns>True if index is in the range specified</returns>
        </member>
        <member name="T:VC3.Collections.Union">
            <summary>
            transforms a set of other enumerators
            </summary>
        </member>
        <member name="T:VC3.Collections.Union`1">
            <summary>
            transforms a set of other enumerators
            </summary>
        </member>
        <member name="T:VC3.Collections.SortedEnumerator">
            <summary>
            A sorted view of another IEnumerable
            </summary>
        </member>
        <member name="T:VC3.Collections.SortedEnumerator`1">
            <summary>
            A sorted view of another IEnumerable
            </summary>
        </member>
        <member name="M:VC3.Collections.SortedEnumerator`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.String)">
            <summary>
            A new sorted view of another enumerator
            </summary>
            <param name="list">The list to view in a sorted order</param>
            <param name="order">String, similar to a SQL order by clause, that will be applied to the object model to sort the data.
            Syntax: Property ([null] [asc|desc] | [asc|desc] [null])+ 
            Default sort direction is ascending.</param>
        </member>
        <member name="M:VC3.Collections.SortedEnumerator.#ctor(System.Collections.IEnumerable,System.String)">
            <summary>
            A new sorted view of another enumerator
            </summary>
            <param name="list">The list to view in a sorted order</param>
            <param name="order">String, similar to a SQL order by clause, that will be applied to the object model to sort the data.
            Syntax: Property ([null] [asc|desc] | [asc|desc] [null])+ 
            Default sort direction is ascending.</param>
        </member>
        <member name="T:VC3.Collections.GroupEnumerator`2">
            <summary>
            Groups items from another enumerator into groups
            </summary>
        </member>
        <member name="T:VC3.Collections.TypedEnumerable`1">
            <summary>
            Adapts an IEnumerable to an IEnumerable&lt;T&gt;
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:VC3.Collections.TypedComparer`1">
            <summary>
            Adapts an IComparer to an IComparer&lt;T&gt;
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:VC3.Collections.ConvertedEnumerable`2">
            <summary>
            Adapts an IEnumerable of <typeparamref name="TInput"/> to IEnumerable of <typeparamref name="TOutput"/>
            </summary>
        </member>
        <member name="M:VC3.Collections.Transform.Of``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Creates a view of this list
            </summary>
        </member>
        <member name="M:VC3.Collections.Transform.Of``1(System.Collections.IEnumerable)">
            <summary>
            Creates a view of this list and casts the untyped list to a typed one.
            </summary>
        </member>
        <member name="M:VC3.Collections.Transform`1.Append(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Appends to the enumerator
            </summary>
        </member>
        <member name="M:VC3.Collections.Transform`1.Append(System.Collections.IEnumerable)">
            <summary>
            Appends to the enumerator
            </summary>
        </member>
        <member name="M:VC3.Collections.Transform`1.Append(`0[])">
            <summary>
            Appends to the enumerator
            </summary>
        </member>
        <member name="M:VC3.Collections.Transform`1.Convert``1(System.Converter{`0,``0})">
            <summary>
            Converts each item in this enumerator into a set of new items of a different type
            </summary>
        </member>
        <member name="M:VC3.Collections.Transform`1.Sort(System.String)">
            <summary>
            Creates a sorted view of the list.
            Syntax: Property1 [null] [asc|desc] [null], Property2 [null] [asc|desc] [null], PropertyN [null] [asc|desc] [null]. 
            </summary>
        </member>
        <member name="M:VC3.Collections.Transform`1.Sort(System.Comparison{`0})">
            <summary>
            Creates a sorted view of the list
            </summary>
        </member>
        <member name="M:VC3.Collections.Transform`1.Sort(System.Collections.Generic.IComparer{`0})">
            <summary>
            Creates a sorted view of the list
            </summary>
        </member>
        <member name="M:VC3.Collections.Transform`1.Sort(System.Collections.Generic.IComparer{`0}[])">
            <summary>
            Creates a sorted view of the list
            </summary>
        </member>
        <member name="M:VC3.Collections.Transform`1.Group``1(System.Converter{`0,``0})">
            <summary>
            Puts items into groups based on the grouping function
            </summary>
            <typeparam name="TGroup">Type of the object that represents each group</typeparam>
            <param name="grouper">Delegate to determine which group to place an item into</param>
        </member>
        <member name="M:VC3.Collections.Transform`1.Range(System.Int32)">
            <summary>
            Includes all items on and after the start index
            </summary>
            <param name="start">Items at or after this index in the list are included</param>
        </member>
        <member name="M:VC3.Collections.Transform`1.Range(System.Int32,System.Int32)">
            <summary>
            Includes all items on and after the start index, up to a specified number
            </summary>
            <param name="start">Items at or after this index in the list are included</param>
            <param name="count">Maximum number of items to include</param>
        </member>
        <member name="M:VC3.Collections.Transform`1.Top(System.Int32)">
            <summary>
            Includes the first N items in the list
            </summary>
            <param name="count">Items at or after this index in the list are included</param>
        </member>
        <member name="M:VC3.Collections.Transform`1.Filter(VC3.Collections.EnumeratorFilter{`0})">
            <summary>
            Applies an arbitrary filter to the list
            </summary>
            <param name="filter">Items that match this condition are included</param>
        </member>
        <member name="M:VC3.Collections.Transform`1.Exists(VC3.Collections.EnumeratorFilter{`0})">
            <summary>
            Determines if the list is non-empty after applying an arbitrary filter
            </summary>
            <param name="filter">Items that match this condition are included</param>
        </member>
        <member name="M:VC3.Collections.Transform`1.Count">
            <summary>
            Returns the number of items in the enumeration.
            </summary>
            <returns>The number of items</returns>
        </member>
        <member name="M:VC3.Collections.Transform`1.Single">
            <summary>
            Returns a single item from the enumeration.  Throws an exception 
            if the enumeration does not contain exactly one item.
            </summary>
            <returns>The only item in the enumeration</returns>
        </member>
        <member name="M:VC3.Collections.Transform`1.SingleOrDefault">
            <summary>
            Returns a single item from the enumeration or its default 
            if the list is empty.  Throws an exception if the enumeration 
            contains more than one item.
            </summary>
            <returns>The only item in the enumeration, or a default value</returns>
        </member>
        <member name="M:VC3.Collections.Transform`1.Into(System.Collections.IList)">
            <summary>
            Appends the items in the enumeration to the list
            </summary>
            <param name="target">List to append items to</param>
        </member>
        <member name="T:VC3.Collections.Grouping`2">
            <summary>
            Represents a group of items
            </summary>
            <typeparam name="TGroup">Type of object that identifies the group</typeparam>
            <typeparam name="TItem">Type of each item in the group</typeparam>
        </member>
        <member name="P:VC3.Collections.Grouping`2.FirstItem">
            <summary>
            Gets a sample of one of the items from the list
            </summary>
        </member>
        <member name="T:VC3.Collections.FixedStringDictionary">
            <summary>
            This class extends the functionality of the <see cref="T:VC3.Collections.SafeStringDictionary"/>
            by allowing users to modify values associated with keys that are already in
            the dictionary. The keys themselves, however, cannot be modifed, added, or deleted.
            </summary>
            <remarks>
            Classes that inherit the <see cref="T:VC3.Collections.FixedStringDictionary"/> abstract class should
            maintain the collection of items in the dictionary using the
            protected <b>Add</b>, <b>Remove</b>, <b>SetItem</b>, and <b>Clear</b> methods. Using
            the <b>SetItem</b> method rather than the default indexer to set items guarantees that
            an undefined key will not raise an error but will, instead, automatically create a new
            dictionary entry.
            </remarks>
        </member>
        <member name="T:VC3.Collections.SafeStringDictionary">
            <summary>
            Provides read-only access to a <see cref="T:System.Collections.Specialized.StringDictionary"/>
            object.
            </summary>
            <remarks>
            Classes that inherit the <see cref="T:VC3.Collections.SafeStringDictionary"/> abstract class should
            maintain the collection of items in the dictionary using the
            protected <b>Add</b>, <b>Remove</b>, <b>SetItem</b>, and <b>Clear</b> methods.
            </remarks>
        </member>
        <member name="M:VC3.Collections.SafeStringDictionary.#ctor">
            <summary>
            Initializes a new instance of the SafeStringDictionary class.
            </summary>
        </member>
        <member name="M:VC3.Collections.SafeStringDictionary.Add(System.String,System.String)">
            <summary>
            <p>Adds an entry with the specified key and value
            into the <see cref="T:VC3.Collections.SafeStringDictionary"/></p>.
            </summary>
            <param name="key">The key of the entry to add.</param>
            <param name="value">The value of the entry to add.</param>
            <exception cref="T:System.ArgumentNullException">
            The key is a null reference (<b>Nothing</b> in Visual Basic. 
            </exception>
            <exception cref="T:System.ArgumentException">
            An entry with the same key already exists in the <see cref="T:VC3.Collections.SafeStringDictionary"/>
            </exception>
            <remarks><p><font color="red">[This method can only be called from an
            inheriting class.]</font></p><p>The key is handled in a case-insensitive manner; it will be translated
            to lower case before it is added to the safe string dictionary.</p></remarks>
        </member>
        <member name="M:VC3.Collections.SafeStringDictionary.Clear">
            <summary>
            <p>Clears all items from the <see cref="T:VC3.Collections.SafeStringDictionary"/></p>
            </summary>
            <remarks><p><font color="red">[This method can only be called from an
            inheriting class.]</font></p></remarks>
        </member>
        <member name="M:VC3.Collections.SafeStringDictionary.ContainsKey(System.String)">
            <summary>
            Determines if the <b>SafeStringDictionary</b> contains a
            specific key.
            </summary>
            <param name="key">The key to locate in the <see cref="T:VC3.Collections.SafeStringDictionary"/>.</param>
            <returns><b>true</b> if the <see cref="T:VC3.Collections.SafeStringDictionary"/> contains an entry
            with the specified key; otherwise, <b>false</b>.</returns>
            <remarks>The key is handled in a case-insensitive manner; it will be translated
            to lower case before it is used.</remarks>
            <exception cref="T:System.ArgumentNullException">The key is a null
            reference (<b>Nothing</b> in Visual Basic).</exception>
        </member>
        <member name="M:VC3.Collections.SafeStringDictionary.ContainsValue(System.String)">
            <summary>
            Determines if the <b>SafeStringDictionary</b> contains a
            specific value.
            </summary>
            <param name="value">The value to locate in the <see cref="T:VC3.Collections.SafeStringDictionary"/>.</param>
            <returns><b>true</b> if the <see cref="T:VC3.Collections.SafeStringDictionary"/> contains an entry
            with the specified value; otherwise, <b>false</b>.</returns>
            <remarks>The values of the elements of the <see cref="T:VC3.Collections.SafeStringDictionary"/>
            are compared to the specified value using the Object.Equals() method.
            This method uses a linear search; therefore, the average execution
            time is proportional to the size of the <see cref="T:VC3.Collections.SafeStringDictionary"/>
            </remarks>
        </member>
        <member name="M:VC3.Collections.SafeStringDictionary.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the string dictionary values to a one-dimensional <see cref="T:System.Array"/>
            instance at the specified index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is
            the destination of the values copied from the <see cref="T:VC3.Collections.SafeStringDictionary"/>.</param>
            <param name="index">The index in the array where copying begins</param>
            <exception cref="T:System.ArgumentException">The array is multidimensional, or
            the number of elements in the <b>Hashtable</b> is greater than the
            available space between the index and the end of the array.</exception>
            <exception cref="T:System.ArgumentNullException">The array is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The index is less than
            the array's lower bound.</exception>
            <remarks><p><b>CopyTo</b> only copies the values in the <see cref="T:VC3.Collections.SafeStringDictionary"/>,
            not the keys.</p><p>The elements copied to the <see cref="T:System.Array"/> are
            sorted in the same order that the enumerator iterates through the
            <see cref="T:VC3.Collections.SafeStringDictionary"/>.</p></remarks>
        </member>
        <member name="M:VC3.Collections.SafeStringDictionary.GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through the <see cref="T:VC3.Collections.SafeStringDictionary"/>
            </summary>
            <returns>An <see cref="T:System.Collections.IEnumerator"/> that can iterate through the
            <see cref="T:VC3.Collections.SafeStringDictionary"/>.
            </returns>
        </member>
        <member name="M:VC3.Collections.SafeStringDictionary.Remove(System.String)">
            <summary>
            <p>Removes the entry with the specified
            key from the SafeStringDictionary.</p>
            </summary>
            <remarks><p><font color="red">[This method can only be called from an
            inheriting class.]</font></p><p>The key is handled in a case-insensitive manner; it will
            be translated to lower case before it is used to find the entry
            to remove from the <see cref="T:VC3.Collections.SafeStringDictionary"/>.</p></remarks>
            <param name="key">The key of the entry to remove.</param>
            <exception cref="T:System.ArgumentNullException">The key is a null
            reference (<b>Nothing</b> in Visual Basic.</exception>
        </member>
        <member name="M:VC3.Collections.SafeStringDictionary.SetItem(System.String,System.String)">
            <summary>
            Sets the value associated with the specified key.
            </summary>
            <param name="key">The key whose value to set.</param>
            <param name="value">The value of the entry to set.</param>
            <remarks><p><font color="red">[This method can only be called from an
            inheriting class.]</font></p><p>The key is handled in a case-insensitive manner; it will
            be translated to lower case before it is used.</p></remarks>
        </member>
        <member name="P:VC3.Collections.SafeStringDictionary.Count">
            <summary>
            Gets the number of key-and-value pairs in the <see cref="T:VC3.Collections.SafeStringDictionary"/>.
            </summary>
            <value>The number of key-and-value pairs in the <see cref="T:VC3.Collections.SafeStringDictionary"/>.</value>
        </member>
        <member name="P:VC3.Collections.SafeStringDictionary.IsSynchronized">
            <summary>
            Gets a value that indicates whether access to the <see cref="T:VC3.Collections.SafeStringDictionary"/>
            is synchronized (thread-safe).
            </summary>
            <value><b>true</b> if access to the <see cref="T:VC3.Collections.SafeStringDictionary"/>
            is synchronized (thread-safe); otherwise, <b>false</b>.</value>
            <remarks>A <see cref="T:VC3.Collections.SafeStringDictionary"/> instance is not
            synchronized.</remarks>
        </member>
        <member name="P:VC3.Collections.SafeStringDictionary.Item(System.String)">
            <summary>
            Gets the value associated with the specified key. In C#,
            this property is the indexer for the <see cref="T:VC3.Collections.SafeStringDictionary"/>
            class.
            </summary>
            <value>The value associated with the specified key. If the
            specified key is not found, <b>Get</b> returns a null reference
            (<b>Nothing</b> in Visual Basic.</value>
            <remarks>The key is handled in a case-insensitive manner; it will
            be translated to lower case before it is used.</remarks>
        </member>
        <member name="P:VC3.Collections.SafeStringDictionary.Keys">
            <summary>
            Gets a collection of keys in the <see cref="T:VC3.Collections.SafeStringDictionary"/>.
            </summary>
            <value>An <see cref="T:System.Collections.ICollection"/> that provides the keys
            in the <see cref="T:VC3.Collections.SafeStringDictionary"/>.</value>
            <remarks><p>The order of the keys in the <see cref="T:System.Collections.ICollection"/>
            is unspecified, but it in the same order as the associated values in the
            <b>ICollection</b> returned by the <see cref="P:VC3.Collections.SafeStringDictionary.Values"/> method.</p>
            <p>Changes to the <see cref="T:VC3.Collections.SafeStringDictionary"/> will continue
            the be reflected in the returned <see cref="T:System.Collections.ICollection"/>. It is not a static copy.</p></remarks>
        </member>
        <member name="P:VC3.Collections.SafeStringDictionary.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the
            <see cref="T:VC3.Collections.SafeStringDictionary"/>.
            </summary>
            <value>An <see cref="T:System.Object"/> that can be used to synchronize access
            to the <see cref="T:VC3.Collections.SafeStringDictionary"/>.</value>
        </member>
        <member name="P:VC3.Collections.SafeStringDictionary.Values">
            <summary>
            Gets a collection of values in the <see cref="T:VC3.Collections.SafeStringDictionary"/>.
            </summary>
            <value>An <see cref="T:System.Collections.ICollection"/> that provides the values
            in the <see cref="T:VC3.Collections.SafeStringDictionary"/>.</value>
            <remarks><p>The order of the values in the <see cref="T:System.Collections.ICollection"/>
            is unspecified, but it in the same order as the associated values in the
            <b>ICollection</b> returned by the <see cref="P:VC3.Collections.SafeStringDictionary.Values"/> method.</p>
            <p>Changes to the <see cref="T:VC3.Collections.SafeStringDictionary"/> will continue
            the be reflected in the returned <see cref="T:System.Collections.ICollection"/>. It is not a static copy.</p></remarks>
        </member>
        <member name="P:VC3.Collections.FixedStringDictionary.Item(System.String)">
            <summary>
            Gets the value associated with a particular key, or sets the value of a
            specific key, given that the key already exists in the dictionary.
            </summary>
            <value>The value associated with the specified key. If the
            specified key is not found, <b>Get</b> returns a null reference
            (<b>Nothing</b> in Visual Basic.</value>
            <remarks>
            If an attempt to reference a key that does not already exist in the dictionary is made,
            an <see cref="T:VC3.Collections.InvalidKeyException"/> exception will be thrown.
            </remarks>
        </member>
        <member name="T:VC3.Collections.InvalidKeyException">
            <summary>
            The <b>InvalidKeyException</b> exception class is thrown when a user attempts to
            reference, modify, or add a key in a <see cref="T:VC3.Collections.FixedStringDictionary"/> that has
            not already been created.
            </summary>
        </member>
        <member name="T:VC3.Util.ReflectionUtil">
            <summary>
            Utility class to simplify various reflection operations
            </summary>
        </member>
        <member name="F:VC3.Util.ReflectionUtil.PublicConstructor">
            <summary>
            Binding that matches all public constructors
            </summary>
        </member>
        <member name="F:VC3.Util.ReflectionUtil.NonPublicConstructor">
            <summary>
            Binding that matches all protected, internal, protected internal, and private constructors
            </summary>
        </member>
        <member name="F:VC3.Util.ReflectionUtil.AnyConstructor">
            <summary>
            Binding that matches all constructors
            </summary>
        </member>
        <member name="M:VC3.Util.ReflectionUtil.AssertIsTypeOf(System.Type,System.Type)">
            <summary>
            Throws an <see cref="T:System.InvalidCastException"/> if
            an instance of type a cannot be cast to type b.
            </summary>
            <param name="a">Class to test</param>
            <param name="b">Type a should be assignable to</param>
        </member>
        <member name="M:VC3.Util.ReflectionUtil.GetConstructor(System.Type,System.Type[])">
            <summary>
            Finds a constructor for <paramref name="objectType"/>.
            Returns only a <see cref="F:VC3.Util.ReflectionUtil.PublicConstructor"/>.
            Throws a <see cref="T:System.MemberAccessException"/> if the constructor is not found.		
            </summary>
            <param name="objectType">Class to search for its constructor</param>
            <param name="ctorSig">The signature of the constructor</param>
            <returns>Constructor info that can be used to invoke the constructor later</returns>
        </member>
        <member name="M:VC3.Util.ReflectionUtil.GetConstructor(System.Type,System.Reflection.BindingFlags,System.Type[])">
            <summary>
            Finds a constructor for <paramref name="objectType"/>.
            Throws a <see cref="T:System.MemberAccessException"/> if the constructor is not found.		
            </summary>
            <param name="objectType">Class to search for its constructor</param>
            <param name="ctorSig">The signature of the constructor</param>
            <returns>Constructor info that can be used to invoke the constructor later</returns>
        </member>
        <member name="M:VC3.Util.ReflectionUtil.GetConstructor(System.Type,System.Boolean,System.Type[])">
            <summary>
            Finds a constructor for <paramref name="objectType"/>.
            Returns only a <see cref="F:VC3.Util.ReflectionUtil.PublicConstructor"/>.
            </summary>
            <param name="objectType">Class to search for its constructor</param>
            <param name="throwOnError">If the constructor cannot be found, an exception will be thrown if the 
            parameter is true, and null will be returned if its false</param>
            <param name="ctorSig">The signature of the constructor</param>
            <returns>Constructor info that can be used to invoke the constructor later</returns>
        </member>
        <member name="M:VC3.Util.ReflectionUtil.GetConstructor(System.Type,System.Reflection.BindingFlags,System.Boolean,System.Type[])">
            <summary>
            Finds a constructor for <paramref name="objectType"/>
            </summary>
            <param name="objectType">Class to search for its constructor</param>
            <param name="bindingFlags"><see cref="T:System.Reflection.BindingFlags"/> to use.</param>
            <param name="throwOnError">If the constructor cannot be found, an exception will be thrown if the 
            parameter is true, and null will be returned if its false</param>
            <param name="ctorSig">The signature of the constructor</param>
            <returns>Constructor info that can be used to invoke the constructor later</returns>
        </member>
        <member name="M:VC3.Util.ReflectionUtil.CreateObject(System.String,System.Object[])">
            <summary>
            Creates a new instance of an object of the specified type.
            Uses only a <see cref="F:VC3.Util.ReflectionUtil.PublicConstructor"/>.
            Throws a <see cref="T:System.MemberAccessException"/> if the type or constructor is not found.
            Throws an error if the type cannot be found.
            </summary>
            <param name="objectType">The name of type of object to create</param>
            <param name="ctorArgs">The arguments to pass to the constructor</param>
            <returns>A new object, or null if the constructor isn't found</returns>
        </member>
        <member name="M:VC3.Util.ReflectionUtil.CreateObject``1(System.String,System.Object[])">
            <summary>
            Creates a new instance of an object of the specified type.
            Uses only a <see cref="F:VC3.Util.ReflectionUtil.PublicConstructor"/>.
            Throws a <see cref="T:System.MemberAccessException"/> if the type or constructor is not found.
            Throws an error if the type cannot be found or if the type identified by the string is not
            T or a subclass of T.
            </summary>
            <param name="objectType">The name of type of object to create</param>
            <param name="ctorArgs">The arguments to pass to the constructor</param>
            <returns>A new object, or null if the constructor isn't found</returns>
        </member>
        <member name="M:VC3.Util.ReflectionUtil.CreateObject``1(System.Object[])">
            <summary>
            Creates a new instance of an object of the specified type.
            Uses only a <see cref="F:VC3.Util.ReflectionUtil.PublicConstructor"/>.
            Throws a <see cref="T:System.MemberAccessException"/> if the type or constructor is not found.
            Throws an error if the type cannot be found or if the type identified by the string is not
            T or a subclass of T.
            </summary>
            <param name="ctorArgs">The arguments to pass to the constructor</param>
            <returns>A new object, or null if the constructor isn't found</returns>
        </member>
        <member name="M:VC3.Util.ReflectionUtil.CreateObject(System.Type,System.Object[])">
            <summary>
            Creates a new instance of an object of the specifiedtype.
            Uses only a <see cref="F:VC3.Util.ReflectionUtil.PublicConstructor"/>.
            Throws a <see cref="T:System.MemberAccessException"/> if the constructor is not found.
            </summary>
            <param name="objectType">The type of object to create</param>
            <param name="ctorArgs">The arguments to pass to the constructor</param>
            <returns>A new object, or null if the constructor isn't found</returns>
        </member>
        <member name="M:VC3.Util.ReflectionUtil.CreateObject``1(System.Type,System.Object[])">
            <summary>
            Creates a new instance of an object of the specifiedtype.
            Uses only a <see cref="F:VC3.Util.ReflectionUtil.PublicConstructor"/>.
            Throws a <see cref="T:System.MemberAccessException"/> if the constructor is not found.
            </summary>
            <param name="objectType">The type of object to create</param>
            <param name="ctorArgs">The arguments to pass to the constructor</param>
            <returns>A new object, or null if the constructor isn't found</returns>
        </member>
        <member name="M:VC3.Util.ReflectionUtil.CreateObject(System.String,System.Reflection.BindingFlags,System.Object[])">
            <summary>
            Creates a new instance of an object of the specifiedtype.
            Throws a <see cref="T:System.MemberAccessException"/> if the constructor is not found.
            Throws an error if the type cannot be found.
            </summary>
            <param name="objectType">The name of the type object to create</param>
            <param name="bindingFlags"><see cref="T:System.Reflection.BindingFlags"/> to use.</param>
            <param name="ctorArgs">The arguments to pass to the constructor</param>
            <returns>A new object, or null if the constructor isn't found</returns>
        </member>
        <member name="M:VC3.Util.ReflectionUtil.CreateObject(System.Type,System.Reflection.BindingFlags,System.Object[])">
            <summary>
            Creates a new instance of an object of the specifiedtype.
            Throws a <see cref="T:System.MemberAccessException"/> if the constructor is not found.
            </summary>
            <param name="objectType">The name of the type of object to create</param>
            <param name="bindingFlags"><see cref="T:System.Reflection.BindingFlags"/> to use.</param>
            <param name="ctorArgs">The arguments to pass to the constructor</param>
            <returns>A new object, or null if the constructor isn't found</returns>
        </member>
        <member name="M:VC3.Util.ReflectionUtil.CreateObject(System.String,System.Boolean,System.Object[])">
            <summary>
            Creates a new instance of an object of the specifiedtype.
            Uses only a <see cref="F:VC3.Util.ReflectionUtil.PublicConstructor"/>. 
            Throws an error if the type cannot be found.
            </summary>
            <param name="objectType">The name of the type of object to create</param>
            <param name="throwOnError">If the constructor cannot be found, an exception will be thrown if the 
            parameter is true, and null will be returned if its false</param>
            <param name="ctorArgs">The arguments to pass to the constructor</param>
            <returns>A new object, or null if the constructor isn't found</returns>
        </member>
        <member name="M:VC3.Util.ReflectionUtil.CreateObject(System.Type,System.Boolean,System.Object[])">
            <summary>
            Creates a new instance of an object of the specifiedtype.
            Uses only a <see cref="F:VC3.Util.ReflectionUtil.PublicConstructor"/>.
            </summary>
            <param name="objectType">The type of object to create</param>
            <param name="throwOnError">If the constructor cannot be found, an exception will be thrown if the 
            parameter is true, and null will be returned if its false</param>
            <param name="ctorArgs">The arguments to pass to the constructor</param>
            <returns>A new object, or null if the constructor isn't found</returns>
        </member>
        <member name="M:VC3.Util.ReflectionUtil.CreateObject(System.String,System.Reflection.BindingFlags,System.Boolean,System.Object[])">
            <summary>
            Creates a new instance of an object of the specified
            type. Throws an error if the type cannot be found. Returns null if the specified constructor cannot be
            found
            </summary>
            <param name="objectType">The name of the type of object to create</param>
            <param name="bindingFlags"><see cref="T:System.Reflection.BindingFlags"/> to use.</param>
            <param name="throwOnError">If the constructor cannot be found, an exception will be thrown if the 
            parameter is true, and null will be returned if its false</param>
            <param name="ctorArgs">The arguments to pass to the constructor</param>
            <returns>A new object, or null if the constructor isn't found</returns>
        </member>
        <member name="M:VC3.Util.ReflectionUtil.CreateObject(System.Type,System.Reflection.BindingFlags,System.Boolean,System.Object[])">
            <summary>
            Creates a new instance of an object of the specified
            type.  Returns null if the specified constructor cannot be
            found
            </summary>
            <param name="objectType">The type of object to create</param>
            <param name="bindingFlags"><see cref="T:System.Reflection.BindingFlags"/> to use.</param>
            <param name="throwOnError">If the constructor cannot be found, an exception will be thrown if the 
            parameter is true, and null will be returned if its false</param>
            <param name="ctorArgs">The arguments to pass to the constructor</param>
            <returns>A new object, or null if the constructor isn't found</returns>
        </member>
        <member name="M:VC3.Util.ReflectionUtil.TryCast``2(``0,``1@)">
            <summary>
            Casts an object to a target type. Used to simplify type casting
            and error handling.
            </summary>
            <example><![CDATA[
            	IEntryPoint ep;
            
            	if (!ReflectionUtil.TryCast(EntryPoint.GetEntryPoint(targetPageType, TargetEntryPoint), out ep))
            		throw new ArgumentException("Entry point must implement IEntryPoint");
            ]]>
            </example>
            <typeparam name="TTo">Target type to cast to</typeparam>
            <typeparam name="TFrom">Type of object to cast from</typeparam>
            <param name="from">Object to cast</param>
            <param name="to">Object to cast</param>
            <returns></returns>
        </member>
        <member name="M:VC3.Util.ReflectionUtil.GetTypes(System.Predicate{System.Type})">
            <summary>
            Gets all available types that match the specified condition.
            </summary>
            <param name="isMatch">Delegate to restrict the types are are returned.  If null, all types are returned</param>
            <returns>Set of matching types</returns>
        </member>
        <member name="M:VC3.Util.ReflectionUtil.GetTypes(System.Predicate{System.Type},System.Boolean)">
            <summary>
            Gets all available types that match the specified condition.
            </summary>
            <param name="isMatch">Delegate to restrict the types are are returned.  If null, all types are returned</param>
            <returns>Set of matching types</returns>
        </member>
        <member name="M:VC3.Util.ReflectionUtil.ForceLoadAssemblies">
            <summary>
            Forces all assemblies in the same directory as this one to be
            loaded so that their metadata is available
            </summary>
        </member>
        <member name="M:VC3.Util.ReflectionUtil.RunStaticConstructors(System.Predicate{System.Type})">
            <summary>
            Ensures that the static constructor for a set of classes are run.  If the 
            static constructor throws an exception, it will NOT be returned.
            However, when that type is later referenced, the exception will be thrown.
            </summary>
            <param name="typeFilter">Filter</param>
        </member>
        <member name="T:VC3.Util.MathUtil">
            <summary>
            Utility class to simplify various mathematical operations
            </summary>
        </member>
        <member name="M:VC3.Util.MathUtil.Bitcount(System.Int32)">
            <summary>
            Returns a count of the number of true bits given a specific bitmap.
            </summary>
            <remarks>This function is useful in determining the number of flags that
            have been set using a flags enumeration.
            An example of usage can be seen
            in the VC3.Security.Util.RandomPasswordGen class.
            </remarks>
            <param name="bitmap">The bitmap that needs to be counted.</param>
            <returns>The count of true bits in the bitmap.</returns>
        </member>
        <member name="T:VC3.Util.Lazy`1">
            <summary>
            Helps manage a lazy initialized value.  This is useful to prevent
            double initialization when null is a valid value.
            </summary>
        </member>
        <member name="T:VC3.Security.Authorization.ITask">
            <summary>
            Interface for a particular task that can be performed.  The ability
            to perform the task can be granted to or revoked from users. 
            </summary>
        </member>
        <member name="T:VC3.Security.Authorization.IRole">
            <summary>
            Defines the methods nece
            </summary>
        </member>
        <member name="T:VC3.Security.Authorization.SecurityTask">
            <summary>
            Base class for <see cref="T:VC3.ComponentModel.BusinessObject"/> classes that represent tasks
            with unique integer ids.
            </summary>
        </member>
        <member name="M:VC3.Security.Authorization.SecurityTask.#ctor">
            <summary>
            Creates a new SecurityTask.
            </summary>
        </member>
        <member name="M:VC3.Security.Authorization.SecurityTask.#ctor(System.Int32)">
            <summary>
            An existing SecurityTask that will be automatically initialized as needed
            </summary>
        </member>
        <member name="M:VC3.Security.Authorization.SecurityTask.GetForAdd(System.Type)">
            <summary>
            Gets the <see cref="T:VC3.Security.Authorization.SecurityTask"/> for the specified target type
            that is flagged as an Add task.
            </summary>
            <param name="type">The target target to find the task for</param>
            <returns>The Add task</returns>
        </member>
        <member name="M:VC3.Security.Authorization.SecurityTask.GetForEdit(System.Type)">
            <summary>
            Gets the <see cref="T:VC3.Security.Authorization.SecurityTask"/> for the specified target type
            that is flagged as an Edit task.
            </summary>
            <param name="type">The target target to find the task for</param>
            <returns>The Edit task</returns>
        </member>
        <member name="M:VC3.Security.Authorization.SecurityTask.GetForDelete(System.Type)">
            <summary>
            Gets the <see cref="T:VC3.Security.Authorization.SecurityTask"/> for the specified target type
            that is flagged as an Delete task.
            </summary>
            <param name="type">The target target to find the task for</param>
            <returns>The Delete task</returns>
        </member>
        <member name="M:VC3.Security.Authorization.SecurityTask.ToString">
            <summary>
            Overriden to return the name of the task.
            </summary>
            <returns>The task name</returns>
        </member>
        <member name="M:VC3.Security.Authorization.SecurityTask.Start(System.String)">
            <summary>
            Starts a task without a target instance.  The current <see cref="T:VC3.Security.Authorization.SecurityTask"/>
            will be used as a surrogate instance to enable auditing to function properly.
            The task will be automatically logged when <see cref="M:VC3.ComponentModel.IActivity.Complete"/>
            is called on the returned auditor.
            </summary>
            <param name="description">The description of the task that is being performed</param>
            <returns>The new <see cref="T:VC3.Security.Authorization.SecurityTaskAuditor"/></returns>
        </member>
        <member name="M:VC3.Security.Authorization.SecurityTask.Start(VC3.ComponentModel.BusinessObject)">
            <summary>
            Starts a task with a target instance but no description.  <see cref="M:VC3.ComponentModel.BusinessObject.ToString"/>
            will be called on the instance to create the description. The task will be
            automatically logged when <see cref="M:VC3.ComponentModel.BusinessObject.CommitChanges"/> is called
            on the specified instance.
            </summary>
            <param name="instance">The <see cref="T:VC3.ComponentModel.BusinessObject"/> the task will be performed on</param>
            <returns>The new <see cref="T:VC3.Security.Authorization.SecurityTaskAuditor"/></returns>
        </member>
        <member name="M:VC3.Security.Authorization.SecurityTask.Start(VC3.ComponentModel.BusinessObject,VC3.Security.Authorization.AuditorLoggingMode)">
            <summary>
            Starts a task with a target instance but no description.  <see cref="M:VC3.ComponentModel.BusinessObject.ToString"/>
            will be called on the instance to create the description. 
            </summary>
            <param name="instance">The <see cref="T:VC3.ComponentModel.BusinessObject"/> the task will be performed on</param>
            <param name="mode">
            Indicates whether the task should be logged when <see cref="M:VC3.ComponentModel.BusinessObject.CommitChanges"/>
            is called on the target instance, or when <see cref="M:VC3.ComponentModel.IActivity.Complete"/> is called
            on the auditor.
            </param>
            <returns>The new <see cref="T:VC3.Security.Authorization.SecurityTaskAuditor"/></returns>
        </member>
        <member name="M:VC3.Security.Authorization.SecurityTask.Start(VC3.ComponentModel.BusinessObject,System.String,VC3.Security.Authorization.AuditorLoggingMode)">
            <summary>
            Combines a new <see cref="T:VC3.Security.Authorization.SecurityTaskAuditor"/> for the current task
            and specified instance to audit changes that occur during the
            completion of the task, with a <see cref="T:VC3.ComponentModel.TransactedActivity"/>,
            to ensure the task and auditing are transacted together.
            </summary>
            <param name="instance">The <see cref="T:VC3.ComponentModel.BusinessObject"/> the task will be performed on</param>
            <param name="description">The description of the task that is being performed</param>
            <param name="mode">
            Indicates whether the task should be logged when <see cref="M:VC3.ComponentModel.BusinessObject.CommitChanges"/>
            is called on the target instance, or when <see cref="M:VC3.ComponentModel.IActivity.Complete"/> is called
            on the auditor.
            </param>
            <returns>The new <see cref="T:VC3.Security.Authorization.SecurityTaskAuditor"/></returns>
        </member>
        <member name="M:VC3.Security.Authorization.SecurityTask.op_Implicit(VC3.Security.Authorization.SecurityTask)~VC3.ComponentModel.Permission">
            <summary>
            Enables <see cref="T:VC3.Security.Authorization.SecurityTask"/> instances to be cast into
            a corresponding <see cref="T:VC3.ComponentModel.SecurityPermission"/>.
            </summary>
            <param name="t">The <see cref="T:VC3.Security.Authorization.SecurityTask"/> to convert</param>
            <returns>The corresponding <see cref="T:VC3.ComponentModel.SecurityPermission"/></returns>
        </member>
        <member name="P:VC3.Security.Authorization.SecurityTask.Id">
            <summary>
            Gets the numeric id of the task.
            </summary>
        </member>
        <member name="P:VC3.Security.Authorization.SecurityTask.Name">
            <summary>
            Gets the name of the task.
            </summary>
        </member>
        <member name="P:VC3.Security.Authorization.SecurityTask.TargetType">
            <summary>
            Gets or sets the target <see cref="T:System.Type"/> the task operates on.
            </summary>
        </member>
        <member name="P:VC3.Security.Authorization.SecurityTask.IsAllowed">
            <summary>
            Indicates whether the current user has permission to globally
            perform the current task.
            </summary>
        </member>
        <member name="P:VC3.Security.Authorization.SecurityTask.ForAdd">
            <summary>
            Indicates whether the task represents an Add operation for the target type.
            </summary>
        </member>
        <member name="P:VC3.Security.Authorization.SecurityTask.ForEdit">
            <summary>
            Indicates whether the task represents an Edit operation for the target type.
            </summary>
        </member>
        <member name="P:VC3.Security.Authorization.SecurityTask.ForDelete">
            <summary>
            Indicates whether the task represents a Delete operation for the target type.
            </summary>
        </member>
        <member name="P:VC3.Security.Authorization.SecurityTask.VC3#Security#Authorization#IRole#Tasks">
            <summary>
            Gets the bit array representation of the current task.
            </summary>
        </member>
        <member name="F:VC3.Security.Authorization.AuditorLoggingMode.LogWhenCompleted">
            <summary>
            Indicates that a task being audited using a <see cref="T:VC3.Security.Authorization.SecurityTaskAuditor"/>
            should be logged when <see cref="M:VC3.ComponentModel.IActivity.Complete"/> is called
            on the auditor.
            </summary>
        </member>
        <member name="F:VC3.Security.Authorization.AuditorLoggingMode.LogWhenCommitted">
            <summary>
            Indicates that a task being audited using a <see cref="T:VC3.Security.Authorization.SecurityTaskAuditor"/>
            should be logged when <see cref="M:VC3.ComponentModel.BusinessObject.CommitChanges"/> is called
            on the instance being audited.
            </summary>
        </member>
        <member name="T:VC3.Security.Authorization.SecurityTaskAuditor">
            <summary>
            Tracks changes that occur while performing a task and either records
            an audit log entry when the task is completed, or sends an error notification
            if the task is aborted.
            </summary>
        </member>
        <member name="T:VC3.ComponentModel.BusinessObjectAuditor">
             <summary>
             Implements <see cref="T:VC3.ComponentModel.IAuditor"/> to enable the simplified automatic
             auditing of changes to <see cref="T:VC3.ComponentModel.BusinessObject"/> subclasses.
             </summary>
             <example>
             Creates an XML representation of audited changes via ToXml() using the
             following structure:
             
             <object id="BusinessObject.Identifier.ToString()" description="BusinessObject.ToString()">
            
            		<!-- Simple property changes -->
            		<property name="PropertyReflector.Label" from="PropertyReflector.Converter.ToString(OldValue)" to="PropertyReflector.Converter.ToString(NewValue)"/>	
            
            		<!-- Changes to properties for child objects -->
            		<property name="">
            			<object id="" description="">
            				<property name="" from="" to=""/>
            			</object>
            		</property>
            
            		<!-- Additions and removals from child lists -->
            		<property name="">
            			<list>
            				<add>
            					<object/>
            				</add>
            				<remove>
            					<object/>
            				</remove>
            			</list>
            		</property>
            	
            	</object>
            	
             </example>
        </member>
        <member name="T:VC3.ComponentModel.IAuditor">
            <summary>
            Defines the functionality required to audit changes in objects
            and expose those changes for review or audit logging.
            </summary>
        </member>
        <member name="M:VC3.ComponentModel.IAuditor.ToXml">
            <summary>
            Converts the current audited change history into an XML representation.
            </summary>
            <returns>A <see cref="T:System.String"/> containing the XML change history</returns>
        </member>
        <member name="P:VC3.ComponentModel.IAuditor.Changes">
            <summary>
            Gets an array of <see cref="T:VC3.ComponentModel.ChangeRecord"/> instances, indicating
            the sequential changes that have occurred in the current audit graph.
            </summary>
        </member>
        <member name="M:VC3.ComponentModel.BusinessObjectAuditor.#ctor(VC3.ComponentModel.BusinessObject)">
            <summary>
            Creates an new <see cref="T:VC3.ComponentModel.BusinessObjectAuditor"/> to monitor changes
            in the specified <see cref="T:VC3.ComponentModel.BusinessObject"/>.
            </summary>
            <param name="instance">The <see cref="T:VC3.ComponentModel.BusinessObject"/> instance to audit</param>
        </member>
        <member name="M:VC3.ComponentModel.BusinessObjectAuditor.OnCommit">
            <summary>
            Invoked during the commit process to allow subclasses
            to perform auditing when the instance is committed.
            </summary>
        </member>
        <member name="M:VC3.ComponentModel.BusinessObjectAuditor.OnDelete">
            <summary>
            Invoked by the AfterDelete event to allow subclasses
            to perform auditing when the instance is deleted.
            </summary>
        </member>
        <member name="M:VC3.ComponentModel.BusinessObjectAuditor.ToString">
            <summary>
            Converts the audited change history into an XML string representation.
            </summary>
            <returns>The XML audit history</returns>
        </member>
        <member name="M:VC3.ComponentModel.BusinessObjectAuditor.CreateChildAuditors">
            <summary>
            Creates <see cref="T:VC3.ComponentModel.BusinessObjectAuditor"/> and
            <see cref="T:VC3.ComponentModel.BusinessObjectListAuditor"/> instances to track all
            audited <see cref="T:VC3.ComponentModel.BusinessObject"/> and <see cref="T:VC3.ComponentModel.BusinessObjectList"/>
            properties for the current instance.
            </summary>
        </member>
        <member name="M:VC3.ComponentModel.BusinessObjectAuditor.instance_PropertySet(System.Object,VC3.ComponentModel.PropertySetEventArgs)">
            <summary>
            Handles <see cref="E:VC3.ComponentModel.BusinessObject.EventStore.BeforePropertySet"/> events to track changes to
            property values for the associated <see cref="T:VC3.ComponentModel.BusinessObject"/> being audited.
            </summary>
            <param name="sender">The <see cref="T:VC3.ComponentModel.BusinessObject"/> being audited</param>
            <param name="args">The <see cref="T:VC3.ComponentModel.PropertySetEventArgs"/> describing the property change</param>
        </member>
        <member name="M:VC3.ComponentModel.BusinessObjectAuditor.instance_AfterInit(System.Object,VC3.ComponentModel.BusinessObjectEventArgs)">
            <summary>
            Handles the <see cref="E:VC3.ComponentModel.BusinessObject.EventStore.AfterInit"/> event to set up a
            <see cref="T:VC3.ComponentModel.BusinessObjectListAuditor"/> to monitor each audited
            <see cref="T:VC3.ComponentModel.BusinessObjectList"/> property on the instance.
            </summary>
            <param name="sender">The <see cref="T:VC3.ComponentModel.BusinessObject"/> being audited</param>
            <param name="args">The event args</param>
        </member>
        <member name="M:VC3.ComponentModel.BusinessObjectAuditor.instance_AfterCommit(System.Object,VC3.ComponentModel.BusinessObjectEventArgs)">
            <summary>
            Invokes <see cref="M:VC3.ComponentModel.BusinessObjectAuditor.OnCommit"/> to allow subclasses to perform auditing
            when the instance is committed.
            </summary>
            <param name="sender">The <see cref="T:VC3.ComponentModel.BusinessObject"/> being audited</param>
            <param name="args">The event args</param>
        </member>
        <member name="M:VC3.ComponentModel.BusinessObjectAuditor.instance_AfterDelete(System.Object,VC3.ComponentModel.BusinessObjectEventArgs)">
            <summary>
            Invokes <see cref="M:VC3.ComponentModel.BusinessObjectAuditor.OnDelete"/> to allow subclasses to perform auditing
            when the instance is deleted.
            </summary>
            <param name="sender">The <see cref="T:VC3.ComponentModel.BusinessObject"/> being audited</param>
            <param name="args">The event args</param>
        </member>
        <member name="M:VC3.ComponentModel.BusinessObjectAuditor.Abort">
            <summary>
            Notifies the auditor to stop auditing due to an error condition.
            </summary>
            <remarks>
            Subclasses may use this notification to store auditing information
            in a system error log.
            </remarks>
        </member>
        <member name="M:VC3.ComponentModel.BusinessObjectAuditor.Complete">
            <summary>
            Notifies the auditor to stop auditing due to the completion of the
            operation being audited.
            </summary>
            <remarks>
            Subclasses may use this notification to store auditing information
            and a audit log for reporting purposes.
            </remarks>
        </member>
        <member name="M:VC3.ComponentModel.BusinessObjectAuditor.ToXml">
            <summary>
            Converts the current audited change history into an XML representation.
            </summary>
            <returns>A <see cref="T:System.String"/> containing the XML change history</returns>
        </member>
        <member name="P:VC3.ComponentModel.BusinessObjectAuditor.Instance">
            <summary>
            Gets the <see cref="T:VC3.ComponentModel.BusinessObject"/> instance being monitored.
            </summary>
        </member>
        <member name="P:VC3.ComponentModel.BusinessObjectAuditor.InstanceId">
            <summary>
            Gets the string identifier of the instance being monitored.
            </summary>
        </member>
        <member name="P:VC3.ComponentModel.BusinessObjectAuditor.Changes">
            <summary>
            Gets the set of changes to properties that have occurred since the auditor
            was created.
            </summary>
        </member>
        <member name="P:VC3.ComponentModel.BusinessObjectAuditor.Context">
            <summary>
            Provides access to the business object instance's context.
            </summary>
        </member>
        <member name="T:VC3.ComponentModel.BusinessObjectAuditor.PropertyChangeRecord">
            <summary>
            Records changes to properties by tracking the original and final
            values of a property.
            </summary>
        </member>
        <member name="T:VC3.ComponentModel.ChangeRecord">
            <summary>
            Defines a base set of information that must be recorded
            when an audited change occurs.
            </summary>
        </member>
        <member name="P:VC3.ComponentModel.ChangeRecord.Description">
            <summary>
            Gets the description of the audited change that occurred.
            </summary>
        </member>
        <member name="M:VC3.ComponentModel.BusinessObjectAuditor.PropertyChangeRecord.#ctor(VC3.ComponentModel.PropertyReflector,System.Object,System.Object)">
            <summary>
            Creates a new <see cref="T:VC3.ComponentModel.BusinessObjectAuditor.PropertyChangeRecord"/> for the specified
            property and values.
            </summary>
            <param name="property">The property that changed</param>
            <param name="oldValue">The original value of the property</param>
            <param name="newValue">The final value of the property</param>p
        </member>
        <member name="M:VC3.ComponentModel.BusinessObjectAuditor.PropertyChangeRecord.ToString(VC3.ComponentModel.PropertyReflector,System.Object)">
            <summary>
            Converts the specified value to a string representation.
            </summary>
            <param name="property">The property definition to use for the string conversion</param>
            <param name="value">The value to convert</param>
            <returns>The string form of the value</returns>
        </member>
        <member name="M:VC3.ComponentModel.BusinessObjectAuditor.PropertyChangeRecord.ToIdString(VC3.ComponentModel.PropertyReflector,System.Object)">
            <summary>
            Converts the specified value to a string identifier. For <see cref="T:VC3.ComponentModel.BusinessObject"/> instances
            returns ToIdString(). Otherwise, returns empty string.
            </summary>
            <param name="property">Property definition to use for the string conversion</param>
            <param name="value">The value to convert</param>
            <returns>The string form of the value</returns>
        </member>
        <member name="P:VC3.ComponentModel.BusinessObjectAuditor.PropertyChangeRecord.Name">
            <summary>
            Gets the name of the property that changed.
            </summary>
        </member>
        <member name="P:VC3.ComponentModel.BusinessObjectAuditor.PropertyChangeRecord.Label">
            <summary>
            Gets the label for the property that changed.
            </summary>
        </member>
        <member name="P:VC3.ComponentModel.BusinessObjectAuditor.PropertyChangeRecord.OldValue">
            <summary>
            Gets the <see cref="T:System.String"/> representation of the original value
            of the property before the change.
            </summary>
        </member>
        <member name="P:VC3.ComponentModel.BusinessObjectAuditor.PropertyChangeRecord.OldId">
            <summary>
            Gets the <see cref="T:System.String"/> identifier representation of the original value
            of the property before the change.
            </summary>
        </member>
        <member name="P:VC3.ComponentModel.BusinessObjectAuditor.PropertyChangeRecord.NewValue">
            <summary>
            Gets the <see cref="T:System.String"/> representation of the final value
            of the property after the change.
            </summary>
        </member>
        <member name="P:VC3.ComponentModel.BusinessObjectAuditor.PropertyChangeRecord.NewId">
            <summary>
            Gets the <see cref="T:System.String"/> identifier representation of the final value
            of the property after the change.
            </summary>
        </member>
        <member name="P:VC3.ComponentModel.BusinessObjectAuditor.PropertyChangeRecord.Description">
            <summary>
            Gets the description of the change that occurred to the property.
            </summary>
        </member>
        <member name="M:VC3.Security.Authorization.SecurityTaskAuditor.#ctor(VC3.Security.Authorization.SecurityTask,VC3.ComponentModel.BusinessObject,System.String)">
            <summary>
            Creates a new <see cref="T:VC3.Security.Authorization.SecurityTaskAuditor"/> to track changes on the specified
            instance and record an audit log entry when the specified task is completed.
            </summary>
            <param name="task">The task being performed</param>
            <param name="instance">The instance being audited</param>
            <param name="description">The description of the task that is being audited</param>
        </member>
        <member name="M:VC3.Security.Authorization.SecurityTaskAuditor.#ctor(VC3.Security.Authorization.SecurityTask,VC3.ComponentModel.BusinessObject,System.String,VC3.Security.Authorization.AuditorLoggingMode)">
            <summary>
            Creates a new <see cref="T:VC3.Security.Authorization.SecurityTaskAuditor"/> to track changes on the specified
            instance and record an audit log entry when the specified task is completed.
            </summary>
            <param name="task">The task being performed</param>
            <param name="instance">The instance being audited</param>
            <param name="description">The description of the task that is being audited</param>
            <param name="mode"></param>
        </member>
        <member name="M:VC3.Security.Authorization.SecurityTaskAuditor.OnCommit">
            <summary>
            Logs the performance of the current task when
            <see cref="M:VC3.ComponentModel.BusinessObject.CommitChanges"/> is
            called on the associated instance.
            </summary>
        </member>
        <member name="M:VC3.Security.Authorization.SecurityTaskAuditor.LogTask">
            <summary>
            Adds a record to the audit log for the associated
            <see cref="T:VC3.Security.Authorization.SecurityTask"/> and <see cref="T:VC3.ComponentModel.BusinessObject"/>
            instance.
            </summary>
        </member>
        <member name="M:VC3.Security.Authorization.SecurityTaskAuditor.Complete">
            <summary>
            Commits if auto commit is enabled.
            </summary>
        </member>
        <member name="P:VC3.Security.Authorization.SecurityTaskAuditor.Task">
            <summary>
            Gets the <see cref="T:VC3.Security.Authorization.SecurityTask"/> the auditor is tracking changes for.
            </summary>
        </member>
        <member name="P:VC3.Security.Authorization.SecurityTaskAuditor.Description">
            <summary>
            Gets the description set by the auditor
            </summary>
        </member>
        <member name="T:VC3.Security.Authorization.CommitAuditor">
            <summary>
            Automatically audits changes to business layer components and
            handles logging of Add, Edit, and Delete tasks.
            </summary>
        </member>
        <member name="M:VC3.Security.Authorization.CommitAuditor.GetCommitTask(VC3.ComponentModel.BusinessObject)">
            <summary>
            Gets the <see cref="T:VC3.Security.Authorization.SecurityTask"/> to use for auditing commits.
            </summary>
            <param name="instance">The <see cref="T:VC3.ComponentModel.BusinessObject"/> being audited</param>
            <returns>The <see cref="T:VC3.Security.Authorization.SecurityTask"/> to audit</returns>
        </member>
        <member name="M:VC3.Security.Authorization.CommitAuditor.GetDeleteTask(VC3.ComponentModel.BusinessObject)">
            <summary>
            Gets the <see cref="T:VC3.Security.Authorization.SecurityTask"/> to use for auditing deletes.
            </summary>
            <param name="instance">The <see cref="T:VC3.ComponentModel.BusinessObject"/> being audited</param>
            <returns>The <see cref="T:VC3.Security.Authorization.SecurityTask"/> to audit</returns>
        </member>
        <member name="M:VC3.Security.Authorization.CommitAuditor.OnCommit">
            <summary>
            Automatically completes the auditing of the task when the
            instance is committed.
            </summary>
        </member>
        <member name="M:VC3.Security.Authorization.CommitAuditor.OnDelete">
            <summary>
            Automatically creates a new <see cref="T:VC3.Security.Authorization.SecurityTaskAuditor"/> to
            audit the delete task when the instance is deleted.
            </summary>
        </member>
        <member name="T:VC3.Security.Authorization.ICommitTaskProvider">
            <summary>
            Defines the properties a <see cref="T:VC3.ComponentModel.BusinessObject"/> may implement
            in order to specify the <see cref="T:VC3.Security.Authorization.SecurityTask"/> to use when auditing add, edit
            and delete operations.
            </summary>
        </member>
        <member name="P:VC3.Security.Authorization.ICommitTaskProvider.AddTask">
            <summary>
            The task to use when auditing add operations.
            </summary>
        </member>
        <member name="P:VC3.Security.Authorization.ICommitTaskProvider.EditTask">
            <summary>
            The task to use when auditing edit operations.
            </summary>
        </member>
        <member name="P:VC3.Security.Authorization.ICommitTaskProvider.DeleteTask">
            <summary>
            The task to use when auditing delete operations.
            </summary>
        </member>
        <member name="T:VC3.Collections.NameObjectCollection">
            <summary>
            Summary description for NameObjectCollection.
            </summary>
        </member>
        <member name="T:VC3.Data.DisconnectedReader">
            <summary>
            Summary description for DataViewReader.
            </summary>
        </member>
        <member name="M:VC3.Data.DisconnectedReader.#ctor(System.Data.IDataReader)">
            <summary>
            Caches a data reader to enable disconnected data access via the IDataReader interface.
            </summary>
            <param name="reader">The IDataReader to cache.</param>
        </member>
        <member name="T:VC3.ComponentModel.PropertyReflector">
            <summary>
            Caches a reflected property path starting at the specified instance or
            type and ending with the last property identified by the source path.
            Enables sub-properties at any level of depth in an object hierarchy to
            be easily retrieved or updated.
            </summary>
        </member>
        <member name="M:VC3.ComponentModel.PropertyReflector.#ctor(VC3.ComponentModel.PropertyReflector.ComponentEntry)">
            <summary>
            Internal constructor that creates a simple reflected
            property based on the specified property descriptor.
            </summary>
            <param name="component">The <see cref="T:System.ComponentModel.PropertyDescriptor"/> for the reflected property</param>
        </member>
        <member name="M:VC3.ComponentModel.PropertyReflector.GetProperty(System.ComponentModel.PropertyDescriptor)">
            <summary>
            Gets a non-cached <see cref="T:VC3.ComponentModel.PropertyReflector"/> based on the
            specified <see cref="T:System.ComponentModel.PropertyDescriptor"/> instance.
            </summary>
            <param name="descriptor">The descriptor describing the property.</param>
            <returns>The reflected property.</returns>
            <remarks>
            This method should be used when custom dynamically changes properties
            are used to prevent property caching from occurring.
            </remarks>
        </member>
        <member name="M:VC3.ComponentModel.PropertyReflector.GetProperty(System.Object,System.String)">
            <summary>
            Caches a reflected property path starting at the specified instance
            and ending with the last property identified by the source path.
            </summary>
            <param name="instance">The instance to begin reflection at.</param>
            <param name="source">
            The source path in the format RootProperty.SubProperty.FinalProperty,
            where RootProperty is a property of instance, SubProperty is a property
            of RootProperty, and FinalProperty is a property of SubProperty.
            </param>
            <returns>The reflected property.</returns>
            <remarks>
            This method is preferred because it enables ICustomTypeDescriptor
            implementations to be consistently and easily discovered.
            </remarks>
        </member>
        <member name="M:VC3.ComponentModel.PropertyReflector.GetProperty(System.Type,System.String)">
            <summary>
            Caches a reflected property path starting at the specified instance
            and ending with the last property identified by the source path.
            </summary>
            <param name="type">The type to begin reflection at.</param>
            <param name="source">
            The source path in the format RootProperty.SubProperty.FinalProperty,
            where RootProperty is a property of instance, SubProperty is a property
            of RootProperty, and FinalProperty is a property of SubProperty.
            </param>
            <returns>The reflected property.</returns>
            <remarks>
            This method is not preferred because it prevents ICustomTypeDescriptor
            implementations from being consistently and easily discovered.
            </remarks>
        </member>
        <member name="M:VC3.ComponentModel.PropertyReflector.GetProperty(System.String[],System.String)">
            <summary>
            Caches a reflected property that starting with a reference to a type, followed
            by a static property name, followed by other instance-based expressions.
            </summary>
            <param name="namespaces">List of assembly-qualified namespaces to search for the specified type</param>
            <param name="source">Expression</param>
            <returns></returns>
        </member>
        <member name="M:VC3.ComponentModel.PropertyReflector.GetProperties(System.Object)">
            <summary>
            Gets the immediate properties of the specified instance.
            </summary>
            <param name="instance">The instance to retrieve properties for</param>
            <returns>An array of <see cref="T:VC3.ComponentModel.PropertyReflector"/> instances</returns>
        </member>
        <member name="M:VC3.ComponentModel.PropertyReflector.GetProperties(System.Type)">
            <summary>
            Gets the immediate properties of the specified type.
            </summary>
            <param name="type">The type to retrieve properties for</param>
            <returns>An array of <see cref="T:VC3.ComponentModel.PropertyReflector"/> instances</returns>
        </member>
        <member name="M:VC3.ComponentModel.PropertyReflector.GetAuditedChildren(System.Object)">
            <summary>
            Gets the properties of the specified instance whose children
            should also be audited.
            </summary>
            <param name="instance">The instance to retrieve properties for</param>
            <returns>An array of <see cref="T:VC3.ComponentModel.PropertyReflector"/> instances</returns>
        </member>
        <member name="M:VC3.ComponentModel.PropertyReflector.GetInstance(System.Object)">
            <summary>
            Gets the instance that is the immediate parent of the reflected property.
            </summary>
            <param name="instance">The root instance to begin reflection at.</param>
            <returns>The requested instance.</returns>
        </member>
        <member name="M:VC3.ComponentModel.PropertyReflector.GetValue(System.Object)">
            <summary>
            Gets the value of the reflected property by transversing the source path.
            </summary>
            <param name="instance">The root instance to begin reflection at.</param>
            <returns>The property value.</returns>
        </member>
        <member name="M:VC3.ComponentModel.PropertyReflector.SetValue(System.Object,System.Object)">
            <summary>
            Sets the value of the reflected property by transversing the source path.
            </summary>
            <param name="instance">The root instance to begin reflection at.</param>
            <param name="value">The new property value.</param>
        </member>
        <member name="M:VC3.ComponentModel.PropertyReflector.SetValue(System.Object,System.Object,System.Boolean)">
            <summary>
            Sets the value of the reflected property by transversing the source path.
            </summary>
            <param name="instance">The root instance to begin reflection at.</param>
            <param name="value">The new property value.</param>
            <param name="throwIfReadOnly">If true, an exception will be thrown in the property is read only</param>
        </member>
        <member name="M:VC3.ComponentModel.PropertyReflector.GetAttribute(System.Type)">
            <summary>
            Gets the first of attribute of the specified type for the current property.
            </summary>
            <param name="attributeType">The type of attribute to find</param>
            <returns>The first matching attribute if it exists, otherwise null</returns>
        </member>
        <member name="M:VC3.ComponentModel.PropertyReflector.GetAttributes(System.Type)">
            <summary>
            Gets an array of attributes of the specified type for the current property.
            </summary>
            <param name="attributeType">The type of attribute to find</param>
            <returns>An array of matching attributes.</returns>
        </member>
        <member name="M:VC3.ComponentModel.PropertyReflector.GetSibling(System.Object,System.String)">
            <summary>
            Gets a previously cached sibling of the current property.
            </summary>
            <param name="instance">The instance to begin reflection at</param>
            <param name="source">
            The source path in the format RootProperty.SubProperty.FinalProperty,
            where RootProperty is a property of instance, SubProperty is a property
            of RootProperty, and FinalProperty is a property of SubProperty.
            </param>
            <returns>The sibling property if it exists, otherwise null.</returns>
        </member>
        <member name="M:VC3.ComponentModel.PropertyReflector.GetSibling(System.String)">
            <summary>
            Gets a previously cached sibling of the current property.
            </summary>
            <param name="source">
            The source path in the format RootProperty.SubProperty.FinalProperty,
            where RootProperty is a property of instance, SubProperty is a property
            of RootProperty, and FinalProperty is a property of SubProperty.
            </param>
            <returns>The sibling property if it exists, otherwise null.</returns>
        </member>
        <member name="M:VC3.ComponentModel.PropertyReflector.Truncate">
            <summary>
            Gets a new truncated version of the current <see cref="T:VC3.ComponentModel.PropertyReflector"/>
            by reducing the length of the path to one.
            </summary>
            <returns>The truncated property</returns>
        </member>
        <member name="M:VC3.ComponentModel.PropertyReflector.Initialize">
            <summary>
            Initializes property preconditions after all properties have been
            loaded for a component to support comparison-based preconditions.
            </summary>
        </member>
        <member name="P:VC3.ComponentModel.PropertyReflector.Type">
            <summary>
            Gets the <see cref="T:System.Type"/> of the reflected property.
            </summary>
        </member>
        <member name="P:VC3.ComponentModel.PropertyReflector.Source">
            <summary>
            Gets the source path for the reflected property.
            </summary>
        </member>
        <member name="P:VC3.ComponentModel.PropertyReflector.Scope">
            <summary>
            Gets the source path excluding the reflected property.
            </summary>
        </member>
        <member name="P:VC3.ComponentModel.PropertyReflector.Name">
            <summary>
            Gets the name of the reflected property.
            </summary>
        </member>
        <member name="P:VC3.ComponentModel.PropertyReflector.ClassName">
            <summary>
            Gets the name of the class containing the
            reflected property.
            </summary>
        </member>
        <member name="P:VC3.ComponentModel.PropertyReflector.FullName">
            <summary>
            Gets the fully qualified name of the reflected
            property including the class name.
            </summary>
        </member>
        <member name="P:VC3.ComponentModel.PropertyReflector.Label">
            <summary>
            Gets the label for the reflected property.
            </summary>
            <remarks>
            The label is first determined by looking for a
            <see cref="T:VC3.ComponentModel.LabelAttribute"/> on the reflected property.
            If an attribute is not specified, the label will
            be the same as <see cref="P:VC3.ComponentModel.PropertyReflector.Name"/>, except that
            spaces will be inserted between words.  For example,
            a property named "FirstName", would have a default label
            of "First Name".
            </remarks>
        </member>
        <member name="P:VC3.ComponentModel.PropertyReflector.HelpText">
            <summary>
            Gets the help text, if any, for the reflected property.
            </summary>
            <remarks>
            The helptext is determined by looking for a
            <see cref="T:System.ComponentModel.DescriptionAttribute"/> on the reflected property.
            </remarks>
        </member>
        <member name="P:VC3.ComponentModel.PropertyReflector.Description">
            <summary>
            Gets the description, if any, for the reflected property.
            </summary>
            <remarks>
            The description is determined by looking for a
            <see cref="T:System.ComponentModel.DescriptionAttribute"/> on the reflected property.
            </remarks>
        </member>
        <member name="P:VC3.ComponentModel.PropertyReflector.IsRequired">
            <summary>
            Indicates whether the reflected property is required.
            </summary>
            <remarks>
            Requiredness is determined by looking for a
            <see cref="T:VC3.ComponentModel.RequiredAttribute"/> on the reflected property.
            </remarks>
        </member>
        <member name="P:VC3.ComponentModel.PropertyReflector.AuditPropertySet">
            <summary>
            Indicates whether the reflected property should be audited
            when the property value is set.
            </summary>
            <remarks>
            Auditing is determined by looking for a
            <see cref="T:VC3.ComponentModel.AuditedAttribute"/> on the reflected property.
            </remarks>
        </member>
        <member name="P:VC3.ComponentModel.PropertyReflector.AuditChildren">
            <summary>
            Indicates whether the child object for the reflected
            property should be audited.
            </summary>
            <remarks>
            Auditing is determined by looking for a
            <see cref="T:VC3.ComponentModel.AuditedAttribute"/> on the reflected property.
            </remarks>
        </member>
        <member name="P:VC3.ComponentModel.PropertyReflector.IsPublic">
            <summary>
            Indicates whether the reflected property is public or non-public.
            </summary>
        </member>
        <member name="P:VC3.ComponentModel.PropertyReflector.IsStatic">
            <summary>
            Indicates whether the reflected property is static or instance scoped.
            </summary>
        </member>
        <member name="P:VC3.ComponentModel.PropertyReflector.IsReadOnly">
            <summary>
            Indicates whether the reflected property is read only.
            </summary>
            <remarks>
            The read only status is determined by looking for a
            <see cref="T:System.ComponentModel.ReadOnlyAttribute"/> on the reflected property.
            </remarks>
        </member>
        <member name="P:VC3.ComponentModel.PropertyReflector.Preconditions">
            <summary>
            Gets the <see cref="T:VC3.ComponentModel.PropertyPreconditions"/> for the reflected property.
            </summary>
        </member>
        <member name="P:VC3.ComponentModel.PropertyReflector.Converter">
            <summary>
            Gets the <see cref="T:System.ComponentModel.TypeConverter"/> for the reflected property.
            </summary>
        </member>
        <member name="P:VC3.ComponentModel.PropertyReflector.Descriptor">
            <summary>
            Gets the <see cref="T:System.ComponentModel.PropertyDescriptor"/> for the reflected property
            if the property is based on descriptor-based reflection.
            </summary>
        </member>
        <member name="P:VC3.ComponentModel.PropertyReflector.ItemType">
            <summary>
            Gets the item type of the property, which is the same
            as the property type for non-list properties, and is the
            list type for properties implementing <see cref="T:System.Collections.IList"/>.
            </summary>
        </member>
        <member name="P:VC3.ComponentModel.PropertyReflector.ComponentType">
            <summary>
            Gets the runtime type of the root component the property is defined on.
            </summary>
        </member>
        <member name="P:VC3.ComponentModel.PropertyReflector.AuditedHiddenValue">
            <summary>
            Gets the string value that should be used for auditing 
            when AuditValue is false.
            </summary>
        </member>
        <member name="P:VC3.ComponentModel.PropertyReflector.AuditValue">
            <summary>
            Indicates whether auditing should include before and after values.
            </summary>
        </member>
        <member name="T:VC3.ComponentModel.PropertyReflector.ComponentEntry">
            <summary>
            Caches information, such as <see cref="T:VC3.ComponentModel.PropertyReflector"/> instances
            for a specific class or component.
            </summary>
        </member>
        <member name="M:VC3.ComponentModel.PropertyReflector.ComponentEntry.#ctor(System.Type,System.String,System.ComponentModel.AttributeCollection,System.ComponentModel.PropertyDescriptorCollection)">
            <summary>
            Creates a new <see cref="T:VC3.ComponentModel.PropertyReflector.ComponentEntry"/> based on the
            specified name and base property descriptors
            </summary>
            <param name="name">The full name of the component entry</param>
            <param name="descriptors">The <see cref="T:System.ComponentModel.PropertyDescriptor"/> instances for the component entry</param>
        </member>
        <member name="M:VC3.ComponentModel.PropertyReflector.ComponentEntry.GetComponent(System.Object)">
            <summary>
            Gets a <see cref="T:VC3.ComponentModel.PropertyReflector.ComponentEntry"/> for the specified instance.
            </summary>
            <param name="instance">The instance to retrieve the entry for</param>
            <returns>A new or cached <see cref="T:VC3.ComponentModel.PropertyReflector.ComponentEntry"/></returns>
        </member>
        <member name="M:VC3.ComponentModel.PropertyReflector.ComponentEntry.GetComponent(System.Type)">
            <summary>
            Gets a <see cref="T:VC3.ComponentModel.PropertyReflector.ComponentEntry"/> for the specified type.
            </summary>
            <param name="type">The <see cref="T:System.Type"/> to retrieve the entry for</param>
            <returns>A new or cached <see cref="T:VC3.ComponentModel.PropertyReflector.ComponentEntry"/></returns>
        </member>
        <member name="M:VC3.ComponentModel.PropertyReflector.ComponentEntry.GetProperty(System.Object,System.String)">
            <summary>
            Gets a property reflector for the specified instance and source path.
            </summary>
            <param name="instance">The instance to begin reflection at</param>
            <param name="source">The source path to reflect on</param>
            <returns>The reflected property</returns>
        </member>
        <member name="M:VC3.ComponentModel.PropertyReflector.ComponentEntry.GetProperty(System.String)">
            <summary>
            Gets a property reflector for the specified source path.
            </summary>
            <param name="source">The source path to reflect on</param>
            <returns>The reflected property</returns>
            <remarks>
            If the requested property has not already been cached, the property
            is statically reflected using type information. 
            </remarks>
        </member>
        <member name="P:VC3.ComponentModel.PropertyReflector.ComponentEntry.Type">
            <summary>
            Gets the runtime type of the component.
            </summary>
        </member>
        <member name="P:VC3.ComponentModel.PropertyReflector.ComponentEntry.Audited">
            <summary>
            Gets the auditing settings for the component.
            </summary>
        </member>
        <member name="P:VC3.ComponentModel.PropertyReflector.ComponentEntry.Name">
            <summary>
            The full name of the component entry
            </summary>
        </member>
        <member name="P:VC3.ComponentModel.PropertyReflector.ComponentEntry.IsAudited">
            <summary>
            Indicates whether the component is audited.
            </summary>
            <remarks>
            Auditing is determined by looking for a
            <see cref="T:VC3.ComponentModel.AuditedAttribute"/> on the component.
            </remarks>
        </member>
        <member name="P:VC3.ComponentModel.PropertyReflector.ComponentEntry.HasAuditor">
            <summary>
            Indicates whether the component has an auditor.
            </summary>
            <remarks>
            Auditors are specified using the
            <see cref="T:VC3.ComponentModel.AuditorAttribute"/> on the component.
            </remarks>
        </member>
        <member name="P:VC3.ComponentModel.PropertyReflector.ComponentEntry.AuditedChildren">
            <summary>
            Gets an array of <see cref="T:VC3.ComponentModel.PropertyReflector"/> instances
            for all audited properties for the component.
            </summary>
        </member>
        <member name="P:VC3.ComponentModel.PropertyReflector.ComponentEntry.Properties">
            <summary>
            Gets an array of <see cref="T:VC3.ComponentModel.PropertyReflector"/> instances
            for all base properties for the component.
            </summary>
        </member>
        <member name="T:VC3.ComponentModel.ICacheEntry">
            <summary>
            Controls the lifetime of a particular entry in a cache
            </summary>
        </member>
        <member name="M:VC3.ComponentModel.ICacheEntry.Expire">
            <summary>
            Expires the item in the cache
            </summary>
        </member>
        <member name="T:VC3.ComponentModel.ICacheableCustomTypeDescriptor">
            <summary>
            Extension of ICustomTypeDescriptor that adds support for controlling cachability.
            </summary>
        </member>
        <member name="M:VC3.ComponentModel.ICacheableCustomTypeDescriptor.Cached(VC3.ComponentModel.ICacheEntry)">
            <summary>
            Called with the type descriptor has been cached
            </summary>
            <param name="entry"></param>
        </member>
        <member name="P:VC3.ComponentModel.ICacheableCustomTypeDescriptor.CanCache">
            <summary>
            True if the custom type description can currently be cached
            </summary>
        </member>
        <member name="T:VC3.ComponentModel.SimplePropertyReflector">
            <summary>
            Base class for property reflectors that represent a single property,
            not any extended property path.
            </summary>
        </member>
        <member name="M:VC3.ComponentModel.SimplePropertyReflector.#ctor(VC3.ComponentModel.PropertyReflector.ComponentEntry)">
            <summary>
            Internal constructor that creates a simple reflected
            property based on the specified property descriptor.
            </summary>
            <param name="component">The <see cref="T:System.ComponentModel.PropertyDescriptor"/> for the reflected property</param>
        </member>
        <member name="M:VC3.ComponentModel.SimplePropertyReflector.Initialize">
            <summary>
            Initializes property preconditions after all properties have been
            loaded for a component to support comparison-based preconditions.
            </summary>
        </member>
        <member name="P:VC3.ComponentModel.SimplePropertyReflector.Label">
            <summary>
            Gets the label for the reflected property.
            </summary>
            <remarks>
            The label is first determined by looking for a
            <see cref="T:VC3.ComponentModel.LabelAttribute"/> on the reflected property.
            If an attribute is not specified, the label will
            be the same as <see cref="P:VC3.ComponentModel.PropertyReflector.Name"/>, except that
            spaces will be inserted between words.  For example,
            a property named "FirstName", would have a default label
            of "First Name".
            </remarks>
        </member>
        <member name="P:VC3.ComponentModel.SimplePropertyReflector.HelpText">
            <summary>
            Gets the help text, if any, for the reflected property.
            </summary>
            <remarks>
            The helptext is determined by looking for a
            <see cref="T:VC3.ComponentModel.HelpTextAttribute"/> on the reflected property.
            </remarks>
        </member>
        <member name="P:VC3.ComponentModel.SimplePropertyReflector.Description">
            <summary>
            Gets the description, if any, for the reflected property.
            </summary>
            <remarks>
            The description is determined by looking for a
            <see cref="T:System.ComponentModel.DescriptionAttribute"/> on the reflected property.
            </remarks>
        </member>
        <member name="P:VC3.ComponentModel.SimplePropertyReflector.IsRequired">
            <summary>
            Indicates whether the reflected property is required.
            </summary>
            <remarks>
            Requiredness is determined by looking for a
            <see cref="T:VC3.ComponentModel.RequiredAttribute"/> on the reflected property.
            </remarks>
        </member>
        <member name="P:VC3.ComponentModel.SimplePropertyReflector.AuditPropertySet">
            <summary>
            Indicates whether the reflected property should be audited
            when the property value is set.
            </summary>
            <remarks>
            Auditing is determined by looking for a
            <see cref="T:VC3.ComponentModel.AuditedAttribute"/> on the reflected property.
            </remarks>
        </member>
        <member name="P:VC3.ComponentModel.SimplePropertyReflector.AuditChildren">
            <summary>
            Indicates whether the child object for the reflected
            property should be audited.
            </summary>
            <remarks>
            Auditing is determined by looking for a
            <see cref="T:VC3.ComponentModel.AuditedAttribute"/> on the reflected property.
            </remarks>
        </member>
        <member name="P:VC3.ComponentModel.SimplePropertyReflector.Preconditions">
            <summary>
            Gets the <see cref="T:VC3.ComponentModel.PropertyPreconditions"/> for the reflected property.
            </summary>
        </member>
        <member name="P:VC3.ComponentModel.SimplePropertyReflector.ItemType">
            <summary>
            Gets the item type of the property, which is the same
            as the property type for non-list properties, and is the
            list type for properties implementing <see cref="T:System.Collections.IList"/>.
            </summary>
        </member>
        <member name="T:VC3.ComponentModel.PropertyDescriptorReflector">
            <summary>
            Subclass of <see cref="T:VC3.ComponentModel.PropertyReflector"/> designed to expose information
            for a single property based on a <see cref="T:System.ComponentModel.PropertyDescriptor"/> instance.
            </summary>
        </member>
        <member name="M:VC3.ComponentModel.PropertyDescriptorReflector.#ctor(VC3.ComponentModel.PropertyReflector.ComponentEntry,System.ComponentModel.PropertyDescriptor)">
            <summary>
            Internal constructor that creates a simple reflected
            property based on the specified property descriptor.
            </summary>
            <param name="descriptor">The <see cref="T:System.ComponentModel.PropertyDescriptor"/> for the reflected property</param>
        </member>
        <member name="M:VC3.ComponentModel.PropertyDescriptorReflector.GetValue(System.Object)">
            <summary>
            Gets the value of the reflected property by transversing the source path.
            </summary>
            <param name="instance">The root instance to begin reflection at.</param>
            <returns>The property value.</returns>
        </member>
        <member name="M:VC3.ComponentModel.PropertyDescriptorReflector.SetValue(System.Object,System.Object)">
            <summary>
            Sets the value of the reflected property by transversing the source path.
            </summary>
            <param name="instance">The root instance to begin reflection at.</param>
            <param name="value">The new property value.</param>
        </member>
        <member name="M:VC3.ComponentModel.PropertyDescriptorReflector.GetAttribute(System.Type)">
            <summary>
            Gets the first of attribute of the specified type for the current property.
            </summary>
            <param name="attributeType">The type of attribute to find</param>
            <returns>The first matching attribute if it exists, otherwise null</returns>
        </member>
        <member name="M:VC3.ComponentModel.PropertyDescriptorReflector.GetAttributes(System.Type)">
            <summary>
            Gets an array of attributes of the specified type for the current property.
            </summary>
            <param name="attributeType">The type of attribute to find</param>
            <returns>An array of matching attributes.</returns>
        </member>
        <member name="P:VC3.ComponentModel.PropertyDescriptorReflector.Type">
            <summary>
            Gets the <see cref="T:System.Type"/> of the reflected property.
            </summary>
        </member>
        <member name="P:VC3.ComponentModel.PropertyDescriptorReflector.Name">
            <summary>
            Gets the name of the reflected property.
            </summary>
        </member>
        <member name="P:VC3.ComponentModel.PropertyDescriptorReflector.IsReadOnly">
            <summary>
            Indicates whether the reflected property is read only.
            </summary>
            <remarks>
            The read only status is determined by looking for a
            <see cref="T:System.ComponentModel.ReadOnlyAttribute"/> on the reflected property.
            </remarks>
        </member>
        <member name="P:VC3.ComponentModel.PropertyDescriptorReflector.IsPublic">
            <summary>
            Indicates whether the reflected property is public or non-public.
            </summary>
        </member>
        <member name="P:VC3.ComponentModel.PropertyDescriptorReflector.IsStatic">
            <summary>
            Indicates whether the reflected property is static or instance scoped.
            </summary>
        </member>
        <member name="P:VC3.ComponentModel.PropertyDescriptorReflector.Converter">
            <summary>
            Gets the <see cref="T:System.ComponentModel.TypeConverter"/> for the reflected property.
            </summary>
        </member>
        <member name="P:VC3.ComponentModel.PropertyDescriptorReflector.Descriptor">
            <summary>
            Gets the <see cref="T:System.ComponentModel.PropertyDescriptor"/> for the reflected property
            if the property is based on descriptor-based reflection.
            </summary>
        </member>
        <member name="T:VC3.ComponentModel.PropertyInfoReflector">
            <summary>
            Subclass of <see cref="T:VC3.ComponentModel.PropertyReflector"/> designed to expose information
            for a single property based on a <see cref="T:System.Reflection.PropertyInfo"/> instance.
            </summary>
        </member>
        <member name="M:VC3.ComponentModel.PropertyInfoReflector.#ctor(VC3.ComponentModel.PropertyReflector.ComponentEntry,System.Reflection.PropertyInfo)">
            <summary>
            Internal constructor that creates a simple reflected
            property based on the specified property information.
            </summary>
            <param name="property">The <see cref="T:System.Reflection.PropertyInfo"/> for the reflected property</param>
        </member>
        <member name="M:VC3.ComponentModel.PropertyInfoReflector.GetValue(System.Object)">
            <summary>
            Gets the value of the reflected property by transversing the source path.
            </summary>
            <param name="instance">The root instance to begin reflection at.</param>
            <returns>The property value.</returns>
        </member>
        <member name="M:VC3.ComponentModel.PropertyInfoReflector.SetValue(System.Object,System.Object)">
            <summary>
            Sets the value of the reflected property by transversing the source path.
            </summary>
            <param name="instance">The root instance to begin reflection at.</param>
            <param name="value">The new property value.</param>
        </member>
        <member name="M:VC3.ComponentModel.PropertyInfoReflector.GetAttribute(System.Type)">
            <summary>
            Gets the first of attribute of the specified type for the current property.
            </summary>
            <param name="attributeType">The type of attribute to find</param>
            <returns>The first matching attribute if it exists, otherwise null</returns>
        </member>
        <member name="M:VC3.ComponentModel.PropertyInfoReflector.GetAttributes(System.Type)">
            <summary>
            Gets an array of attributes of the specified type for the current property.
            </summary>
            <param name="attributeType">The type of attribute to find</param>
            <returns>An array of matching attributes.</returns>
        </member>
        <member name="P:VC3.ComponentModel.PropertyInfoReflector.Type">
            <summary>
            Gets the <see cref="T:System.Type"/> of the reflected property.
            </summary>
        </member>
        <member name="P:VC3.ComponentModel.PropertyInfoReflector.Name">
            <summary>
            Gets the name of the reflected property.
            </summary>
        </member>
        <member name="P:VC3.ComponentModel.PropertyInfoReflector.IsReadOnly">
            <summary>
            Indicates whether the reflected property is read only.
            </summary>
            <remarks>
            The read only status is determined by looking for a
            <see cref="T:System.ComponentModel.ReadOnlyAttribute"/> on the reflected property.
            </remarks>
        </member>
        <member name="P:VC3.ComponentModel.PropertyInfoReflector.IsPublic">
            <summary>
            Indicates whether the reflected property is public or non-public.
            </summary>
        </member>
        <member name="P:VC3.ComponentModel.PropertyInfoReflector.IsStatic">
            <summary>
            Indicates whether the reflected property is static or instance scoped.
            </summary>
        </member>
        <member name="P:VC3.ComponentModel.PropertyInfoReflector.Converter">
            <summary>
            Gets the <see cref="T:System.ComponentModel.TypeConverter"/> for the reflected property.
            </summary>
        </member>
        <member name="P:VC3.ComponentModel.PropertyInfoReflector.Descriptor">
            <summary>
            Gets the <see cref="T:System.ComponentModel.PropertyDescriptor"/> for the reflected property
            if the property is based on descriptor-based reflection.
            </summary>
        </member>
        <member name="T:VC3.ComponentModel.FieldInfoReflector">
            <summary>
            Subclass of <see cref="T:VC3.ComponentModel.PropertyReflector"/> designed to expose information
            for a single field based on a <see cref="T:System.Reflection.FieldInfo"/> instance.
            </summary>
        </member>
        <member name="M:VC3.ComponentModel.FieldInfoReflector.#ctor(VC3.ComponentModel.PropertyReflector.ComponentEntry,System.Reflection.FieldInfo)">
            <summary>
            Internal constructor that creates a simple reflected
            field based on the specified field information.
            </summary>
            <param name="field">The <see cref="T:System.Reflection.FieldInfo"/> for the reflected field</param>
        </member>
        <member name="M:VC3.ComponentModel.FieldInfoReflector.GetValue(System.Object)">
            <summary>
            Gets the value of the reflected field by transversing the source path.
            </summary>
            <param name="instance">The root instance to begin reflection at.</param>
            <returns>The field value.</returns>
        </member>
        <member name="M:VC3.ComponentModel.FieldInfoReflector.SetValue(System.Object,System.Object)">
            <summary>
            Sets the value of the reflected field by transversing the source path.
            </summary>
            <param name="instance">The root instance to begin reflection at.</param>
            <param name="value">The new field value.</param>
        </member>
        <member name="M:VC3.ComponentModel.FieldInfoReflector.GetAttribute(System.Type)">
            <summary>
            Gets the first of attribute of the specified type for the current field.
            </summary>
            <param name="attributeType">The type of attribute to find</param>
            <returns>The first matching attribute if it exists, otherwise null</returns>
        </member>
        <member name="M:VC3.ComponentModel.FieldInfoReflector.GetAttributes(System.Type)">
            <summary>
            Gets an array of attributes of the specified type for the current field.
            </summary>
            <param name="attributeType">The type of attribute to find</param>
            <returns>An array of matching attributes.</returns>
        </member>
        <member name="P:VC3.ComponentModel.FieldInfoReflector.Type">
            <summary>
            Gets the <see cref="T:System.Type"/> of the reflected field.
            </summary>
        </member>
        <member name="P:VC3.ComponentModel.FieldInfoReflector.Name">
            <summary>
            Gets the name of the reflected field.
            </summary>
        </member>
        <member name="P:VC3.ComponentModel.FieldInfoReflector.IsReadOnly">
            <summary>
            Indicates whether the reflected field is read only.
            </summary>
            <remarks>
            The read only status is determined by looking for a
            <see cref="T:System.ComponentModel.ReadOnlyAttribute"/> on the reflected field.
            </remarks>
        </member>
        <member name="P:VC3.ComponentModel.FieldInfoReflector.IsPublic">
            <summary>
            Indicates whether the reflected field is public or non-public.
            </summary>
        </member>
        <member name="P:VC3.ComponentModel.FieldInfoReflector.IsStatic">
            <summary>
            Indicates whether the reflected field is static or instance scoped.
            </summary>
        </member>
        <member name="P:VC3.ComponentModel.FieldInfoReflector.Converter">
            <summary>
            Gets the <see cref="T:System.ComponentModel.TypeConverter"/> for the reflected field.
            </summary>
        </member>
        <member name="P:VC3.ComponentModel.FieldInfoReflector.Descriptor">
            <summary>
            Gets the <see cref="T:System.ComponentModel.PropertyDescriptor"/> for the reflected field
            if the field is based on descriptor-based reflection.
            </summary>
        </member>
        <member name="M:VC3.ComponentModel.ExtendedPropertyReflector.GetAttribute(System.Type)">
            <summary>
            Gets the first of attribute of the specified type for the current property.
            </summary>
            <param name="attributeType">The type of attribute to find</param>
            <returns>The first matching attribute if it exists, otherwise null</returns>
        </member>
        <member name="M:VC3.ComponentModel.ExtendedPropertyReflector.GetAttributes(System.Type)">
            <summary>
            Gets an array of attributes of the specified type for the current property.
            </summary>
            <param name="attributeType">The type of attribute to find</param>
            <returns>An array of matching attributes.</returns>
        </member>
        <member name="M:VC3.ComponentModel.ExtendedPropertyReflector.GetInstance(System.Object)">
            <summary>
            Gets the instance that is the immediate parent of the reflected property.
            </summary>
            <param name="instance">The root instance to begin reflection at.</param>
            <returns>The requested instance.</returns>
        </member>
        <member name="M:VC3.ComponentModel.ExtendedPropertyReflector.GetValue(System.Object)">
            <summary>
            Gets the value of the reflected property by transversing the source path.
            </summary>
            <param name="instance">The root instance to begin reflection at.</param>
            <returns>The property value.</returns>
        </member>
        <member name="M:VC3.ComponentModel.ExtendedPropertyReflector.SetValue(System.Object,System.Object)">
            <summary>
            Sets the value of the reflected property by transversing the source path.
            </summary>
            <param name="instance">The root instance to begin reflection at.</param>
            <param name="value">The new property value.</param>
        </member>
        <member name="M:VC3.ComponentModel.ExtendedPropertyReflector.Truncate">
            <summary>
            Gets a new truncated version of the current <see cref="T:VC3.ComponentModel.PropertyReflector"/>
            by reducing the length of the path to one.
            </summary>
            <returns>The truncated property</returns>
        </member>
        <member name="M:VC3.ComponentModel.ExtendedPropertyReflector.Initialize">
            <summary>
            Implement initialize, but do nothing as this implementation delegates to the leaf property.
            </summary>
        </member>
        <member name="P:VC3.ComponentModel.ExtendedPropertyReflector.Label">
            <summary>
            Gets the label for the reflected property.
            </summary>
            <remarks>
            The label is first determined by looking for a
            <see cref="T:VC3.ComponentModel.LabelAttribute"/> on the reflected property.
            If an attribute is not specified, the label will
            be the same as <see cref="P:VC3.ComponentModel.ExtendedPropertyReflector.Name"/>, except that
            spaces will be inserted between words.  For example,
            a property named "FirstName", would have a default label
            of "First Name".
            </remarks>
        </member>
        <member name="P:VC3.ComponentModel.ExtendedPropertyReflector.HelpText">
            <summary>
            Gets the help text, if any, for the reflected property.
            </summary>
            <remarks>
            The helptext is determined by looking for a
            <see cref="T:System.ComponentModel.DescriptionAttribute"/> on the reflected property.
            </remarks>
        </member>
        <member name="P:VC3.ComponentModel.ExtendedPropertyReflector.Description">
            <summary>
            Gets the description, if any, for the reflected property.
            </summary>
            <remarks>
            The description is determined by looking for a
            <see cref="T:System.ComponentModel.DescriptionAttribute"/> on the reflected property.
            </remarks>
        </member>
        <member name="P:VC3.ComponentModel.ExtendedPropertyReflector.IsRequired">
            <summary>
            Indicates whether the reflected property is required.
            </summary>
            <remarks>
            Requiredness is determined by looking for a
            <see cref="T:VC3.ComponentModel.RequiredAttribute"/> on the reflected property.
            </remarks>
        </member>
        <member name="P:VC3.ComponentModel.ExtendedPropertyReflector.AuditPropertySet">
            <summary>
            Indicates whether the reflected property should be audited
            when the property value is set.
            </summary>
            <remarks>
            Auditing is determined by looking for a
            <see cref="T:VC3.ComponentModel.AuditedAttribute"/> on the reflected property.
            </remarks>
        </member>
        <member name="P:VC3.ComponentModel.ExtendedPropertyReflector.AuditChildren">
            <summary>
            Indicates whether the child object for the reflected
            property should be audited.
            </summary>
            <remarks>
            Auditing is determined by looking for a
            <see cref="T:VC3.ComponentModel.AuditedAttribute"/> on the reflected property.
            </remarks>
        </member>
        <member name="P:VC3.ComponentModel.ExtendedPropertyReflector.Preconditions">
            <summary>
            Gets the <see cref="T:VC3.ComponentModel.PropertyPreconditions"/> for the reflected property.
            </summary>
        </member>
        <member name="P:VC3.ComponentModel.ExtendedPropertyReflector.ItemType">
            <summary>
            Gets the item type of the property, which is the same
            as the property type for non-list properties, and is the
            list type for properties implementing <see cref="T:System.Collections.IList"/>.
            </summary>
        </member>
        <member name="P:VC3.ComponentModel.ExtendedPropertyReflector.Source">
            <summary>
            Gets the source path for the reflected property.
            </summary>
        </member>
        <member name="P:VC3.ComponentModel.ExtendedPropertyReflector.Scope">
            <summary>
            Gets the source path excluding the reflected property.
            </summary>
        </member>
        <member name="P:VC3.ComponentModel.ExtendedPropertyReflector.Type">
            <summary>
            Gets the <see cref="T:System.Type"/> of the reflected property.
            </summary>
        </member>
        <member name="P:VC3.ComponentModel.ExtendedPropertyReflector.Name">
            <summary>
            Gets the name of the reflected property.
            </summary>
        </member>
        <member name="P:VC3.ComponentModel.ExtendedPropertyReflector.IsReadOnly">
            <summary>
            Indicates whether the reflected property is read only.
            </summary>
            <remarks>
            The read only status is determined by looking for a
            <see cref="T:System.ComponentModel.ReadOnlyAttribute"/> on the reflected property.
            </remarks>
        </member>
        <member name="P:VC3.ComponentModel.ExtendedPropertyReflector.IsPublic">
            <summary>
            Indicates whether the reflected property is public or non-public.
            </summary>
        </member>
        <member name="P:VC3.ComponentModel.ExtendedPropertyReflector.IsStatic">
            <summary>
            Indicates whether the reflected property is static or instance scoped.
            </summary>
        </member>
        <member name="P:VC3.ComponentModel.ExtendedPropertyReflector.Converter">
            <summary>
            Gets the <see cref="T:System.ComponentModel.TypeConverter"/> for the reflected property.
            </summary>
        </member>
        <member name="P:VC3.ComponentModel.ExtendedPropertyReflector.Descriptor">
            <summary>
            Gets the <see cref="T:System.ComponentModel.PropertyDescriptor"/> for the reflected property
            if the property is based on descriptor-based reflection.
            </summary>
        </member>
        <member name="T:VC3.ComponentModel.PropertyComparer">
            <summary>
            An IComparer that compares a property of two objects via reflection.
            </summary>
        </member>
        <member name="T:VC3.ComponentModel.PropertyComparer`1">
            <summary>
            An IComparer that compares a property of two objects via reflection.
            </summary>
        </member>
        <member name="T:VC3.ComponentModel.SecurityPermission">
            <summary>
            Subclass of <see cref="T:VC3.ComponentModel.Permission"/> that provides a simple implementation
            of <see cref="T:VC3.Security.Authorization.IRole"/> that performs security checks, generates security
            messages, and supports serialization with low storage requirements.
            </summary>
        </member>
        <member name="T:VC3.ComponentModel.Permission">
            <summary>
            Simple implementation of <see cref="T:VC3.Security.Authorization.IRole"/> performs security checks,
            generates security messages, and supports serialization with low storage requirements.
            </summary>
        </member>
        <member name="F:VC3.ComponentModel.Permission.Grant">
            <summary>
            Singleton instance that represents permission that is granted.
            </summary>
        </member>
        <member name="M:VC3.ComponentModel.Permission.IsUserAllowed(VC3.Security.Authentication.IUser)">
            <summary>
            Indicates whether the specified user has permission to
            perform one or more of the associated tasks.
            </summary>
        </member>
        <member name="M:VC3.ComponentModel.Permission.Demand">
            <summary>
            Throws an exception if the user does not have sufficient permissions.
            </summary>
        </member>
        <member name="M:VC3.ComponentModel.Permission.op_Implicit(VC3.ComponentModel.Permission)~System.Boolean">
            <summary>
            Enables <see cref="T:VC3.ComponentModel.Permission"/> instances to be implicitly cast to <see cref="T:System.Boolean"/>.
            </summary>
            <param name="p">The <see cref="T:VC3.ComponentModel.Permission"/> to convert</param>
            <returns>The value of the <see cref="P:VC3.ComponentModel.Permission.IsAllowed"/> property</returns>
        </member>
        <member name="M:VC3.ComponentModel.Permission.op_BitwiseAnd(VC3.ComponentModel.Permission,VC3.ComponentModel.Permission)">
            <summary>
            Combines two <see cref="T:VC3.ComponentModel.Permission"/> instances into a single <see cref="T:VC3.ComponentModel.Permission"/>.
            </summary>
            <param name="first">The first permission</param>
            <param name="second">The second permission</param>
            <returns>An <see cref="T:VC3.ComponentModel.AndPermission"/> that represent the combined permissions.</returns>
        </member>
        <member name="M:VC3.ComponentModel.Permission.op_BitwiseOr(VC3.ComponentModel.Permission,VC3.ComponentModel.Permission)">
            <summary>
            Combines two <see cref="T:VC3.ComponentModel.Permission"/> instances into a single <see cref="T:VC3.ComponentModel.Permission"/>.
            </summary>
            <param name="first">The first permission</param>
            <param name="second">The second permission</param>
            <returns>An <see cref="T:VC3.ComponentModel.OrPermission"/> that represent the combined permissions.</returns>
        </member>
        <member name="P:VC3.ComponentModel.Permission.IsAllowed">
            <summary>
            Indicates whether the current user has permission to
            perform one or more of the associated tasks.
            </summary>
        </member>
        <member name="P:VC3.ComponentModel.Permission.CanDefer">
            <summary>
            Indicates whether the user interface may ignore the fact that
            the user does not have sufficient permissions, and defer to the
            business layer to check the permissions.
            </summary>
        </member>
        <member name="P:VC3.ComponentModel.Permission.NoPermissionMessage">
            <summary>
            Gets a standard message to display when a user
            does not have sufficient permissions.
            </summary>
        </member>
        <member name="T:VC3.ComponentModel.Permission.Converter">
            <summary>
            Supports conversion of a <see cref="T:VC3.ComponentModel.Permission"/> into a boolean or string value.
            </summary>
        </member>
        <member name="F:VC3.ComponentModel.SecurityPermission.Empty">
            <summary>
            A <see cref="T:VC3.ComponentModel.SecurityPermission"/> representing no permissions.
            </summary>
        </member>
        <member name="F:VC3.ComponentModel.SecurityPermission.NoIdentifiers">
            <summary>
            object[0]
            </summary>
        </member>
        <member name="M:VC3.ComponentModel.SecurityPermission.#ctor(VC3.Security.Authorization.IRole)">
            <summary>
            Creates a new SecurityPermission instance granting permissions
            for the specified context identifier and role.
            </summary>
            <param name="role">The role to grant permission for in the specified context.</param>
        </member>
        <member name="M:VC3.ComponentModel.SecurityPermission.#ctor(System.Object,VC3.Security.Authorization.IRole)">
            <summary>
            Creates a new SecurityPermission instance granting permissions
            for the specified context identifier and role.
            </summary>
            <param name="identifier">The context identifier, or null to specify the default context.</param>
            <param name="role">The role to grant permission for in the specified context.</param>
        </member>
        <member name="M:VC3.ComponentModel.SecurityPermission.#ctor(VC3.ComponentModel.BusinessObject,VC3.Security.Authorization.IRole)">
            <summary>
            Creates a new SecurityPermission instance granting permissions
            for the specified context identifier and role.
            </summary>
            <param name="context">The context identifier, or null to specify the default context.</param>
            <param name="role">The role to grant permission for in the specified context.</param>
        </member>
        <member name="M:VC3.ComponentModel.SecurityPermission.#ctor(System.Object[],VC3.Security.Authorization.IRole)">
            <summary>
            Creates a new SecurityPermission instance granting permissions
            for the specified context identifiers and role.
            </summary>
            <param name="identifiers">The context identifier, or null to specify the default context.</param>
            <param name="role">The role to grant permission for in the specified context.</param>
        </member>
        <member name="M:VC3.ComponentModel.SecurityPermission.#ctor(VC3.ComponentModel.BusinessObjectList,VC3.Security.Authorization.IRole)">
            <summary>
            Creates a new SecurityPermission instance granting permissions
            for the specified context identifiers and role.
            </summary>
            <param name="contexts">The context identifier, or null to specify the default context.</param>
            <param name="role">The role to grant permission for in the specified context.</param>
        </member>
        <member name="M:VC3.ComponentModel.SecurityPermission.#ctor(System.Object,VC3.Security.Authorization.IRole[])">
            <summary>
            Creates a new SecurityPermission instance granting permissions
            for the specified context identifier and roles.
            </summary>
            <param name="identifier">The context identifier, or null to specify the default context.</param>
            <param name="roles">The roles to grant permission for in the specified context.</param>
        </member>
        <member name="M:VC3.ComponentModel.SecurityPermission.#ctor(System.Object,VC3.Security.Authorization.IRole,System.Boolean)">
            <summary>
            Creates a new SecurityPermission instance granting or denying permissions
            for the specified context identifier and role.
            </summary>
            <param name="identifier">The context identifier, or null to specify the default context.</param>
            <param name="role">The role to grant or deny permission for in the specified context.</param>
            <param name="deny">A flag indicating whether to grant or deny permissions.</param>
        </member>
        <member name="M:VC3.ComponentModel.SecurityPermission.Copy">
            <summary>
            Creates and returns an identical copy of the current permission.
            </summary>
            <returns>A copy of the current permission.</returns>
        </member>
        <member name="M:VC3.ComponentModel.SecurityPermission.Intersect(VC3.ComponentModel.Permission)">
            <summary>
            Creates and returns a permission that is the intersection
            of the current permission and the specified permission.
            </summary>
            <param name="target">
            A permission to intersect with the current permission.
            It must be of the same type as the current permission.
            </param>
            <returns>
            A new permission that represents the intersection of the current
            permission and the specified permission. This new permission is a null
            reference (Nothing in Visual Basic) if the intersection is empty.
            </returns>
        </member>
        <member name="M:VC3.ComponentModel.SecurityPermission.Union(VC3.ComponentModel.Permission)">
            <summary>
            Creates a permission that is the union of the
            current permission and the specified permission.
            </summary>
            <param name="target">
            A permission to combine with the current permission.
            It must be of the same type as the current permission.
            </param>
            <returns>
            A new permission that represents the union of the
            current permission and the specified permission.
            </returns>
        </member>
        <member name="M:VC3.ComponentModel.SecurityPermission.IsUserAllowed(VC3.Security.Authentication.IUser)">
            <summary>
            Returns <c>true</c> if the current permission is allowed for the specified user, otherwise <c>false</c>.
            </summary>
            <param name="user">The user to check</param>
        </member>
        <member name="M:VC3.ComponentModel.SecurityPermission.CheckAuthorization(VC3.ComponentModel.SecurityPermission)">
            <summary>
            Performs the authorization check used by <see cref="P:VC3.ComponentModel.SecurityPermission.IsAllowed"/>
            and <paramref name="target"/> to determine whether the current permission
            can perform any of the operations represented by the target permission.
            </summary>
            <param name="target">The permission to authorize.</param>
            <returns><c>true</c> if the current permission represents authorization to
            perform the requested target operations, otherwise <c>false.</c></returns>
            <remarks>Subclasses may override this method to perform authorization checks
            in another way, such as comparing the target permissions to permissions
            stored in a database.</remarks>
        </member>
        <member name="M:VC3.ComponentModel.SecurityPermission.System#Security#ISecurityEncodable#ToXml">
            <summary>
            Creates an XML encoding of the security object and its current state.
            </summary>
            <returns>An XML encoding of the security object, including any state information.</returns>
        </member>
        <member name="M:VC3.ComponentModel.SecurityPermission.System#Security#ISecurityEncodable#FromXml(System.Security.SecurityElement)">
            <summary>
            Reconstructs a security object with a specified state from an XML encoding.
            </summary>
            <param name="e">The XML encoding to use to reconstruct the security object.</param>
        </member>
        <member name="M:VC3.ComponentModel.SecurityPermission.ToString">
            <summary>
            Returns the name of the permission.
            </summary>
        </member>
        <member name="P:VC3.ComponentModel.SecurityPermission.IsAllowed">
            <summary>
            Returns <c>true</c> if the current permission is allowed for the current user, otherwise <c>false</c>.
            </summary>
        </member>
        <member name="P:VC3.ComponentModel.SecurityPermission.NoPermissionMessage">
            <summary>
            Gets a standard message to display when a user
            does not have sufficient permissions.
            </summary>
        </member>
        <member name="M:VC3.Security.Authorization.ContextPermission.#ctor(VC3.Security.Authorization.IRole)">
            <summary>
            Creates a new ContextPermission instance granting permissions
            for the specified context identifier and role.
            </summary>
            <param name="role">The role to grant permission for in the specified context.</param>
        </member>
        <member name="M:VC3.Security.Authorization.ContextPermission.#ctor(System.Object,VC3.Security.Authorization.IRole)">
            <summary>
            Creates a new ContextPermission instance granting permissions
            for the specified context identifier and role.
            </summary>
            <param name="identifier">The context identifier, or null to specify the default context.</param>
            <param name="role">The role to grant permission for in the specified context.</param>
        </member>
        <member name="M:VC3.Security.Authorization.ContextPermission.#ctor(VC3.ComponentModel.BusinessObject,VC3.Security.Authorization.IRole)">
            <summary>
            Creates a new ContextPermission instance granting permissions
            for the specified context identifier and role.
            </summary>
            <param name="context">The context identifier, or null to specify the default context.</param>
            <param name="role">The role to grant permission for in the specified context.</param>
        </member>
        <member name="M:VC3.Security.Authorization.ContextPermission.#ctor(System.Object[],VC3.Security.Authorization.IRole)">
            <summary>
            Creates a new ContextPermission instance granting permissions
            for the specified context identifiers and role.
            </summary>
            <param name="identifiers">The context identifier, or null to specify the default context.</param>
            <param name="role">The role to grant permission for in the specified context.</param>
        </member>
        <member name="M:VC3.Security.Authorization.ContextPermission.#ctor(System.Object,VC3.Security.Authorization.IRole[])">
            <summary>
            Creates a new ContextPermission instance granting permissions
            for the specified context identifier and roles.
            </summary>
            <param name="identifier">The context identifier, or null to specify the default context.</param>
            <param name="roles">The roles to grant permission for in the specified context.</param>
        </member>
        <member name="M:VC3.Security.Authorization.ContextPermission.#ctor(System.Object,VC3.Security.Authorization.IRole,System.Boolean)">
            <summary>
            Creates a new ContextPermission instance granting or denying permissions
            for the specified context identifier and role.
            </summary>
            <param name="identifier">The context identifier, or null to specify the default context.</param>
            <param name="role">The role to grant or deny permission for in the specified context.</param>
            <param name="deny">A flag indicating whether to grant or deny permissions.</param>
        </member>
        <member name="M:VC3.IO.DataFileRecognizer.OpenReader(System.IO.Stream,System.Boolean,VC3.IO.DelimitedFormat)">
            <summary>
            Discovers the columns in a delimited stream and returns a reader to read it
            </summary>
        </member>
        <member name="M:VC3.IO.DataFileRecognizer.OpenReader(System.IO.Stream,System.Boolean)">
            <summary>
            Discovers the columns in a delimited stream and returns a reader to read it
            </summary>
        </member>
        <member name="M:VC3.IO.DataFileRecognizer.GetStreamReader(System.IO.Stream,System.Text.Encoding)">
            <summary>
            Returns a <see cref="T:System.IO.StreamReader"/> based on the source <see cref="T:System.IO.Stream"/>.  This method
            automatically detects the encoding or uses <paramref name="defaultEncoding"/>
            if a good guess cant be made.
            </summary>
        </member>
        <member name="M:VC3.IO.DataFileRecognizer.DetectEncoding(System.IO.Stream,System.Text.Encoding)">
            <summary>
            Attempts to determine the encoding of a stream.
            </summary>
            <param name="source">The source <see cref="T:System.IO.Stream"/> for which encoding is to be determined.</param>
            <param name="defaultEncoding">The <see cref="T:System.Text.Encoding"/> to return if no match is found</param>
            <returns>The <see cref="T:System.Text.Encoding"/> of the underlying <see cref="T:System.IO.Stream"/>, 
            or <paramref name="defaultEncoding"/> if no match is found.</returns>
        </member>
        <member name="M:VC3.IO.DataFileRecognizer.InspectByteOrderMark(System.IO.Stream)">
            <summary>
            Attempts to determine file encoding from Byte Order Mark
            </summary>
        </member>
        <member name="M:VC3.IO.DataFileRecognizer.CheckForUnicode(System.IO.Stream)">
            <summary>
            Checks for Unicode
            </summary>
        </member>
        <member name="M:VC3.IO.DataFileRecognizer.OverlapMatches(System.Byte[],System.Byte[],System.Int32)">
            <summary>
            Returns true if the two byte arrays match across
            the length of the shortest array
            </summary>
        </member>
        <member name="T:VC3.IO.DataFileColumn">
            <summary>
            Definition of a column. Allows subclasses to define specific formatting rules.
            </summary>
        </member>
        <member name="M:VC3.IO.DataFileColumn.#ctor(System.String)">
            <summary>
            Creates a new column.
            </summary>
            <param name="name">The name used to identify the column</param>
        </member>
        <member name="M:VC3.IO.DataFileColumn.#ctor(System.String,System.String,System.String)">
            <summary>
            Creates a new column.
            </summary>
            <param name="name">The name used to identify the column</param>
            <param name="readTranslator">Used to transform data during reads</param>
            <param name="writeTranslator">Used to transform data during writes</param>
        </member>
        <member name="M:VC3.IO.DataFileColumn.FromFileFormat(System.String,VC3.IO.TranslationContext)">
            <summary>
            Used to translate between a file format and the application format.
            </summary>
            <param name="s">File-formatted value</param>
            <param name="context"></param>
            <returns>Application-formatted value</returns>
        </member>
        <member name="M:VC3.IO.DataFileColumn.ToFileFormat(System.Object,VC3.IO.TranslationContext)">
            <summary>
            Used to translate between the application format and file format.
            </summary>
            <param name="s">Application-formatted value</param>
            <param name="context"></param>
            <returns>File-formatted value</returns>
        </member>
        <member name="M:VC3.IO.DataFileColumn.ToFileFormat(System.Object)">
            <summary>
            Used to translate between the application format and file format.
            </summary>
            <param name="s">Application-formatted value</param>
            <returns>File-formatted value</returns>
        </member>
        <member name="M:VC3.IO.DataFileColumn.FromFileFormat(System.String)">
            <summary>
            Used to translate between a file format and the application format.
            </summary>
            <param name="s">File-formatted value</param>
            <returns>Application-formatted value</returns>
        </member>
        <member name="P:VC3.IO.DataFileColumn.Name">
            <summary>
            Name used to identify the column
            </summary>
        </member>
        <member name="P:VC3.IO.DataFileColumn.IsFiller">
            <summary>
            Flags column that are used as filler,
            column to omit from reading and writing
            </summary>
        </member>
        <member name="P:VC3.IO.DataFileColumn.ReadTranslator">
            <summary>
            The <see cref="T:VC3.IO.Translator"/> used to create the from file
            </summary>
        </member>
        <member name="P:VC3.IO.DataFileColumn.WriteTranslator">
            <summary>
            The <see cref="T:VC3.IO.Translator"/> used to create the to file format
            </summary>
        </member>
        <member name="T:VC3.IO.DelimitedColumn">
            <summary>
            Handles text found in delimited data files.  Derived classes
            can further restrict the format of a column so support application-specific 
            data types and formats.
            </summary>
        </member>
        <member name="M:VC3.IO.DelimitedColumn.#ctor(System.String)">
            <summary>
            Creates a new column.
            </summary>
            <param name="name">The name used to identify the column</param>
        </member>
        <member name="M:VC3.IO.DelimitedColumn.#ctor(System.String,System.String)">
            <summary>
            Creates a new column.
            </summary>
            <param name="name">The name used to identify the column</param>
        </member>
        <member name="M:VC3.IO.DelimitedColumn.#ctor(System.String,System.String,System.String)">
            <summary>
            Creates a new column.
            </summary>
            <param name="name">The name used to identify the column</param>
        </member>
        <member name="M:VC3.IO.DelimitedColumn.ToFileFormat(System.Object)">
            <summary>
            This method may be overridden to handle conversion from 
            application-specific data types to strings.
            </summary>
            <param name="o">String to encode</param>
            <returns>Encoded value</returns>
        </member>
        <member name="M:VC3.IO.DelimitedColumn.FromFileFormat(System.String)">
            <summary>
            This method may be overridden to handle conversion from 
            string to application-specific data types.
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:VC3.IO.DelimitedColumn.CreateColumns(System.String[])">
            <summary>
            Creates an array of <see cref="T:VC3.IO.DelimitedColumn"/> instances based on the 
            specified array of <see cref="T:System.String"/> names.
            </summary>
            <param name="names">The names of the columns</param>
            <returns>A corresponding array of <see cref="T:VC3.IO.DelimitedColumn"/> instances</returns>
        </member>
        <member name="P:VC3.IO.DelimitedColumn.Format">
            <summary>
            Specifies the <see cref="T:VC3.IO.DelimitedFormat"/> that should be
            used by this column.  Controls how values are read and written.
            </summary>
        </member>
        <member name="T:VC3.IO.DelimitedFormat">
            <summary>
            Represents a type of delimted file format such as <see cref="F:VC3.IO.DelimitedFormat.CsvFormat"/>
            and <see cref="F:VC3.IO.DelimitedFormat.TabFormat"/>.  This format is used by a <see cref="T:VC3.IO.DelimitedColumn"/>
            to control general format options.
            </summary>
        </member>
        <member name="F:VC3.IO.DelimitedFormat.CsvFormat">
            <summary>
            Represents a comma-seperated format with a double-quote (") text qualifier.
            </summary>
        </member>
        <member name="F:VC3.IO.DelimitedFormat.TabFormat">
            <summary>
            Represents a tab-seperated format with a double-quote (") text qualifier.
            </summary>
        </member>
        <member name="M:VC3.IO.DelimitedFormat.GetFields(System.String)">
            <summary>
            Parses a record into fields based on this format
            </summary>
            <returns></returns>
        </member>
        <member name="M:VC3.IO.DelimitedFormat.GetRecord(System.String[])">
            <summary>
            Gets a record based on some field values.
            </summary>
            <param name="fields"></param>
            <returns></returns>
        </member>
        <member name="M:VC3.IO.DelimitedFormat.#ctor(System.Char)">
            <summary>
            Creates a new Delimited Format
            </summary>
            <param name="delimiter">Single-character boundary character between fields</param>
        </member>
        <member name="M:VC3.IO.DelimitedFormat.#ctor(System.Char,System.Char)">
            <summary>
            Creates a new Delimited Format
            </summary>
            <param name="delimiter">Single-character boundary character between fields</param>
            <param name="textQualifier">Single-character used to escape field values</param>
        </member>
        <member name="M:VC3.IO.DelimitedFormat.#ctor(System.Char,System.Char,System.Boolean)">
            <summary>
            Creates a new Delimited Format
            </summary>
            <param name="delimiter">Single-character boundary character between fields</param>
            <param name="textQualifier">Single-character used to escape field values</param>
            <param name="alwaysWriteTextQualifier">Specfies the value for <see cref="P:VC3.IO.DelimitedFormat.AlwaysWriteTextQualifier"/></param>
        </member>
        <member name="P:VC3.IO.DelimitedFormat.Delimiter">
            <summary>
            Single-character boundary character between fields
            </summary>
        </member>
        <member name="P:VC3.IO.DelimitedFormat.TextQualifier">
            <summary>
            Single-character string used to escape field values
            </summary>
        </member>
        <member name="P:VC3.IO.DelimitedFormat.AlwaysWriteTextQualifier">
            <summary>
            Indicates that the format requires that the <see cref="P:VC3.IO.DelimitedFormat.TextQualifier"/>
            always be written by each <see cref="T:VC3.IO.DelimitedColumn"/> when 
            writing data. Defaults to false.
            </summary>
        </member>
        <member name="T:VC3.IO.FixedWidthColumn">
            <summary>
            Definition of a column of a fixed width file.
            </summary>
        </member>
        <member name="M:VC3.IO.FixedWidthColumn.#ctor(System.String,System.Int32)">
            <summary>
            Creates a new column.
            </summary>
            <param name="name">The name used to identify the column</param>
            <param name="width">Number of characters in the column</param>
        </member>
        <member name="M:VC3.IO.FixedWidthColumn.#ctor(System.String,System.Int32,System.Int32,System.String,System.String)">
            <summary>
            Creates a new column with file start position of 0.
            </summary>
            <param name="name">The name used to identify the column</param>
            <param name="start">The position of the first character in the column.</param>
            <param name="end">The position of the last character in the column.</param>
        </member>
        <member name="M:VC3.IO.FixedWidthColumn.#ctor(System.String,System.Int32,System.Int32,System.Int32,System.String,System.String)">
            <summary>
            Creates a new column with file start position of 0.
            </summary>
            <param name="name">The name used to identify the column</param>
            <param name="start">The position of the first character in the column.</param>
            <param name="end">The position of the last character in the column.</param>
        </member>
        <member name="M:VC3.IO.FixedWidthColumn.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
            Creates a new column with file start position of 0.
            </summary>
            <param name="name">The name used to identify the column</param>
            <param name="start">The position of the first character in the column.</param>
            <param name="end">The position of the last character in the column.</param>
        </member>
        <member name="M:VC3.IO.FixedWidthColumn.#ctor(System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a new column.
            </summary>
            <param name="name">The name used to identify the column</param>
            <param name="start">The position of the first character in the column.</param>
            <param name="end">The position of the last character in the column.</param>
            <param name="fileStart">Start position of the record. Should be 0 or 1. Allows for 1-based indexes.</param>
        </member>
        <member name="M:VC3.IO.FixedWidthColumn.Zeros(System.Int32)">
            <summary>
            Returns a string of 0's
            </summary>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:VC3.IO.FixedWidthColumn.Spaces(System.Int32)">
            <summary>
            Returns a string of  's
            </summary>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:VC3.IO.FixedWidthColumn.CalcRecordSize(VC3.IO.FixedWidthColumn[])">
            <summary>
            The size of the record in bytes
            </summary>
            <param name="columns"></param>
            <returns></returns>
        </member>
        <member name="M:VC3.IO.FixedWidthColumn.CalcOffsets(VC3.IO.FixedWidthColumn[])">
            <summary>
            Calculates the offsets of each column
            </summary>
            <param name="columns"></param>
            <returns></returns>
        </member>
        <member name="P:VC3.IO.FixedWidthColumn.Width">
            <summary>
            Number of characters in the column
            </summary>
        </member>
        <member name="P:VC3.IO.FixedWidthColumn.Offset">
            <summary>
            The calculated offset of this column.
            </summary>
        </member>
        <member name="T:VC3.IO.FixedWidthFillerColumn">
            <summary>
            Columns to omit from reading and writing from a fixed width file.
            </summary>
        </member>
        <member name="M:VC3.IO.FixedWidthFillerColumn.#ctor(System.String,System.Int32)">
            <summary>
            Creates a new column.
            </summary>
            <param name="name">The name used to identify the column</param>
            <param name="width">Number of characters in the column</param>
        </member>
        <member name="M:VC3.IO.FixedWidthFillerColumn.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
            Creates a new filler column with file start position of 0.
            </summary>
            <param name="name">The name used to identify the column</param>
            <param name="start">The position of the first character in the column.</param>
            <param name="end">The position of the last character in the column.</param>
        </member>
        <member name="M:VC3.IO.FixedWidthFillerColumn.#ctor(System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a new filler column.
            </summary>
            <param name="name">The name used to identify the column</param>
            <param name="start">The position of the first character in the column.</param>
            <param name="end">The position of the last character in the column.</param>
            <param name="fileStart">Start position of the record. Should be 0 or 1. Allows for 1-based indexes.</param>
        </member>
        <member name="M:VC3.IO.FixedWidthFillerColumn.FromFileFormat(System.String)">
            <summary>
            Used to translate between a file format and the application format.
            </summary>
            <param name="s">File-formatted value</param>
            <returns>Application-formatted value</returns>
        </member>
        <member name="M:VC3.IO.FixedWidthFillerColumn.ToFileFormat(System.Object)">
            <summary>
            Used to translate between the application format and file format.
            </summary>
            <param name="o">Application-formatted value</param>
            <returns>File-formatted value</returns>
        </member>
        <member name="T:VC3.IO.DataFileFieldException">
            <summary>
            Thrown when a field cannot be read correctly by a <see cref="T:VC3.IO.DataFileStreamReader"/>
            </summary>
        </member>
        <member name="P:VC3.IO.DataFileFieldException.LineNumber">
            <summary>
            The line the error occured on.
            </summary>
        </member>
        <member name="T:VC3.IO.DataFileRecordException">
            <summary>
            Holds information about an application error that occured while 
            reading from a DataFileStreamReader.
            </summary>
        </member>
        <member name="P:VC3.IO.DataFileRecordException.LineNumber">
            <summary>
            The line the error occured on.
            </summary>
        </member>
        <member name="P:VC3.IO.DataFileRecordException.Record">
            <summary>
            The record that the error is associated with.
            </summary>
        </member>
        <member name="T:VC3.IO.DataFileStreamBase">
            <summary>
            Base class of <see cref="T:VC3.IO.DataFileStreamReader"/> and <see cref="T:VC3.IO.DataFileStreamWriter"/>
            classes.
            </summary>
        </member>
        <member name="M:VC3.IO.DataFileStreamBase.GetOrdinal(System.String)">
            <summary>
            Maps a column name to a column number
            </summary>
            <param name="columnName"></param>
            <returns></returns>
        </member>
        <member name="M:VC3.IO.DataFileStreamBase.GetOrdinal(System.String,System.Boolean)">
            <summary>
            Maps a column name to a column number
            </summary>
            <param name="columnName"></param>
            <returns></returns>
        </member>
        <member name="M:VC3.IO.DataFileStreamBase.Close">
            <summary>
            Implemented by subclasses to close the underlying stream.
            </summary>
        </member>
        <member name="M:VC3.IO.DataFileStreamBase.Dispose">
            <summary>
            Closes the underlying stream
            </summary>
        </member>
        <member name="P:VC3.IO.DataFileStreamBase.Columns">
            <summary>
            The layout of each record.  Can be changed after
            a record has been read so long as the new record
            size is the same as the original columns.
            </summary>
        </member>
        <member name="T:VC3.IO.IDataFileStreamReader">
            <summary>
            Interface for reading from a <see cref="T:VC3.IO.DataFileStreamBase"/>.
            </summary>
        </member>
        <member name="P:VC3.IO.IDataFileStreamReader.Columns">
            <summary>
            The layout of each record.  Can be changed after
            a record has been read so long as the new record
            size is the same as the original columns.
            </summary>
        </member>
        <member name="P:VC3.IO.IDataFileStreamReader.RecordNumber">
            <summary>
            1-based number of the current record
            </summary>
        </member>
        <member name="P:VC3.IO.IDataFileStreamReader.Record">
            <summary>
            The current unparsed record contents.
            </summary>
        </member>
        <member name="T:VC3.IO.EmptyRecordBehavior">
            <summary>
            The EmptyRecordBehavior enumeration represents the type of 
            behavior expected during the <see cref="M:VC3.IO.DataFileStreamReader.Read"/> of 
            a blank line or empty record. 
            Skip indicates that the record would be skipped.
            Exception indicates an exception would be thrown.
            EndOfFile indicates an end of the file has been reached
            </summary>
        </member>
        <member name="T:VC3.IO.RecordInfo">
            <summary>
            Utility class used by the <see cref="T:VC3.IO.DataFileStreamReader"/>.
            </summary>
        </member>
        <member name="T:VC3.IO.DataFileStreamReader">
            <summary>
            Encapsulates reading from a stream that contains data records.
            </summary>
        </member>
        <member name="M:VC3.IO.DataFileStreamReader.#ctor(System.IO.Stream,VC3.IO.DataFileColumn[])">
            <param name="source">The data read</param>
            <param name="columns">The layout of each recInfo.Data</param>
        </member>
        <member name="M:VC3.IO.DataFileStreamReader.#ctor(System.IO.TextReader,VC3.IO.DataFileColumn[])">
            <param name="source">The data read</param>
            <param name="columns">The layout of each recInfo.Data</param>
        </member>
        <member name="M:VC3.IO.DataFileStreamReader.GetField(System.Int32)">
            <summary>
            Retrieves a field from the current recInfo.Data. Fields
            are extracted from the recInfo.Data as they are requested and then
            cached.
            </summary>
            <param name="i">The field number to retrieve</param>
            <returns>The field</returns>
        </member>
        <member name="M:VC3.IO.DataFileStreamReader.Read(System.Int32)">
            <summary>
            Implemented by subclasses.  Extracts a field from the
            current <see cref="P:VC3.IO.DataFileStreamReader.Record"/>. The return value will
            be formatted by the column before passed back to clients.
            </summary>
            <param name="field">The field index</param>
            <returns></returns>
        </member>
        <member name="M:VC3.IO.DataFileStreamReader.ValidateRecord">
            <summary>
            Override in subclasses to validate records after they have been read
            </summary>
        </member>
        <member name="M:VC3.IO.DataFileStreamReader.RemoveInvalidChars(System.String)">
            <summary>
            Checks a string to see if it contains the UNIX eof ( char 26 (SUB) ) character and 
            removes it if it exists or returns null if it is the only character in the line.
            </summary>
            <param name="sourceRecord">the current line in the stream</param>
            <returns>string</returns>
        </member>
        <member name="M:VC3.IO.DataFileStreamReader.Close">
            <summary>
            Closes data stream
            </summary>
        </member>
        <member name="M:VC3.IO.DataFileStreamReader.ReadRecord(VC3.IO.RecordInfo)">
            <summary>
            Reads record data from the underlying stream
            </summary>
            <param name="recInfo">The record to be read</param>
        </member>
        <member name="M:VC3.IO.DataFileStreamReader.Read">
            <summary>
            Advances to the next recInfo.Data in the data
            </summary>
            <returns>True if a recInfo.Data was read. False if no more records.</returns>
        </member>
        <member name="P:VC3.IO.DataFileStreamReader.EmptyRecordBehavior">
            <summary>
            Gets or sets the behavior during <see cref="M:VC3.IO.DataFileStreamReader.Read"/> when an empty recInfo.Data or blank line
            is encountered.  The default behavior is <see cref="P:VC3.IO.DataFileStreamReader.EmptyRecordBehavior"/>.Exception
            </summary>
        </member>
        <member name="P:VC3.IO.DataFileStreamReader.Columns">
            <summary>
            The layout of each recInfo.Data.  Can be changed after
            a recInfo.Data has been read so long as the new recInfo.Data
            size is the same as the original columns.
            </summary>
        </member>
        <member name="P:VC3.IO.DataFileStreamReader.RecordNumber">
            <summary>
            1-based number of the current recInfo.Data
            </summary>
        </member>
        <member name="P:VC3.IO.DataFileStreamReader.Record">
            <summary>
            The current unparsed recInfo.Data contents.
            </summary>
        </member>
        <member name="P:VC3.IO.DataFileStreamReader.IsClosed">
            <summary>
            returns true if steam is closed.
            </summary>
        </member>
        <member name="T:VC3.IO.DataReaderFilter">
            <summary>
            Delegate for filtering an datareader. Returns true
            if item should be included in the data.
            </summary>
        </member>
        <member name="T:VC3.IO.FilteredDataFileStreamReader">
            <summary>
            Reads from an <see cref="T:VC3.IO.IDataFileStreamReader"/>, filtering out certain records
            </summary>
        </member>
        <member name="T:VC3.IO.FilteredDataReader">
            <summary>
            Reads in a data, filtering out certain items.
            </summary>
        </member>
        <member name="M:VC3.IO.FilteredDataReader.#ctor(System.Data.IDataReader,VC3.IO.DataReaderFilter)">
            <summary>
            Creates new FilteredDataReader
            </summary>
            <param name="source">DataReader to filter</param>
            <param name="filter">use to filter data</param>
        </member>
        <member name="M:VC3.IO.FilteredDataReader.OnFilter(System.Int32,System.Data.IDataRecord)">
            <summary>
            Determines if an item should be included in the data.
            </summary>
            <param name="index">Position of the item to test</param>
            <param name="item">Item to test</param>
            <returns>True if item should be included in the data</returns>
        </member>
        <member name="M:VC3.IO.FilteredDataReader.Read">
            <summary>
            Advances to the next record in the data
            </summary>
            <returns>True if a record was read. False if no more records.</returns>
        </member>
        <member name="M:VC3.IO.FilteredDataReader.Close">
            <summary>
            Closes data stream
            </summary>
        </member>
        <member name="P:VC3.IO.FilteredDataReader.BaseDataReader">
            <summary>
            Gets underlying DataReader
            </summary>
        </member>
        <member name="P:VC3.IO.FilteredDataReader.IsClosed">
            <summary>
            returns true if steam is closed.
            </summary>
        </member>
        <member name="M:VC3.IO.FilteredDataFileStreamReader.#ctor(VC3.IO.IDataFileStreamReader,VC3.IO.DataReaderFilter)">
            <summary>
            Creates new FilteredDataFileStreamReader
            </summary>
            <param name="source">DataReader to filter</param>
            <param name="filter">use to filter data</param>
        </member>
        <member name="P:VC3.IO.FilteredDataFileStreamReader.Columns">
            <summary>
            The layout of each record taken from the source <see cref="T:VC3.IO.IDataFileStreamReader"/>
            </summary>
        </member>
        <member name="P:VC3.IO.FilteredDataFileStreamReader.RecordNumber">
            <summary>
            1-based number of the current record
            </summary>
        </member>
        <member name="P:VC3.IO.FilteredDataFileStreamReader.Record">
            <summary>
            The current unparsed record contents.
            </summary>
        </member>
        <member name="T:VC3.IO.FixedWidthStreamReader">
            <summary>
            Encapsulates reading from a stream that contains fixed-width records.
            </summary>
        </member>
        <member name="M:VC3.IO.FixedWidthStreamReader.#ctor(System.IO.Stream,VC3.IO.FixedWidthColumn[])">
            <param name="source">The data read</param>
            <param name="columns">The layout of each record</param>
        </member>
        <member name="M:VC3.IO.FixedWidthStreamReader.#ctor(System.IO.TextReader,VC3.IO.FixedWidthColumn[])">
            <param name="source">The data read</param>
            <param name="columns">The layout of each record</param>
        </member>
        <member name="M:VC3.IO.FixedWidthStreamReader.ValidateColumns(VC3.IO.FixedWidthColumn[])">
            <summary>
            
            </summary>
        </member>
        <member name="M:VC3.IO.FixedWidthStreamReader.Read(System.Int32)">
            <summary>
            Reads the raw value of a field from the fixed width record.
            </summary>
            <param name="field">The index of the field.</param>
            <returns>The raw field value.</returns>
        </member>
        <member name="M:VC3.IO.FixedWidthStreamReader.ValidateRecord">
            <summary>
            Virtual method to check whether the record is well-formed or not. By default, 
            if the length of the record to be parsed matches the defined length, this
            record is considered to be well-formed. Otherwise, it is considered malformatted.  
            </summary>
        </member>
        <member name="P:VC3.IO.FixedWidthStreamReader.IgnoreTrailingFiller">
            <summary>
            Gets or sets the boolean flag that indicates whether to ignore the 
            trailing filler when parsing the records. Use this flag if there's 
            a trailing filler and its length may vary in different records. If 
            this flag is set, no need to declare the last filler column in the
            definition of the fixed width columns. 
            </summary>
        </member>
        <member name="P:VC3.IO.FixedWidthStreamReader.Columns">
            <summary>
            The layout of each record.  Can be changed after
            a record has been read so long as the new record
            size is the same as the original columns.
            </summary>
        </member>
        <member name="T:VC3.IO.DelimitedStreamReader">
            <summary>
            Encapsulates reading from a stream that contains records that are delimited
            by a special character. <see cref="F:VC3.IO.DelimitedFormat.CsvFormat"/> 
            and <see cref="F:VC3.IO.DelimitedFormat.TabFormat"/> are two typical formats however,
            any single-character delimiter is supported.  
            </summary>
        </member>
        <member name="M:VC3.IO.DelimitedStreamReader.#ctor(System.IO.TextReader,VC3.IO.DelimitedColumn[],System.Int32,VC3.IO.DelimitedFormat)">
            <param name="source">The data read</param>
            <param name="columns">The layout of each record</param>
            <param name="headerCount">Number of header rows</param>
            <param name="format">Delimiter format</param>
        </member>
        <member name="M:VC3.IO.DelimitedStreamReader.#ctor(System.IO.TextReader,VC3.IO.DelimitedColumn[],System.Boolean,VC3.IO.DelimitedFormat)">
            <param name="source">The data read</param>
            <param name="columns">The layout of each record</param>
            <param name="hasHeaderRecord">File has header</param>
            <param name="format">Delimiter format</param>
        </member>
        <member name="M:VC3.IO.DelimitedStreamReader.#ctor(System.IO.TextReader,VC3.IO.DelimitedColumn[],System.Int32,System.Char,System.Char)">
            <param name="source">The data read</param>
            <param name="columns">The layout of each record</param>
            <param name="headerCount">Number of header rows</param>
            <param name="delimiter">Delimiter</param>
            <param name="textQualifier">Text Qualifier</param>
        </member>
        <member name="M:VC3.IO.DelimitedStreamReader.#ctor(System.IO.TextReader,VC3.IO.DelimitedColumn[],System.Boolean,System.Char,System.Char)">
            <param name="source">The data read</param>
            <param name="columns">The layout of each record</param>
            <param name="hasHeaderRecord">File has header</param>
            <param name="delimiter">Delimiter</param>
            <param name="textQualifier">Text Qualifier</param>
        </member>
        <member name="M:VC3.IO.DelimitedStreamReader.#ctor(System.IO.Stream,VC3.IO.DelimitedColumn[],System.Int32,VC3.IO.DelimitedFormat)">
            <param name="source">The data read</param>
            <param name="columns">The layout of each record</param>
            <param name="headerCount">Number of header rows</param>
            <param name="format">Delimiter format</param>
        </member>
        <member name="M:VC3.IO.DelimitedStreamReader.#ctor(System.IO.Stream,VC3.IO.DelimitedColumn[],System.Boolean,VC3.IO.DelimitedFormat)">
            <param name="source">The data read</param>
            <param name="columns">The layout of each record</param>
            <param name="hasHeaderRecord">File has header</param>
            <param name="format">Delimiter format</param>
        </member>
        <member name="M:VC3.IO.DelimitedStreamReader.#ctor(System.IO.Stream,VC3.IO.DelimitedColumn[],System.Int32,System.Char,System.Char)">
            <param name="source">The data read</param>
            <param name="columns">The layout of each record</param>
            <param name="headerCount">Number of header rows</param>
            <param name="delimiter">Delimiter</param>
            <param name="textQualifier">Text Qualifier</param>
        </member>
        <member name="M:VC3.IO.DelimitedStreamReader.#ctor(System.IO.Stream,VC3.IO.DelimitedColumn[],System.Boolean,System.Char,System.Char)">
            <param name="source">The data read</param>
            <param name="columns">The layout of each record</param>
            <param name="hasHeaderRecord">File has header</param>
            <param name="delimiter">Delimiter</param>
            <param name="textQualifier">Text Qualifier</param>
        </member>
        <member name="M:VC3.IO.DelimitedStreamReader.Read">
            <summary>
            The implementation of <see cref="M:VC3.IO.DataFileStreamReader.Read"/>. 
            By default the correct number of fields need to be present. 
            Otherwise an exception will be thrown to indicate the missing 
            fields. User can explicitely set the <see cref="P:VC3.IO.DelimitedStreamReader.IgnoreMissingColumns"/>
            to be true to allow the empty string "" to be assumed for the empty fields. 
            </summary>
            <returns>Returns true if there's more record to read.</returns>
        </member>
        <member name="M:VC3.IO.DelimitedStreamReader.Read(System.Int32)">
            <summary>
            Reads the raw value of a field from the record.
            </summary>
            <param name="field">The index of the field.</param>
            <returns>The raw field value.</returns>
        </member>
        <member name="P:VC3.IO.DelimitedStreamReader.TrailingFillerCount">
            <summary>
            Read-write property allowing retrieval of the number of 
            trailing filler count
            </summary>
        </member>
        <member name="P:VC3.IO.DelimitedStreamReader.IgnoreMissingColumns">
            <summary>
            Read write property allowing the empty field to assume the default
            empty string value. 
            </summary>
        </member>
        <member name="P:VC3.IO.DelimitedStreamReader.MinimumColumns">
            <summary>
            The minimum number of columns that should exist in each record.  Initially 0.
            This check is independent of IgnoreMissingColumns.
            </summary>
        </member>
        <member name="T:VC3.IO.DataFileStreamWriter">
            <summary>
            Encapsulates writing from a stream that contains fixed-width records.
            </summary>
        </member>
        <member name="T:VC3.IO.IDataWriter">
            <summary>
            Interface for writing structured data.  Similar to <see cref="T:System.Data.IDataReader"/>
            but for writing instead of reading.
            </summary>
        </member>
        <member name="M:VC3.IO.IDataWriter.SetField(System.Int32,System.Object)">
            <summary>
            Sets a field of the current record.
            </summary>
            <param name="ordinal">The column the value corresponds to</param>
            <param name="value">the value to write</param>
        </member>
        <member name="M:VC3.IO.IDataWriter.SetField(System.String,System.Object)">
            <summary>
            Sets a field of the current record.
            </summary>
            <param name="columnName">The column the value corresponds to</param>
            <param name="value">the value to write</param>
        </member>
        <member name="M:VC3.IO.IDataWriter.WriteRecord">
            <summary>
            Writes the current record to the destination stream 
            and clears the record buffer to prepare for the next record.
            </summary>
        </member>
        <member name="M:VC3.IO.IDataWriter.WriteRecords(System.Data.IDataReader)">
            <summary>
            Writes all records from a data reader to the destination stream.
            The fields in the data reader and this writer will be mapped
            to each other based on their names.
            </summary>
            <param name="data">Data source to read from</param>
        </member>
        <member name="M:VC3.IO.IDataWriter.WriteRecords(System.Data.IDataReader,System.Int32[])">
            <summary>
            Writes all records from a data reader to the destination stream.
            The fields in the data reader and this writer will be mapped
            to each other based on their names.
            </summary>
            <param name="data">Data source to read from</param>
            <param name="ordinals">Positions of the fields in the data set to write</param>
        </member>
        <member name="M:VC3.IO.IDataWriter.Close">
            <summary>
            Closes the underlying stream being written to
            </summary>
        </member>
        <member name="M:VC3.IO.DataFileStreamWriter.#ctor(System.IO.TextWriter,VC3.IO.DataFileColumn[])">
            <param name="destination">The underlying stream to write to</param>
            <param name="columns">The layout of each of record</param>
        </member>
        <member name="M:VC3.IO.DataFileStreamWriter.#ctor(System.IO.Stream,VC3.IO.DataFileColumn[])">
            <param name="destination">The underlying stream to write to</param>
            <param name="columns">The layout of each of record</param>
        </member>
        <member name="M:VC3.IO.DataFileStreamWriter.ResetRecord">
            <summary>
            Clears the current record in preperation
            for writing the next record.
            </summary>
        </member>
        <member name="M:VC3.IO.DataFileStreamWriter.SetField(System.String,System.Object)">
            <summary>
            Sets a field of the current record.
            </summary>
            <param name="columnName">The column the value corresponds to</param>
            <param name="value">the value to write</param>
        </member>
        <member name="M:VC3.IO.DataFileStreamWriter.SetField(System.Int32,System.Object)">
            <summary>
            Sets a field of the current record.
            </summary>
            <param name="ordinal">The column the value corresponds to</param>
            <param name="value">the value to write</param>
        </member>
        <member name="M:VC3.IO.DataFileStreamWriter.WriteRecord">
            <summary>
            Writes the current record to the destination stream 
            and clears the record buffer to prepare for the next record.
            </summary>
        </member>
        <member name="M:VC3.IO.DataFileStreamWriter.WriteFields">
            <summary>
            Writes all fields to the destination stream.
            </summary>
        </member>
        <member name="M:VC3.IO.DataFileStreamWriter.WriteRecords(System.Data.IDataReader)">
            <summary>
            Writes all records from a data reader to the destination stream.
            The fields in the data reader and this writer will be mapped
            to each other based on their names.
            </summary>
            <param name="data">Data source to read from</param>
        </member>
        <member name="M:VC3.IO.DataFileStreamWriter.WriteRecords(System.Data.IDataReader,System.Int32[])">
            <summary>
            Writes all records from a data reader to the destination stream.
            The fields in the data reader and this writer will be mapped
            to each other based on their names.
            </summary>
            <param name="data">Data source to read from</param>
            <param name="ordinals">Positions of the fields in the data set to write</param>
        </member>
        <member name="M:VC3.IO.DataFileStreamWriter.Close">
            <summary>
            Closes the underlying stream
            </summary>
        </member>
        <member name="P:VC3.IO.DataFileStreamWriter.Columns">
            <summary>
            The layout of each record.  Can be changed after
            a record has been read so long as the new record
            size is the same as the original columns.
            </summary>
        </member>
        <member name="P:VC3.IO.DataFileStreamWriter.Record">
            <summary>
            Gets the current record
            </summary>
        </member>
        <member name="T:VC3.IO.FixedWidthStreamWriter">
            <summary>
            Encapsulates writing to a stream that contains fixed-width records.
            </summary>
        </member>
        <member name="M:VC3.IO.FixedWidthStreamWriter.#ctor(System.IO.TextWriter,VC3.IO.FixedWidthColumn[])">
            <param name="destination">The underlying stream to write to</param>
            <param name="columns">The layout of each of record</param>
        </member>
        <member name="M:VC3.IO.FixedWidthStreamWriter.#ctor(System.IO.Stream,VC3.IO.FixedWidthColumn[])">
            <param name="destination">The underlying stream to write to</param>
            <param name="columns">The layout of each of record</param>
        </member>
        <member name="M:VC3.IO.FixedWidthStreamWriter.WriteFields">
            <summary>
            Writes the fixed width fields to the stream
            </summary>
        </member>
        <member name="P:VC3.IO.FixedWidthStreamWriter.Columns">
            <summary>
            The layout of each record.  Can be changed after
            a record has been read so long as the new record
            size is the same as the original columns.
            </summary>
        </member>
        <member name="T:VC3.IO.DelimitedStreamWriter">
            <summary>
            Encapsulates writing to a stream that contains records that are delimited
            by a special character. <see cref="F:VC3.IO.DelimitedFormat.CsvFormat"/> 
            and <see cref="F:VC3.IO.DelimitedFormat.TabFormat"/> are two typical formats however,
            any single-character delimiter is supported.  
            </summary>
        </member>
        <member name="M:VC3.IO.DelimitedStreamWriter.#ctor(System.IO.TextWriter,VC3.IO.DelimitedColumn[],VC3.IO.DelimitedFormat)">
            <param name="destination">The underlying stream to write to</param>
            <param name="columns">The layout of each of record</param>
        </member>
        <member name="M:VC3.IO.DelimitedStreamWriter.#ctor(System.IO.Stream,VC3.IO.DelimitedColumn[],VC3.IO.DelimitedFormat)">
            <param name="destination">The underlying stream to write to</param>
            <param name="columns">The layout of each of record</param>
        </member>
        <member name="M:VC3.IO.DelimitedStreamWriter.#ctor(System.IO.TextWriter,VC3.IO.DelimitedColumn[],System.Char,System.Char)">
            <param name="destination">The underlying stream to write to</param>
            <param name="columns">The layout of each of record</param>
            <param name="delimiter">Delimiter</param>
            <param name="textQualifier">Text Qualifier</param>
        </member>
        <member name="M:VC3.IO.DelimitedStreamWriter.#ctor(System.IO.Stream,VC3.IO.DelimitedColumn[],System.Char,System.Char)">
            <param name="destination">The underlying stream to write to</param>
            <param name="columns">The layout of each of record</param>
            <param name="delimiter">Delimiter</param>
            <param name="textQualifier">Text Qualifier</param>
        </member>
        <member name="M:VC3.IO.DelimitedStreamWriter.WriteHeaderRecord">
            <summary>
            Writes a header record to the destination stream.  Header record will
            contain the names of the columns as defined by the <see cref="P:VC3.IO.DataFileStreamWriter.Columns"/>
            collection.
            </summary>
        </member>
        <member name="M:VC3.IO.DelimitedStreamWriter.WriteFields">
            <summary>
            Writes the current fields to the destination stream 
            </summary>
        </member>
        <member name="T:VC3.IO.DelimitedStreamSchema">
            <summary>
            Encapsulates a particular delimited file format and its columns
            </summary>
        </member>
        <member name="T:VC3.IO.IDataSchema">
            <summary>
            Interface for a factory that encapsulates a particular, record-oriented, flat file format.
            </summary>
        </member>
        <member name="M:VC3.IO.IDataSchema.AddColumn(System.String,System.Type)">
            <summary>
            Creates a column that can be included in this format's schema.
            </summary>
            <param name="name">Name of the column</param>
            <param name="dataType">CLR type of the data stored in this column</param>
            <returns>New column</returns>
        </member>
        <member name="M:VC3.IO.IDataSchema.CreateReader(System.Object)">
            <summary>
            Creates an <see cref="T:System.Data.IDataReader"/> to read data from the specified data source
            that corresponds to this file format.
            </summary>
        </member>
        <member name="M:VC3.IO.IDataSchema.CreateWriter(System.Object)">
            <summary>
            Creates an <see cref="T:System.Data.IDataReader"/> to write data to the specified data source in
            this format.
            </summary>
        </member>
        <member name="M:VC3.IO.DelimitedStreamSchema.AddColumn(System.String,System.Type)">
            <summary>
            Adds a column to the format
            </summary>
        </member>
        <member name="M:VC3.IO.DelimitedStreamSchema.CreateReader(System.Object)">
            <summary>
            Creates a new <see cref="T:VC3.IO.DelimitedStreamReader"/> to read data from this format
            </summary>
        </member>
        <member name="M:VC3.IO.DelimitedStreamSchema.CreateWriter(System.Object)">
            <summary>
            Creates a new <see cref="T:VC3.IO.DelimitedStreamWriter"/> to write data into this format
            </summary>
        </member>
        <member name="P:VC3.IO.DelimitedStreamSchema.HasHeaderRow">
            <summary>
            True if file the column names as the first row
            </summary>
        </member>
        <member name="P:VC3.IO.DelimitedStreamSchema.DelimitedFormat">
            <summary>
            Information about the delimiter
            </summary>
        </member>
        <member name="T:VC3.IO.XmlDataSchema">
            <summary>
            An XML-specific <see cref="T:VC3.IO.IDataSchema"/>
            </summary>
        </member>
        <member name="M:VC3.IO.XmlDataSchema.OnCreateWriter(System.Xml.XmlWriter)">
            <summary>
            Can be overriden in sub classes to create a specific kind of xml writer
            </summary>
            <param name="destination"></param>
            <returns></returns>
        </member>
        <member name="T:VC3.IO.XmlDataColumn">
            <summary>
            Represents a single "column" of data within an xml document
            </summary>
        </member>
        <member name="P:VC3.IO.XmlDataColumn.Name">
            <summary>
            Display name of the column
            </summary>
        </member>
        <member name="P:VC3.IO.XmlDataColumn.Node">
            <summary>
            Element or attribute name of the column
            </summary>
        </member>
        <member name="P:VC3.IO.XmlDataColumn.Type">
            <summary>
            Data type of data in this column
            </summary>
        </member>
        <member name="T:VC3.IO.XmlDataWriter">
            <summary>
            An <see cref="T:VC3.IO.IDataWriter"/> that writes structured, tabular data to an XML document
            </summary>
        </member>
        <member name="M:VC3.IO.XmlDataWriter.WriteRecords(System.Data.IDataReader)">
            <summary>
            Writes all records from a data reader to the destination stream.
            The fields in the data reader and this writer will be mapped
            to each other based on their names.
            </summary>
            <param name="data">Data source to read from</param>
        </member>
        <member name="M:VC3.IO.XmlDataWriter.WriteRecords(System.Data.IDataReader,System.Int32[])">
            <summary>
            Writes all records from a data reader to the destination stream.
            The fields in the data reader and this writer will be mapped
            to each other based on their names.
            </summary>
            <param name="data">Data source to read from</param>
            <param name="ordinals">Positions of the fields in the data set to write</param>
        </member>
        <member name="M:VC3.IO.XmlDataWriter.WriteRecord">
            <summary>
            Writes the current record and moves to the next one
            </summary>
        </member>
        <member name="M:VC3.IO.XmlDataWriter.SetField(System.String,System.Object)">
            <summary>
            Assigns a value to a field in the current record
            </summary>
        </member>
        <member name="M:VC3.IO.XmlDataWriter.SetField(System.Int32,System.Object)">
            <summary>
            Assigns a value to a field in the current record
            </summary>
        </member>
        <member name="M:VC3.IO.XmlDataWriter.Close">
            <summary>
            Writes the closing document information and closes the underlying writer
            </summary>
        </member>
        <member name="M:VC3.IO.XmlDataWriter.WriteStart">
            <summary>
            Override in subclasses to write the first part of the document, up to the rows.
            </summary>
        </member>
        <member name="M:VC3.IO.XmlDataWriter.WriteEnd">
            <summary>
            Override in subclasses to close out the document
            </summary>
        </member>
        <member name="P:VC3.IO.XmlDataWriter.Columns">
            <summary>
            The columns that comprise this writer
            </summary>
        </member>
        <member name="P:VC3.IO.XmlDataWriter.Writer">
            <summary>
            The underlying writer
            </summary>
        </member>
        <member name="T:VC3.IO.ExcelWebQueryDataSchema">
            <summary>
            A data format for data that can be used by Microsoft Excel via its
            "web query" feature.
            </summary>
        </member>
        <member name="M:VC3.IO.ExcelWebQueryDataSchema.OnCreateWriter(System.Xml.XmlWriter)">
            <summary>
            Overridden to return excel-specific writer
            </summary>
        </member>
        <member name="T:VC3.IO.ExcelWebQueryDataWriter">
            <summary>
            Writes an XML document that can be loaded via a web query in Excel
            </summary>
        </member>
        <member name="M:VC3.IO.ExcelWebQueryDataWriter.WriteStart">
            <summary>
            Overridden to write schema and rows container
            </summary>
        </member>
        <member name="M:VC3.IO.ExcelWebQueryDataWriter.WriteEnd">
            <summary>
            Overridden to close rows container
            </summary>
        </member>
        <member name="T:VC3.Data.Schema">
            <summary>
            Summary description for Schema.
            </summary>
        </member>
        <member name="T:VC3.Data.SqlTable">
            <summary>
            Represents a table in a SQL Server database.
            </summary>
        </member>
        <member name="M:VC3.Data.SqlTable.#ctor(System.String,System.String)">
            <summary>
            Creates a new table instance.
            </summary>
            <param name="connectionString">The connection string for the database the table is in</param>
            <param name="name">The name of the table</param>
        </member>
        <member name="M:VC3.Data.SqlTable.GetData">
            <summary>
            Gets all of the data in the table.
            </summary>
            <returns>An <see cref="T:System.Data.IDataReader"/> containing the table data</returns>
        </member>
        <member name="P:VC3.Data.SqlTable.Name">
            <summary>
            Gets the name of the table.
            </summary>
        </member>
        <member name="P:VC3.Data.SqlTable.Definition">
            <summary>
            Gets the schema definition for the table.
            </summary>
        </member>
        <member name="P:VC3.Data.SqlTable.Columns">
            <summary>
            Gets all of the columns for the table.
            </summary>
        </member>
        <member name="P:VC3.Data.SqlTable.Keys">
            <summary>
            Gets the primary key columns for the table.
            </summary>
        </member>
        <member name="T:VC3.Data.SqlColumn">
            <summary>
            Represents a column in a SQL Server database table.
            </summary>
        </member>
        <member name="M:VC3.Data.SqlColumn.#ctor(System.String,System.String,System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Creates a new column instance.
            </summary>
            <param name="name">The name of the column</param>
            <param name="dataType">The data type of the column</param>
            <param name="length">The maximum length of the column</param>
            <param name="index">The index of the column in the table</param>
            <param name="isNullable">A flag indicating whether the column is nullable</param>
            <param name="isKey">A flag indicating whether the column is a primary key</param>
        </member>
        <member name="M:VC3.Data.SqlColumn.ToSql(System.Data.IDataRecord)">
            <summary>
            Retrieves and converts the value of the current column
            to a SQL constant expression.
            </summary>
            <param name="data">An <see cref="T:System.Data.IDataRecord"/> containing the data</param>
            <returns>The SQL representation of the data for the column</returns>
        </member>
        <member name="M:VC3.Data.SqlColumn.ToSql(System.Object)">
            <summary>
            Converts the value of the current column to a SQL constant expression.
            </summary>
            <param name="value">The value to convert</param>
            <returns>The SQL representation of the data for the column</returns>
        </member>
        <member name="P:VC3.Data.SqlColumn.Name">
            <summary>
            Gets the name of the column.
            </summary>
        </member>
        <member name="P:VC3.Data.SqlColumn.DataType">
            <summary>
            Gets the data type of the column.
            </summary>
        </member>
        <member name="P:VC3.Data.SqlColumn.Definition">
            <summary>
            Gets the schema definition of the column.
            </summary>
        </member>
        <member name="P:VC3.Data.SqlColumn.Length">
            <summary>
            Gets the maximum length of the column.
            </summary>
        </member>
        <member name="P:VC3.Data.SqlColumn.Index">
            <summary>
            Gets the index of the column in the table.
            </summary>
        </member>
        <member name="P:VC3.Data.SqlColumn.IsNullable">
            <summary>
            Indicates whether the column is nullable.
            </summary>
        </member>
        <member name="P:VC3.Data.SqlColumn.IsKey">
            <summary>
            Indicates whether the column is a primary key.
            </summary>
        </member>
        <member name="T:VC3.ComponentModel.DynamicBusinessObject">
            <summary>
            Summary description for DynamicBusinessObject.
            </summary>
        </member>
        <member name="P:VC3.ComponentModel.DynamicBusinessObject.Item(System.String)">
            <summary>
            Gets or sets the value of the property with the specified name.
            </summary>
        </member>
        <member name="T:VC3.ComponentModel.IDynamicPropertyInfo">
            <summary>
            Identifies the set of information and functionality required
            to allow components to expose dynamic properties.
            </summary>
        </member>
        <member name="M:VC3.ComponentModel.IDynamicPropertyInfo.GetValue(System.Object)">
            <summary>
            Gets the value of the current property.
            </summary>
            <param name="instance">The instance the property data should be retrieved from</param>
            <returns>The value of the property</returns>
        </member>
        <member name="M:VC3.ComponentModel.IDynamicPropertyInfo.SetValue(System.Object,System.Object)">
            <summary>
            Set the value of the current property.
            </summary>
            <param name="instance">The instance the property data should be retrieved from</param>
            <returns>A list of values for the property</returns>
        </member>
        <member name="M:VC3.ComponentModel.IDynamicPropertyInfo.GetValues(System.Object)">
            <summary>
            Gets the list of values represented by the current property.
            </summary>
            <param name="instance">The instance the property data should be retrieved from</param>
            <returns>A list of values for the property</returns>
        </member>
        <member name="M:VC3.ComponentModel.IDynamicPropertyInfo.GetValidValues(System.Object)">
            <summary>
            Gets the list of valid values for the current property.
            </summary>
            <param name="instance">The instance the valid property values should be retrieved from</param>
            <returns>A list of valid values for the property</returns>
        </member>
        <member name="M:VC3.ComponentModel.IDynamicPropertyInfo.ConvertToString(System.Object)">
            <summary>
            Handles the conversion of a property value to a string representation.
            </summary>
            <param name="value">The value of the property to convert</param>
            <returns>The <see cref="T:System.String"/> representation of the value</returns>
        </member>
        <member name="M:VC3.ComponentModel.IDynamicPropertyInfo.ConvertFromString(System.String)">
            <summary>
            Handles the conversion of a string representation to a property value.
            </summary>
            <param name="value">The string representation of the property to convert</param>
            <returns>The <see cref="T:System.Object"/> value of the property</returns>
        </member>
        <member name="P:VC3.ComponentModel.IDynamicPropertyInfo.Name">
            <summary>
            Gets the name of the dynamic property.
            </summary>
        </member>
        <member name="P:VC3.ComponentModel.IDynamicPropertyInfo.IsReadOnly">
            <summary>
            Indicates whether the dynamic property is read only.
            </summary>
        </member>
        <member name="P:VC3.ComponentModel.IDynamicPropertyInfo.PropertyType">
            <summary>
            Gets the <see cref="T:System.Type"/> of the property.
            </summary>
            <remarks>
            Multi-valued properties must implement <see cref="T:System.Collections.IList"/>.
            Single-value properties must not be subclasses of <see cref="T:System.ValueType"/>.
            Intrinsic properties must be either <see cref="T:System.String"/> or subclasses of <see cref="T:System.ValueType"/>.
            </remarks>
        </member>
        <member name="P:VC3.ComponentModel.IDynamicPropertyInfo.ComponentType">
            <summary>
            Gets the <see cref="T:System.Type"/> of the component the property
            is a member of.
            </summary>
        </member>
        <member name="P:VC3.ComponentModel.IDynamicPropertyInfo.Attributes">
            <summary>
            Gets an array of <see cref="T:System.Attribute"/> instances that
            apply to the property.
            </summary>
            <remarks>
            This property should be used to expose <see cref="T:VC3.ComponentModel.PreconditionAttribute"/>
            and <see cref="T:VC3.ComponentModel.MetaDataAttribute"/> instances to control the validation and
            appearance of the properties when edited or displayed in the user interface.
            </remarks>
        </member>
        <member name="M:VC3.ComponentModel.DynamicProperty.#ctor(System.String,System.Boolean,System.Type,System.Attribute[])">
            <summary>
            Creates a new initialized <see cref="T:VC3.ComponentModel.DynamicProperty"/> instance.
            </summary>
            <param name="name">The name of the property</param>
            <param name="isReadOnly"></param>
            <param name="propertyType"></param>
            <param name="attributes"></param>
        </member>
        <member name="T:VC3.ComponentModel.DynamicPropertyType">
            <summary>
            Identifies the three classes of dynamic properties: value, object and list.
            </summary>
        </member>
        <member name="T:VC3.ComponentModel.DynamicPropertyDescriptor">
            <summary>
            Represents a dynamic property for components that expose
            properties at runtime.
            </summary>
        </member>
        <member name="M:VC3.ComponentModel.DynamicPropertyDescriptor.#ctor(VC3.ComponentModel.IDynamicPropertyInfo)">
            <summary>
            Creates a new <see cref="T:VC3.ComponentModel.DynamicPropertyDescriptor"/> based on the specified
            <see cref="T:VC3.ComponentModel.IDynamicPropertyInfo"/> property information.
            </summary>
            <param name="property">The information necessary to support the dynamic property</param>
        </member>
        <member name="M:VC3.ComponentModel.DynamicPropertyDescriptor.GetValue(System.Object)">
            <summary>
            Gets the value of the property based on the property information.
            </summary>
            <param name="instance">The property to retrieve the value for</param>
            <returns>The value of the property</returns>
        </member>
        <member name="M:VC3.ComponentModel.DynamicPropertyDescriptor.SetValue(System.Object,System.Object)">
            <summary>
            Sets the value of the parameter based on the parameter type.
            </summary>
            <param name="instance">The instance to set the value for</param>
            <param name="value">The new value of the parameter</param>
        </member>
        <member name="M:VC3.ComponentModel.DynamicPropertyDescriptor.CanResetValue(System.Object)">
            <summary>
            Indicates that the property cannot be reset.
            </summary>
            <param name="instance"></param>
            <returns></returns>
        </member>
        <member name="M:VC3.ComponentModel.DynamicPropertyDescriptor.ResetValue(System.Object)">
            <summary>
            Does nothing, because the property cannot be reset.
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:VC3.ComponentModel.DynamicPropertyDescriptor.ShouldSerializeValue(System.Object)">
            <summary>
            Indicates that the property value should not be serialized.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="P:VC3.ComponentModel.DynamicPropertyDescriptor.IsReadOnly">
            <summary>
            Indicates whether the dynamic property is read only.
            </summary>
        </member>
        <member name="P:VC3.ComponentModel.DynamicPropertyDescriptor.PropertyType">
            <summary>
            Gets the <see cref="T:System.Type"/> of the property value.
            </summary>
        </member>
        <member name="P:VC3.ComponentModel.DynamicPropertyDescriptor.ComponentType">
            <summary>
            Gets the <see cref="T:System.Type"/> of the component the property is
            a member of.
            </summary>
        </member>
        <member name="P:VC3.ComponentModel.DynamicPropertyDescriptor.Converter">
            <summary>
            Gets a <see cref="T:System.ComponentModel.TypeConverter"/> instance capable of converting
            to and from string representations of the property value.
            </summary>
        </member>
        <member name="T:VC3.ComponentModel.DynamicPropertyInfoBusinessObjectProxy">
            <summary>
            Proxy tracks the identity, rather than a direct reference, of
            the underlying BusinessObject so that can be garbage collected.
            </summary>
        </member>
        <member name="T:VC3.Collections.SecureStringDictionary">
            <summary>
            Extends the <see cref="T:System.Collections.Specialized.StringDictionary"/> class by adding encryption
            functionality. 
            </summary>
        </member>
        <member name="M:VC3.Collections.SecureStringDictionary.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:VC3.Collections.SecureStringDictionary"/>
            class, using the default encryption key.
            </summary>
        </member>
        <member name="M:VC3.Collections.SecureStringDictionary.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:VC3.Collections.SecureStringDictionary"/>
            class, using the specified encryption key.
            </summary>
            <param name="encryptionKey">The encryption key to use to encrypt
            data.</param>
        </member>
        <member name="M:VC3.Collections.SecureStringDictionary.Add(System.String,System.String,System.Boolean)">
            <summary>
            Adds an entry with the specified key and value
            into the <see cref="T:VC3.Collections.SecureStringDictionary"/>.
            </summary>
            <param name="key">The key of the entry to add.</param>
            <param name="val">The value of the entry to add.</param>
            <param name="encrypt">Indicates whether or not the encrypt the value.</param>
            <exception cref="T:System.ArgumentNullException">
            The key is a null reference (<b>Nothing</b> in Visual Basic). 
            </exception>
            <exception cref="T:System.ArgumentException">
            An entry with the same key already exists in the <see cref="T:VC3.Collections.SecureStringDictionary"/>
            </exception>
            <remarks>If the <b>encrypt</b>parameter is set to true, the
            value of the entry will be encrypted using the encryption key
            specified in <see cref="P:VC3.Collections.SecureStringDictionary.EncryptionKey"/>. If no key was specified, a
            default key is used.</remarks>
        </member>
        <member name="M:VC3.Collections.SecureStringDictionary.GetRawValue(System.String)">
            <summary>
            Gets the raw value of the entry with the specified key.
            </summary>
            <param name="key">The key of the entry to find.</param>
            <returns>A string containing the raw value stored in the
            underlying string dictionary.</returns>
            <remarks>If a value is encrypted, <b>GetRawValue</b> returns
            the encrypted representation of the data and doesn't try to
            decrypt it.</remarks>
        </member>
        <member name="P:VC3.Collections.SecureStringDictionary.EncryptionKey">
            <summary>
            Sets the encryption key to use for encrypting/decrypting values in
            the <see cref="T:VC3.Collections.SecureStringDictionary"/>.
            </summary>
            <value>The encryption key.</value>
            <remarks><p><font color="red">[This method can only be called from an
            inheriting class.]</font></p></remarks>
        </member>
        <member name="P:VC3.Collections.SecureStringDictionary.Item(System.String)">
            <summary>
            Gets or sets the value associated with the specified key.
            </summary>
            <value>The value associated with the specified key. If the
            specified key is not found, Get returns a null reference (<b>Nothing</b>
            in Visual Basic), and Set creates a new entry with the specified key.</value>
            <remarks>If the entry you are referencing is encrypted, Get will
            automatically decrypt the entry and return the unencrypted result, while
            Set will overwrite the encrypted entry with the unencrypted value.
            </remarks>
        </member>
        <member name="P:VC3.Collections.SecureStringDictionary.Item(System.String,System.Boolean)">
            <summary>
            <b>(Write-Only)</b> Sets the value associated with the specified key, and
            allows the user to encrypt specific entries as they are added or
            modified.
            </summary>
            <value>The value associated with the specified key. If the
            specified key is not found, Set creates a new entry with the specified key.</value>
            <remarks>If the entry you are referencing is encrypted, Set will
            overwrite the encrypted entry with the unencrypted value unless the
            <b>encrypt</b> parameter is set to true, in which case the value will be
            encrypted before being saved into the dictionary.
            </remarks>
        </member>
        <member name="M:VC3.Collections.SecureStringDictionary.HexEncoding.GetBytes(System.String,System.Int32@)">
            <summary>
            Creates a byte array from the hexadecimal string. Each two characters are combined
            to create one byte. First two hexadecimal characters become first byte in returned array.
            Non-hexadecimal characters are ignored. 
            </summary>
            <param name="hexString">string to convert to byte array</param>
            <param name="discarded">number of characters in string ignored</param>
            <returns>byte array, in the same left-to-right order as the hexString</returns>
        </member>
        <member name="M:VC3.Collections.SecureStringDictionary.HexEncoding.InHexFormat(System.String)">
            <summary>
            Determines if given string is in proper hexadecimal string format
            </summary>
            <param name="hexString"></param>
            <returns></returns>
        </member>
        <member name="M:VC3.Collections.SecureStringDictionary.HexEncoding.IsHexDigit(System.Char)">
            <summary>
            Returns true is c is a hexadecimal digit (A-F, a-f, 0-9)
            </summary>
            <param name="c">Character to test</param>
            <returns>true if hex digit, false if not</returns>
        </member>
        <member name="M:VC3.Collections.SecureStringDictionary.HexEncoding.HexToByte(System.String)">
            <summary>
            Converts 1 or 2 character string into equivalant byte value
            </summary>
            <param name="hex">1 or 2 character string</param>
            <returns>byte</returns>
        </member>
        <member name="T:VC3.Collections.ReverseComparer">
            <summary>
            Reverses the ordering of another <see cref="T:System.Collections.IComparer"/>
            </summary>
        </member>
        <member name="T:VC3.Collections.CompositeComparer">
            <summary>
            Comparer that uses multiple comparers.
            If the 1st comparer determines two
            objects are equal, the 2nd comparer is used.
            If the 2nd comparer determines two objects are
            equal, the 3rd comparer is used, and so on...
            </summary>
        </member>
        <member name="M:VC3.Collections.CompositeComparer.#ctor(System.Collections.IComparer[])">
            <summary>
            Create a new CompositeComparer.
            </summary>
            <param name="comparers">
            The array of comparers to use.  The order
            of the list is from most significant (0-index) to
            least significant (last index)
            </param>
        </member>
        <member name="M:VC3.Collections.CompositeComparer.Compare(System.Object,System.Object)">
            <summary>
            Compares two objects using the comparers specified
            in the constructor.
            If the 1st comparer determines two
            objects are equal, the 2nd comparer is used.
            If the 2nd comparer determines two objects are
            equal, the 3rd comparer is used, and so on...
            </summary>
            <param name="x">First object</param>
            <param name="y">Second object</param>
            <returns></returns>
        </member>
        <member name="T:VC3.Collections.CompositeComparer`1">
            <summary>
            Comparer that uses multiple comparers.
            If the 1st comparer determines two
            objects are equal, the 2nd comparer is used.
            If the 2nd comparer determines two objects are
            equal, the 3rd comparer is used, and so on...
            </summary>
        </member>
        <member name="M:VC3.Collections.CompositeComparer`1.#ctor(System.Collections.Generic.IComparer{`0}[])">
            <summary>
            Create a new CompositeComparer.
            </summary>
            <param name="comparers">
            The array of comparers to use.  The order
            of the list is from most significant (0-index) to
            least significant (last index)
            </param>
        </member>
        <member name="M:VC3.Collections.CompositeComparer`1.Compare(`0,`0)">
            <summary>
            Compares two objects using the comparers specified
            in the constructor.
            If the 1st comparer determines two
            objects are equal, the 2nd comparer is used.
            If the 2nd comparer determines two objects are
            equal, the 3rd comparer is used, and so on...
            </summary>
            <param name="x">First object</param>
            <param name="y">Second object</param>
            <returns></returns>
        </member>
        <member name="T:VC3.Collections.Key">
            <summary>
            A multi-valued complex key used for easy indexing based on muiltiple key values.
            </summary>
        </member>
        <member name="M:VC3.Collections.Key.#ctor(System.Object[])">
            <summary>
            Constructs a new object given an array of keys.
            </summary>
            <param name="keys">An array of keys for indexing.</param>
        </member>
        <member name="M:VC3.Collections.Key.Equals(System.Object)">
            <summary>
            Compares two Key objects for equality. Does a key by key comparision
            of the objects within this complex key.
            </summary>
            <param name="obj">The object to compare.</param>
            <returns>true if objects are equal; false otherwise.</returns>
        </member>
        <member name="M:VC3.Collections.Key.op_Equality(VC3.Collections.Key,VC3.Collections.Key)">
            <summary>
            Compares two Key objects for equality. Does a key by key comparision
            of the objects within this complex key.
            </summary>
            <returns>True if a.Equals(b)</returns>
        </member>
        <member name="M:VC3.Collections.Key.op_Inequality(VC3.Collections.Key,VC3.Collections.Key)">
            <summary>
            Compares two Key objects for equality. Does a key by key comparision
            of the objects within this complex key.
            </summary>
            <returns>True if !(a.Equals(b))</returns>
        </member>
        <member name="M:VC3.Collections.Key.GetHashCode">
            <summary>
            Returns the hash code of the first key in this Key.
            </summary>
            <returns>The hash code for first key of this Key.</returns>
        </member>
        <member name="T:VC3.Util.ObjectCloner">
            <summary>
            Utility class for cloning objects.  Makes use of the
            <see cref="T:VC3.Util.CloneDelegatorAttribute"/> places on fields to
            customize the cloning process.
            </summary>
        </member>
        <member name="M:VC3.Util.ObjectCloner.CloneObject(System.Object)">
            <summary>
            Does a memberwise clone of the object and includes
            its clone in the clone map.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VC3.Util.ObjectCloner.CloneFields(System.Object,System.Object)">
            <summary>
            Updates the 
            </summary>
            <param name="original"></param>
        </member>
        <member name="M:VC3.Util.ObjectCloner.Clone(System.Object,System.Boolean)">
            <summary>
            Clones an object using <see cref="M:System.Object.MemberwiseClone"/> and
            then optionally clones each field
            </summary>
            <remarks>
            Each field will also be cloned if fields is true.  In this case the 
            following procedure is used to clone each field:
            
            <list type="number">
            <item><description>
            If the field's value is null, it's cloned value will be null.
            </description></item>
            <item><description>
            If the field has a <see cref="T:VC3.Util.CloneDelegatorAttribute"/> attached 
            to it then <see cref="M:VC3.Util.CloneDelegatorAttribute.Clone(System.Object)"/> will be called 
            to clone the field.
            </description></item>
            <item><description>
            Otherwise, if the field's runtime type has a <see cref="T:VC3.Util.CloneDelegatorAttribute"/> attached 
            to it then <see cref="M:VC3.Util.CloneDelegatorAttribute.Clone(System.Object)"/> will be called 
            to clone the field.
            </description></item>
            </list>
            
            </remarks>
            <param name="original">Object to clone</param>
            <param name="fields">
            If true, each field will be cloned based on their <see cref="T:VC3.Util.CloneDelegatorAttribute"/>.
            Also, if field is a reference type it will be set to the cloned version of its 
            original reference.
            If false, a simple memberwise clone will be created.
            </param>
            <returns>A clone of the specified object</returns>
        </member>
        <member name="M:VC3.Util.ObjectCloner.SetFieldsToClones(System.Object)">
            <summary>
            Updates all fields of a cloned object so that
            they refer to the cloned version of the objects
            the currently reference.
            </summary>
        </member>
        <member name="M:VC3.Util.ObjectCloner.GetClonedReference(System.Object)">
            <summary>
            Returns a reference to an object that was cloned from
            the specified one.
            </summary>
            <param name="original">Orignal object</param>
            <returns>Cloned object, or if original was not cloned, original object</returns>
        </member>
        <member name="M:VC3.Util.ObjectCloner.MemberwiseClone(System.Object)">
            <summary>
            Creates a memberwise clone of an object by calling <see cref="M:System.Object.MemberwiseClone"/>
            </summary>
        </member>
        <member name="T:VC3.Util.CloneDelegatorAttribute">
            <summary>
            Can be applied to a field to change how the field will be
            cloned by the <see cref="T:VC3.Util.ObjectCloner"/> class.
            </summary>
        </member>
        <member name="M:VC3.Util.CloneDelegatorAttribute.Clone(System.Object)">
            <summary>
            Creates a clone of the original object via the method
            specified in the attribute constructor.
            </summary>
            <param name="original">object to clone</param>
            <returns></returns>
        </member>
        <member name="T:VC3.Util.ICloneableCloneAttribute">
            <summary>
            Can be applied to a field to indicate that <see cref="T:VC3.Util.ObjectCloner"/>
            should use the <see cref="T:System.ICloneable"/> interface to clone an object.
            </summary>
        </member>
        <member name="M:VC3.Util.ICloneableCloneAttribute.Clone(System.Object)">
            <summary>
            Returns the object to use as the clone.
            </summary>
            <param name="original">object to clone</param>
            <returns></returns>
        </member>
        <member name="T:VC3.Util.ConstCloneAttribute">
            <summary>
            Can be applied to a field to change how the field will be
            cloned by the <see cref="T:VC3.Util.ObjectCloner"/> class to prevent the field's
            value from being cloned.  Instead, a constant value will be used.
            An example usage is to always set a cloned object reference to null.
            The clone value can be specified via the <see cref="P:VC3.Util.ConstCloneAttribute.Value"/> property.
            </summary>
        </member>
        <member name="M:VC3.Util.ConstCloneAttribute.Clone(System.Object)">
            <summary>
            Returns the <see cref="P:VC3.Util.ConstCloneAttribute.Value"/> to use as the clone.
            </summary>
            <param name="original">object to clone</param>
            <returns></returns>
        </member>
        <member name="P:VC3.Util.ConstCloneAttribute.Value">
            <summary>
            The value that will be used when the field is cloned.
            Defaults to null.
            </summary>
        </member>
        <member name="T:VC3.Util.NonClonedAttribute">
            <summary>
            Can be applied to a field to indicate that is should
            be skipped by the <see cref="T:VC3.Util.ObjectCloner"/> during cloning.
            </summary>
        </member>
        <member name="T:VC3.Collections.BitSet">
            <summary>
            Manages a compact array of bit values, which are represented as Booleans,
            where <c>true</c> indicates that the bit is on (1) and <c>false</c> indicates the bit is off (0).
            </summary>
        </member>
        <member name="M:VC3.Collections.BitSet.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:VC3.Collections.BitSet"/> class that can hold the
            specified number of bit values, which are initially set to <c>false</c>.
            </summary>
            <param name="length">The number of bit values in the new <see cref="T:VC3.Collections.BitSet"/>.</param>
        </member>
        <member name="M:VC3.Collections.BitSet.And(VC3.Collections.BitSet)">
            <summary>
            Performs the bitwise AND operation on the elements in the current <see cref="T:VC3.Collections.BitSet"/>
            against the corresponding elements in the specified <c>BitSet</c>.
            </summary>
            <param name="value">
            The <see cref="T:VC3.Collections.BitSet"/> with which to perform the bitwise AND operation.
            </param>
            <returns>
            A <see cref="T:VC3.Collections.BitSet"/> containing the result of the bitwise AND operation on the elements
            in the current <c>BitSet</c> against the corresponding elements in the specified <c>BitSet</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException"><c>value</c> is a null reference.</exception>
            <exception cref="T:System.ArgumentException"><c>value</c> and the current <c>BitSet</c> do not have the same number of elements.</exception>
        </member>
        <member name="M:VC3.Collections.BitSet.Or(VC3.Collections.BitSet)">
            <summary>
            Performs the bitwise OR operation on the elements in the current <see cref="T:VC3.Collections.BitSet"/>
            against the corresponding elements in the specified <c>BitSet</c>.
            </summary>
            <param name="value">
            The <see cref="T:VC3.Collections.BitSet"/> with which to perform the bitwise OR operation.
            </param>
            <returns>
            A <see cref="T:VC3.Collections.BitSet"/> containing the result of the bitwise OR operation on the elements
            in the current <c>BitSet</c> against the corresponding elements in the specified <c>BitSet</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException"><c>value</c> is a null reference.</exception>
            <exception cref="T:System.ArgumentException"><c>value</c> and the current <c>BitSet</c> do not have the same number of elements.</exception>
        </member>
        <member name="M:VC3.Collections.BitSet.op_BitwiseOr(VC3.Collections.BitSet,VC3.Collections.BitSet)">
            <summary>
            <see cref="M:VC3.Collections.BitSet.Or(VC3.Collections.BitSet)"/>'s together two bit set.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:VC3.Collections.BitSet.op_BitwiseAnd(VC3.Collections.BitSet,VC3.Collections.BitSet)">
            <summary>
            <see cref="M:VC3.Collections.BitSet.And(VC3.Collections.BitSet)"/>'s together two bit set.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="P:VC3.Collections.BitSet.Length">
            <summary>
            Gets the number of elements in the <see cref="T:VC3.Collections.BitSet"/>.
            </summary>
        </member>
        <member name="P:VC3.Collections.BitSet.IsEmpty">
            <summary>
            Returns <c>true</c> if the set is empty, otherwise <c>false</c>.
            </summary>
        </member>
        <member name="P:VC3.Collections.BitSet.Item(System.Int32)">
            <summary>
            Gets or sets the value of the bit at a specific position in the <see cref="T:VC3.Collections.BitSet"/>.
            </summary>
            <param name="index">The zero-based index of the value to get or set.</param>
            <value>The value of the bit at position index.</value>
        </member>
        <member name="T:VC3.Security.Util.RandomPasswordGenerator">
            <summary>
            Utility for generating random passwords
            </summary>
            <remarks>The <b>RandomPasswordGenerator</b> class provides functionality for
            generating random passwords. The caller can specify minimum length and maximum length
            as well as allowed characters. The allowed characters are grouped into four distinct groups:
            the lowercase character group, the uppercase character group, the numeric character group, and
            the special character group. By default, the groups are defined as follows:
            <list type="table"><listheader><term>Character Group</term><description>Initial Definition</description></listheader>
            <item><term>LowerCase</term><description>abcdefgijkmnopqrstwxyz</description></item>
            <item><term>UpperCase</term><description>ABCDEFGHJKLMNPQRSTWXYZ</description></item>
            <item><term>Numeric</term><description>23456789</description></item>
            <item><term>Special</term><description>%2A%24%2D%2B%3F%5F%26%3D%21%25%7B%7D%2F</description></item>
            </list>Note that there are some characters missing from the default character groups for the
            sake of clarity. It is often difficult to discern the numeral '1' from the lowercase 'l',
            particularly when dealing with an unfamiliar generated password, so potentially
            confusing characters have been left out of the default sets.</remarks>
        </member>
        <member name="M:VC3.Security.Util.RandomPasswordGenerator.SetLowerCaseCharacterGroup(System.String)">
            <summary>
            Sets the lowercase character group.
            </summary>
            <param name="input">The string of lowercase characters that makes up the character group.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the input string contains non-lowercase characters.</exception>
        </member>
        <member name="M:VC3.Security.Util.RandomPasswordGenerator.RevertLowerCaseCharacterGroup">
            <summary>
            Reverts the lowercase character group back to it's original values.
            </summary>
        </member>
        <member name="M:VC3.Security.Util.RandomPasswordGenerator.SetUpperCaseCharacterGroup(System.String)">
            <summary>
            Sets the uppercase character group.
            </summary>
            <param name="input">The string of uppercase characters that makes up the character group.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the input string contains non-uppercase characters.</exception>
        </member>
        <member name="M:VC3.Security.Util.RandomPasswordGenerator.RevertUpperCaseCharacterGroup">
            <summary>
            Reverts the uppercase character group back to it's original values.
            </summary>
        </member>
        <member name="M:VC3.Security.Util.RandomPasswordGenerator.SetNumericCharacterGroup(System.String)">
            <summary>
            Sets the numeric character group.
            </summary>
            <param name="input">The string of numeric characters that makes up the character group.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the input string contains non-numeric characters.</exception>
        </member>
        <member name="M:VC3.Security.Util.RandomPasswordGenerator.RevertNumericCharacterGroup">
            <summary>
            Reverts the numeric character group back to it's original values.
            </summary>
        </member>
        <member name="M:VC3.Security.Util.RandomPasswordGenerator.SetSpecialCharacterGroup(System.String)">
            <summary>
            Sets the special character group.
            </summary>
            <remarks>The special character group is designed to embody all of the characters not included in the
            LowerCase,UpperCase, or Numeric character groups. Although by default the group only includes a small
            subset of the available characters, any valid <see cref="T:System.Char"/> value that is not numeric or alphabetic can
            be included in the special character group. One interesting
            possibility relevant in scenarios where the password is used to supply credentials electronically
            and the password will never need to be typed interactively by a user is the ability to
            include untypeable control characters (like ESC) in the password.</remarks>
            <param name="input">The string of special characters that makes up the character group.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the input string contains numeric, lowercase, or uppercase characters.</exception>
        </member>
        <member name="M:VC3.Security.Util.RandomPasswordGenerator.RevertSpecialCharacterGroup">
            <summary>
            Reverts the special character group back to it's original values.
            </summary>
        </member>
        <member name="M:VC3.Security.Util.RandomPasswordGenerator.Generate">
            <summary>
            Generates a random password using the values specified in <see cref="P:VC3.Security.Util.RandomPasswordGenerator.MinimumPasswordLength"/>,
            <see cref="P:VC3.Security.Util.RandomPasswordGenerator.MaximumPasswordLength"/>, and <see cref="P:VC3.Security.Util.RandomPasswordGenerator.CharactersFlag"/>.
            </summary>
            <returns>A random password.</returns>
        </member>
        <member name="M:VC3.Security.Util.RandomPasswordGenerator.Generate(System.Int32)">
            <summary>
            Generates a random password of a specific length using the character group
            specified in <see cref="P:VC3.Security.Util.RandomPasswordGenerator.CharactersFlag"/>.
            </summary>
            <param name="length">The length of the password to create.</param>
            <returns>A random password.</returns>
        </member>
        <member name="M:VC3.Security.Util.RandomPasswordGenerator.Generate(System.Int32,System.Int32)">
            <summary>
            Generates a random password using the minimum and maximum lengths specified in the
            method parameters and the value specified in <see cref="P:VC3.Security.Util.RandomPasswordGenerator.CharactersFlag"/>
            </summary>
            <param name="minLength">The minimum length of the generated password.</param>
            <param name="maxLength">The maximum length of the generated password.</param>
            <returns>A random password.</returns>
        </member>
        <member name="M:VC3.Security.Util.RandomPasswordGenerator.Generate(System.Int32,System.Int32,VC3.Security.Util.PasswordCharactersFlag)">
            <summary>
            Generates a random password using the minimum length, maximum length, and
            <see cref="T:VC3.Security.Util.PasswordCharactersFlag"/> enumeration specified in the method
            parameters.
            </summary>
            <param name="minLength">The minimum length of the generated password.</param>
            <param name="maxLength">The maximum length of the generated password.</param>
            <param name="flag">The <see cref="T:VC3.Security.Util.PasswordCharactersFlag"/> to use to create the generated password.</param>
            <returns>A random password.</returns>
        </member>
        <member name="P:VC3.Security.Util.RandomPasswordGenerator.MinimumPasswordLength">
            <summary>
            Gets or sets the minimum password length.
            </summary>
            <remarks>This property is set to 8 by default.</remarks>
        </member>
        <member name="P:VC3.Security.Util.RandomPasswordGenerator.MaximumPasswordLength">
            <summary>
            Gets or sets the maximum password length;
            </summary>
            <remarks>This property is set to 10 by default.</remarks>
        </member>
        <member name="P:VC3.Security.Util.RandomPasswordGenerator.CharactersFlag">
            <summary>
            Gets or sets the character groups that will be used in creating the password.
            </summary>
            <remarks>This property is set to PasswordCharactersFlag.LowerCase|PasswordCharactersFlag.UpperCase|PasswordCharactersFlag.Numeric|PasswordCharactersFlag.Special by default.</remarks>
        </member>
        <member name="T:VC3.Security.Authentication.AuthenticationException">
            <summary>
            An exception thrown when a generally error occurs during authentication
            </summary>
        </member>
        <member name="T:VC3.Security.Authentication.PasswordExpiredException">
            <summary>
            An exception thrown when an invalid password is found
            </summary>
        </member>
        <member name="T:VC3.Security.Authentication.AmbiguousUserException">
            <summary>
            An exception thrown when more than one user is found with matching credentials
            </summary>
        </member>
        <member name="T:VC3.ComponentModel.MessageQueue">
            <summary>
            A simple, lightweight, non-transacted message queue for delivering asynchronous messages.
            </summary>
        </member>
        <member name="M:VC3.ComponentModel.MessageQueue.#ctor(System.Int32,System.Threading.ThreadPriority)">
            <summary>
            Creates a new message queue
            </summary>
            <param name="maxAllowedLength">Maximum queue length before messages are dropped</param>
            <param name="workerThreadPriority">Prioritization of the worker thread</param>
        </member>
        <member name="M:VC3.ComponentModel.MessageQueue.#ctor(System.Int32,System.Threading.ThreadPriority,System.Int32)">
            <summary>
            Creates a new message queue
            </summary>
            <param name="maxAllowedLength">Maximum queue length before messages are dropped</param>
            <param name="workerThreadPriority">Prioritization of the worker thread</param>
            <param name="threadPoolSize">Number of threads to use to process work items</param>
        </member>
        <member name="M:VC3.ComponentModel.MessageQueue.Send(VC3.ComponentModel.MessageQueue.QueuedAction)">
            <summary>
            Performs the action in the background
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:VC3.ComponentModel.MessageQueue.Send(System.Object)">
            <summary>
            Puts a message into the queue for delivery
            </summary>
        </member>
        <member name="P:VC3.ComponentModel.MessageQueue.PropagateTransactions">
            <summary>
            If true, the System.Transactions.Transaction associated with the thread submitting
            work into the queue will be join when the work is performed asynchronously.  Used for
            automated testing but this might have other uses too.
            </summary>
        </member>
        <member name="P:VC3.ComponentModel.MessageQueue.QueueLength">
            <summary>
            Gets the current number of notifications in the queue waiting to be saved.
            </summary>
        </member>
        <member name="P:VC3.ComponentModel.MessageQueue.OverflowCount">
            <summary>
            Gets the number of notifications discarded due to the queue length exceeding the maximum
            </summary>
        </member>
        <member name="P:VC3.ComponentModel.MessageQueue.MaxQueueLength">
            <summary>
            Gets the maximum number of notifications in the queue waiting to be saved.
            </summary>
        </member>
        <member name="P:VC3.ComponentModel.MessageQueue.TotalReceived">
            <summary>
            Gets the notifications received since last application restart.
            </summary>
        </member>
        <member name="P:VC3.ComponentModel.MessageQueue.MaxQueueLengthTime">
            <summary>
            Gets the time the maximum number of notifications in the queue waiting to be saved occurred.
            </summary>
        </member>
        <member name="E:VC3.ComponentModel.MessageQueue.MessageReceived">
            <summary>
            Event raised when a message is received
            </summary>
        </member>
        <member name="E:VC3.ComponentModel.MessageQueue.Error">
            <summary>
            Event raised when a message cannot be delivered
            </summary>
        </member>
        <member name="T:VC3.ComponentModel.PrincipalSwitch">
            <summary>
            Changes a thread's IPrincipal.  When disposed of the original
            principal is restored.
            </summary>
        </member>
        <member name="T:VC3.ComponentModel.IReaderWriterLock">
            <summary>
            Synchronizes read and write access to a resource
            </summary>
        </member>
        <member name="M:VC3.ComponentModel.IReaderWriterLock.ReaderLock">
            <summary>
            Issues a lock that prevents other threads from acquiring a <see cref="M:VC3.ComponentModel.IReaderWriterLock.WriterLock"/>
            while still allowing additional <see cref="M:VC3.ComponentModel.IReaderWriterLock.ReaderLock"/>s.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VC3.ComponentModel.IReaderWriterLock.WriterLock">
            <summary>
            Issues a lock that prevents a <see cref="M:VC3.ComponentModel.IReaderWriterLock.ReaderLock"/> or <see cref="M:VC3.ComponentModel.IReaderWriterLock.WriterLock"/>
            from being issued.
            </summary>
            <returns></returns>
        </member>
        <member name="T:VC3.ComponentModel.BypassReaderWriterLock">
            <summary>
            An implementation of <see cref="T:VC3.ComponentModel.IReaderWriterLock"/> that
            can be used by single threaded code to avoid the performance
            penalty of lock management.  No locking is performed and no additional
            memory is used by this lock.  This is a singleton.
            </summary>
        </member>
        <member name="T:VC3.ComponentModel.MultiReaderOneWriterLock">
            <summary>
            An implementation of <see cref="T:VC3.ComponentModel.IReaderWriterLock"/> that will
            synchronize read and write access using a <see cref="T:System.Threading.ReaderWriterLock"/>.
            </summary>
        </member>
        <member name="M:VC3.ComponentModel.MultiReaderOneWriterLock.WillTimeoutErrorBeFatal">
            <summary>
            Determines if the current thread can handle a timeout exception
            properly. Used to prevent exceptions from occuring inside of a static constructor.
            </summary>
        </member>
        <member name="T:VC3.ComponentModel.GuidBusinessObject">
            <summary>
            Base class for <see cref="T:VC3.ComponentModel.BusinessObject"/> subclasses that have
            a single id of type <see cref="T:System.Guid"/>.
            </summary>
        </member>
        <member name="M:VC3.ComponentModel.GuidBusinessObject.#ctor">
            <summary>
            Creates a new uninitialized <see cref="T:VC3.ComponentModel.GuidBusinessObject"/> instance.
            </summary>
        </member>
        <member name="M:VC3.ComponentModel.GuidBusinessObject.#ctor(System.Guid)">
            <summary>
            Creates a new <see cref="T:VC3.ComponentModel.GuidBusinessObject"/> instance with
            the specified <see cref="T:System.Guid"/> id and registers the instance
            for lazy initialization.
            </summary>
        </member>
        <member name="M:VC3.ComponentModel.GuidBusinessObject.Load(System.Data.IDataRecord)">
            <summary>
            Allows subclasses to create an initialized instance without using
            lazy initialization. Overridden to read the id from the data
            before loading the object.
            </summary>
            <param name="data">The data to initialize the object from</param>
        </member>
        <member name="M:VC3.ComponentModel.GuidBusinessObject.Clone(System.Boolean,System.Boolean)">
            <summary>
            Clones this object. Overriden to re-initialize the guidId if isNew.
            </summary>
            <param name="isNew">If true, the cloned object will be new (<see cref="P:VC3.ComponentModel.BusinessObject.IsNew"/>)
            and will have a new id.</param>
            <param name="fields">If true, all fields of the object will also be cloned</param>
            <returns>The cloned object</returns>
        </member>
        <member name="P:VC3.ComponentModel.GuidBusinessObject.Id">
            <summary>
            Gets or sets the unique id of the instance.
            </summary>
        </member>
        <member name="T:VC3.ComponentModel.GuidBusinessObject.GuidIdentifier">
            <summary>
            A specialized identifier for a <see cref="T:VC3.ComponentModel.GuidBusinessObject"/>.
            </summary>
        </member>
        <member name="M:VC3.ComponentModel.GuidBusinessObject.GuidIdentifier.#ctor(System.Guid)">
            <summary>
            Creates a new <see cref="T:VC3.ComponentModel.GuidBusinessObject.GuidIdentifier"/> for the specified id.
            </summary>
            <param name="id">The id value that the identifier represents</param>
        </member>
        <member name="M:VC3.ComponentModel.GuidBusinessObject.GuidIdentifier.ToString">
            <summary>
            Gets the string representation of the underlying <see cref="T:System.Guid"/> id.
            </summary>
            <returns>The string id</returns>
        </member>
        <member name="M:VC3.ComponentModel.GuidBusinessObject.GuidIdentifier.GetHashCode">
            <summary>
            Gets the hash code of the underlying <see cref="T:System.Guid"/> id.
            </summary>
            <returns>The hash code</returns>
        </member>
        <member name="P:VC3.ComponentModel.GuidBusinessObject.GuidIdentifier.Values">
            <summary>
            Gets the values that the identifier represents.
            </summary>
        </member>
        <member name="T:VC3.ComponentModel.GuidBusinessObject.GuidFactory">
            <summary>
            Specialized <see cref="T:VC3.ComponentModel.IFactory"/> implementation
            for classes deriving from <see cref="T:VC3.ComponentModel.GuidBusinessObject"/>.
            </summary>
        </member>
        <member name="T:VC3.ComponentModel.IFactory">
            <summary>
            Responsible for creating instances of <see cref="T:VC3.ComponentModel.BusinessObject.Identifier"/>
            based on various types of data and instances of <see cref="T:VC3.ComponentModel.BusinessObject"/> based
            on an identifier.
            </summary>
        </member>
        <member name="M:VC3.ComponentModel.IFactory.CreateBusinessObject(System.Type)">
            <summary>
            Creates a <see cref="T:VC3.ComponentModel.BusinessObject"/> of the specified type.
            The object returned will be new (<see cref="P:VC3.ComponentModel.BusinessObject.IsNew"/> = true).
            </summary>
            <param name="objectType">The type of object to create. Must be a type handled by this factory.</param>
            <returns>
            A new <see cref="T:VC3.ComponentModel.BusinessObject"/> with <see cref="P:VC3.ComponentModel.BusinessObject.IsNew"/> = true.
            </returns>
        </member>
        <member name="M:VC3.ComponentModel.IFactory.CreateBusinessObject(VC3.ComponentModel.BusinessObject.Identifier)">
            <summary>
            Creates a <see cref="T:VC3.ComponentModel.BusinessObject"/> based on
            an <see cref="T:VC3.ComponentModel.BusinessObject.Identifier"/>.
            </summary>
            <param name="id">Identifies the object to create. Cannot be null.</param>
            <returns>
            A new <see cref="T:VC3.ComponentModel.BusinessObject"/> with the specified id
            </returns>
        </member>
        <member name="M:VC3.ComponentModel.IFactory.CreateIdentifier(System.Type,System.Data.IDataRecord)">
            <summary>
            Gets an <see cref="T:VC3.ComponentModel.BusinessObject.Identifier"/> for the specified <see cref="T:VC3.ComponentModel.BusinessObject"/>
            based on the values of the properties marked as identifiers using
            the <see cref="T:VC3.ComponentModel.BusinessObject.IdAttribute"/>.
            </summary>
            <param name="data">An <see cref="T:System.Data.IDataRecord"/> containing the identifier data</param>
            <returns>The <see cref="T:VC3.ComponentModel.BusinessObject.Identifier"/> based of the data record</returns>
        </member>
        <member name="M:VC3.ComponentModel.IFactory.CreateIdentifier(VC3.ComponentModel.BusinessObject)">
            <summary>
            Gets an <see cref="T:VC3.ComponentModel.BusinessObject.Identifier"/> for the specified <see cref="T:VC3.ComponentModel.BusinessObject"/>.
            </summary>
            <param name="instance">A <see cref="T:VC3.ComponentModel.BusinessObject"/> instance</param>
            <returns>The <see cref="T:VC3.ComponentModel.BusinessObject.Identifier"/> based of the instance</returns>
        </member>
        <member name="M:VC3.ComponentModel.IFactory.CreateIdentifier(System.Type,System.Object[])">
            <summary>
            Gets an <see cref="T:VC3.ComponentModel.BusinessObject.Identifier"/> based on the id values in an object array.
            </summary>
            <param name="id">An array of <see cref="T:System.Object"/> id values</param>
            <returns>
            The <see cref="T:VC3.ComponentModel.BusinessObject.Identifier"/> based of the id values or null
            if the id represents a null identifier
            </returns>
        </member>
        <member name="M:VC3.ComponentModel.IFactory.CreateIdentifier(System.Type,System.String)">
            <summary>
            Gets an <see cref="T:VC3.ComponentModel.BusinessObject.Identifier"/> based on the id string.
            </summary>
            <param name="id">An <see cref="T:System.String"/> id</param>
            <returns>The <see cref="T:VC3.ComponentModel.BusinessObject.Identifier"/> based of the id</returns>
        </member>
        <member name="P:VC3.ComponentModel.IFactory.IdLength">
            <summary>
            Length of the <see cref="P:VC3.ComponentModel.BusinessObject.Identifier.Values"/> array
            of all identifiers created by this scheme.
            </summary>
        </member>
        <member name="M:VC3.ComponentModel.GuidBusinessObject.GuidFactory.CreateBusinessObject(System.Type)">
            <summary>
            Creates a <see cref="T:VC3.ComponentModel.BusinessObject"/> of the specified type.
            The object returned will be new (<see cref="P:VC3.ComponentModel.BusinessObject.IsNew"/> = true).
            </summary>
            <param name="objectType">The type of object to create. Must be a type handled by this factory.</param>
            <returns>
            A new <see cref="T:VC3.ComponentModel.BusinessObject"/> with <see cref="P:VC3.ComponentModel.BusinessObject.IsNew"/> = true.
            </returns>
        </member>
        <member name="M:VC3.ComponentModel.GuidBusinessObject.GuidFactory.CreateBusinessObject(VC3.ComponentModel.BusinessObject.Identifier)">
            <summary>
            Creates an <see cref="T:VC3.ComponentModel.BusinessObject"/> based on
            an <see cref="T:VC3.ComponentModel.BusinessObject.Identifier"/>.
            </summary>
            <param name="id">Identifies the object to create</param>
            <returns>
            A new <see cref="T:VC3.ComponentModel.BusinessObject"/> with the specified id
            or an anonymous <see cref="T:VC3.ComponentModel.BusinessObject"/> if id is null.
            </returns>
        </member>
        <member name="M:VC3.ComponentModel.GuidBusinessObject.GuidFactory.CreateIdentifier(System.Type,System.Data.IDataRecord)">
            <summary>
            Gets an <see cref="T:VC3.ComponentModel.BusinessObject.Identifier"/> for the specified <see cref="T:VC3.ComponentModel.BusinessObject"/>
            based on the values of the properties marked as identifiers using
            the <see cref="T:VC3.ComponentModel.BusinessObject.IdAttribute"/>.
            </summary>
            <param name="data">An <see cref="T:System.Data.IDataRecord"/> containing the identifier data</param>
            <returns>The <see cref="T:VC3.ComponentModel.BusinessObject.Identifier"/> based of the data record</returns>
        </member>
        <member name="M:VC3.ComponentModel.GuidBusinessObject.GuidFactory.CreateIdentifier(VC3.ComponentModel.BusinessObject)">
            <summary>
            Gets an <see cref="T:VC3.ComponentModel.BusinessObject.Identifier"/> for the specified <see cref="T:VC3.ComponentModel.BusinessObject"/>.
            </summary>
            <param name="instance">A <see cref="T:VC3.ComponentModel.BusinessObject"/> instance</param>
            <returns>The <see cref="T:VC3.ComponentModel.BusinessObject.Identifier"/> based of the instance</returns>
        </member>
        <member name="M:VC3.ComponentModel.GuidBusinessObject.GuidFactory.CreateIdentifier(System.Type,System.Object[])">
            <summary>
            Gets an <see cref="T:VC3.ComponentModel.BusinessObject.Identifier"/> based on the id values in an object array.
            </summary>
            <param name="id">An array of <see cref="T:System.Object"/> id values</param>
            <returns>
            The <see cref="T:VC3.ComponentModel.BusinessObject.Identifier"/> based of the id values or null
            if the id represents a null identifier
            </returns>
        </member>
        <member name="M:VC3.ComponentModel.GuidBusinessObject.GuidFactory.CreateIdentifier(System.Type,System.String)">
            <summary>
            Gets an <see cref="T:VC3.ComponentModel.BusinessObject.Identifier"/> based on the id string.
            </summary>
            <param name="id">An <see cref="T:System.String"/> id</param>
            <returns>The <see cref="T:VC3.ComponentModel.BusinessObject.Identifier"/> based of the id</returns>
        </member>
        <member name="P:VC3.ComponentModel.GuidBusinessObject.GuidFactory.IdLength">
            <summary>
            Length of the <see cref="P:VC3.ComponentModel.BusinessObject.Identifier.Values"/> array
            of all identifiers created by this scheme.
            </summary>
        </member>
        <member name="T:VC3.ComponentModel.GuidBusinessObjectList">
            <summary>
            Maintains a collection of <see cref="T:VC3.ComponentModel.GuidBusinessObject"/> instances.
            </summary>
        </member>
        <member name="T:VC3.ComponentModel.BusinessObjectList">
            <summary>
            Base class for strongly-typed collections of <see cref="T:VC3.ComponentModel.BusinessObject"/> subclasses.
            </summary>
        </member>
        <member name="F:VC3.ComponentModel.BusinessObjectList.DirtyMask">
            <summary>
            Constants for bit masks used in conjunction with the
            <see cref="F:VC3.ComponentModel.BusinessObjectList.state"/> field in order to track the state
            of the collection using only a single integer value.
            </summary>
        </member>
        <member name="F:VC3.ComponentModel.BusinessObjectList.UnOrdered">
            <summary>
            Index used for an item that has no order specified yet.
            </summary>
        </member>
        <member name="F:VC3.ComponentModel.BusinessObjectList.DeleteCommitter">
            <summary>
            Exposes a default implementation of <see cref="T:VC3.ComponentModel.BusinessObject.ListCommitter"/> for
            automatically calling <see cref="M:VC3.ComponentModel.BusinessObject.Delete"/> on instances removed from
            a list.
            </summary>
        </member>
        <member name="F:VC3.ComponentModel.BusinessObjectList.state">
            <summary>
            Store object state in a single value for storage efficency purposes.
            </summary>
        </member>
        <member name="F:VC3.ComponentModel.BusinessObjectList.owner">
            <summary>
            The owner of the list, which is automatically assigned by the
            <see cref="M:VC3.ComponentModel.BusinessObject.RegisterOwnership"/> method for lists that
            are fields of a <see cref="T:VC3.ComponentModel.BusinessObject"/> instance.
            </summary>
        </member>
        <member name="F:VC3.ComponentModel.BusinessObjectList.loaderDelegate">
            <summary>
            The <see cref="T:VC3.ComponentModel.BusinessObject.ListLoader"/> delegate instance
            that will be used to get data for the list when
            <see cref="M:VC3.ComponentModel.BusinessObjectList.LazyInitialize"/> is called.
            </summary>
        </member>
        <member name="F:VC3.ComponentModel.BusinessObjectList.persister">
            <summary>
            The <see cref="T:VC3.ComponentModel.BusinessObjectList.PersistManager"/> subclass responsible for tracking
            and persisting changes to the list when <see cref="M:VC3.ComponentModel.BusinessObjectList.CommitChanges"/>
            is called.
            </summary>
        </member>
        <member name="F:VC3.ComponentModel.BusinessObjectList.items">
            <summary>
            The underlying store for items contained by the list.
            </summary>
        </member>
        <member name="F:VC3.ComponentModel.BusinessObjectList.loadingHint">
            <summary>
            Hints to affect how the list will be loaded.
            </summary>
        </member>
        <member name="F:VC3.ComponentModel.BusinessObjectList.context">
            <summary>
            Tracks the graph context in which this object resides.
            </summary>
        </member>
        <member name="M:VC3.ComponentModel.BusinessObjectList.#ctor">
            <summary>
            Creates a new, empty list
            </summary>
        </member>
        <member name="M:VC3.ComponentModel.BusinessObjectList.#ctor(VC3.ComponentModel.BusinessObject.ListLoader)">
            <summary>
            Creates a new, empty list, and registers a delegate for loading items
            </summary>
            <param name="loader">Used to populate the list. Pass null if the list is a new list.</param>
        </member>
        <member name="M:VC3.ComponentModel.BusinessObjectList.#ctor(VC3.ComponentModel.BusinessObject.ListLoader,System.String)">
            <summary>
            Creates a new, empty list, and registers delegates for loading, removing and adding items
            </summary>
            <param name="loader">Used to populate the list. Pass null if the list is a new list.</param>
            <param name="ownerPropertyName">The name of the property on the objects contained in the list that corresponds to the owner of the list</param>
        </member>
        <member name="M:VC3.ComponentModel.BusinessObjectList.#ctor(VC3.ComponentModel.BusinessObject.ListLoader,VC3.ComponentModel.BusinessObject.ListPersister)">
            <summary>
            Creates a new, empty list, and registers delegates for loading, removing and adding items.
            Begins tracking changes to the list if an adder or remover are
            specified.
            </summary>
            <param name="loader">Used to populate the list. Pass null if the list is a new list.</param>
            <param name="updater">Used to update relationships between owner and items in the list</param>
        </member>
        <member name="M:VC3.ComponentModel.BusinessObjectList.#ctor(VC3.ComponentModel.BusinessObject.ListLoader,VC3.ComponentModel.BusinessObject.ListCommitter,VC3.ComponentModel.BusinessObject.ListCommitter)">
            <summary>
            Creates a new, empty list, and registers delegates for loading, removing and adding items.
            Begins tracking changes to the list if an adder or remover are
            specified.
            </summary>
            <param name="loader">Used to populate the list. Pass null if the list is a new list.</param>
            <param name="adder">Used to save new relationships between owner and items in the list</param>
            <param name="remover">Used to remove old relationships between owner and items in the list</param>
        </member>
        <member name="M:VC3.ComponentModel.BusinessObjectList.#ctor(VC3.ComponentModel.BusinessObject.ListLoader,VC3.ComponentModel.BusinessObject.ListPersister,VC3.ComponentModel.BusinessObject.ListPersister)">
            <summary>
            Creates a new, empty list, and registers delegates for loading, removing and adding items.
            Begins tracking changes to the list if an adder or remover are
            specified.
            </summary>
            <param name="loader">Used to populate the list. Pass null if the list is a new list.</param>
            <param name="adder">Used to save new relationships between owner and items in the list</param>
            <param name="remover">Used to remove old relationships between owner and items in the list</param>
        </member>
        <member name="M:VC3.ComponentModel.BusinessObjectList.Register(VC3.ComponentModel.BusinessObject,VC3.ComponentModel.BusinessObject.ListLoader,VC3.ComponentModel.BusinessObjectList.PersistManager)">
            <summary>
            Registers delegates for loading, removing and adding items
            </summary>
            <param name="owner">BusinessObject that created the list</param>
            <param name="loader">Used to populate the list. Pass null if the list is a new list.</param>
            <param name="persister">The persistence manager to use to track and persist changes to the list.</param>
        </member>
        <member name="M:VC3.ComponentModel.BusinessObjectList.Register(VC3.ComponentModel.BusinessObject,VC3.ComponentModel.BusinessObject.ListLoader)">
            <summary>
            Registers delegates for loading, removing and adding items
            </summary>
            <param name="owner">BusinessObject that created the list</param>
            <param name="loader">Used to populate the list. Pass null if the list is a new list.</param>
        </member>
        <member name="M:VC3.ComponentModel.BusinessObjectList.Register(VC3.ComponentModel.BusinessObject,VC3.ComponentModel.BusinessObject.ListLoader,System.String)">
            <summary>
            Registers delegates for loading, removing and adding items
            </summary>
            <param name="owner">BusinessObject that created the list</param>
            <param name="loader">Used to populate the list. Pass null if the list is a new list.</param>
            <param name="ownerPropertyName">The name of the property on the objects contained in the list that corresponds to the owner of the list</param>
        </member>
        <member name="M:VC3.ComponentModel.BusinessObjectList.Register(VC3.ComponentModel.BusinessObject,VC3.ComponentModel.BusinessObject.ListLoader,VC3.ComponentModel.BusinessObject.ListPersister)">
            <summary>
            Registers delegates for loading, removing and adding items.
            Begins tracking changes to the list if an adder or remover are
            specified.
            </summary>
            <param name="owner">BusinessObject that created the list</param>
            <param name="loader">Used to populate the list. Pass null if the list is a new list.</param>
            <param name="updater">Used to update relationships between owner and items in the list</param>
        </member>
        <member name="M:VC3.ComponentModel.BusinessObjectList.Register(VC3.ComponentModel.BusinessObject,VC3.ComponentModel.BusinessObject.ListLoader,VC3.ComponentModel.BusinessObject.ListCommitter,VC3.ComponentModel.BusinessObject.ListCommitter)">
            <summary>
            Registers delegates for loading, removing and adding items.
            Begins tracking changes to the list if an adder or remover are
            specified.
            </summary>
            <param name="owner">BusinessObject that created the list</param>
            <param name="loader">Used to populate the list. Pass null if the list is a new list.</param>
            <param name="adder">Used to save new relationships between owner and items in the list</param>
            <param name="remover">Used to remove old relationships between owner and items in the list</param>
        </member>
        <member name="M:VC3.ComponentModel.BusinessObjectList.Register(VC3.ComponentModel.BusinessObject,VC3.ComponentModel.BusinessObject.ListLoader,VC3.ComponentModel.BusinessObject.ListPersister,VC3.ComponentModel.BusinessObject.ListPersister)">
            <summary>
            Registers delegates for loading, removing and adding items.
            Begins tracking changes to the list if an adder or remover are
            specified.
            </summary>
            <param name="owner">BusinessObject that created the list</param>
            <param name="loader">Used to populate the list. Pass null if the list is a new list.</param>
            <param name="adder">Used to save new relationships between owner and items in the list</param>
            <param name="remover">Used to remove old relationships between owner and items in the list</param>
        </member>
        <member name="M:VC3.ComponentModel.BusinessObjectList.DeleteItems(VC3.ComponentModel.BusinessObject,VC3.ComponentModel.BusinessObject[])">
            <summary>
            Deletes all specified items by calling <see cref="M:VC3.ComponentModel.IDeletable.Delete"/>.
            </summary>
            <param name="owner">The previous owner of the list the items were removed from, if any</param>
            <param name="items">The removed items</param>
            <remarks>
            This method implements the contract defined by the <see cref="M:VC3.ComponentModel.BusinessObject.Delete"/>
            delegate and is exposed as a protected static property <see cref="F:VC3.ComponentModel.BusinessObjectList.DeleteCommitter"/>.
            </remarks>
        </member>
        <member name="M:VC3.ComponentModel.BusinessObjectList.GetIds">
            <summary>
            Gets the identifiers of all business objects in the collection.
            </summary>
            <returns>An array of ids.</returns>
        </member>
        <member name="M:VC3.ComponentModel.BusinessObjectList.Add(System.String[])">
            <summary>
            Adds items to the list based on their string ids.
            </summary>
        </member>
        <member name="M:VC3.ComponentModel.BusinessObjectList.RemoveRange(System.Collections.IEnumerable)">
            <summary>
            Removes a number of items from the list.
            </summary>
        </member>
        <member name="M:VC3.ComponentModel.BusinessObjectList.AddRange(System.Collections.IEnumerable)">
            <summary>
            Adds a number of items to the list.
            </summary>
        </member>
        <member name="M:VC3.ComponentModel.BusinessObjectList.DeleteAll">
            <summary>
            Deletes all items in the list and removes them.
            </summary>
        </member>
        <member name="M:VC3.ComponentModel.BusinessObjectList.Sort(System.Collections.IComparer[])">
            <summary>
            Sorts the list based on the comparers specified.
            </summary>
            <param name="comparers">Defines the order of the list.  Each comparer is
            used in left to right order.</param>
            <remarks>
            The sorting process does not cause the <see cref="E:VC3.ComponentModel.BusinessObjectList.Changed"/> event to fire
            and does not notify the current <see cref="T:VC3.ComponentModel.BusinessObjectList.PersistManager"/> of change in the
            list order, so sequenced lists will not be resequenced due to the sort.
            </remarks>
        </member>
        <member name="M:VC3.ComponentModel.BusinessObjectList.Sort(System.String)">
            <summary>
            Sorts the list in ascending order
            </summary>
            <param name="source"></param>
        </member>
        <member name="M:VC3.ComponentModel.BusinessObjectList.Sort(System.String,System.Boolean)">
            <summary>
            Sorts the list by a property name.  Can
            walk multiple property references such as
            "Property1.Property2.Property3"
            </summary>
            <param name="source">Property expression</param>
            <remarks>
            The sorting process does not cause the <see cref="E:VC3.ComponentModel.BusinessObjectList.Changed"/> event to fire
            and does not notify the current <see cref="T:VC3.ComponentModel.BusinessObjectList.PersistManager"/> of change in the
            list order, so sequenced lists will not be resequenced due to the sort.
            </remarks>
        </member>
        <member name="M:VC3.ComponentModel.BusinessObjectList.Sort">
            <summary>
            Sorts the items in this list based on the <see cref="T:System.IComparable"/>
            implementation of each item.  This will throw an exception on items that
            do not implement <see cref="T:System.IComparable"/>
            </summary>
        </member>
        <member name="M:VC3.ComponentModel.BusinessObjectList.StartTrackingChanges">
            <summary>
            Signals the list to start keeping track
            of which items are added and which are removed
            </summary>
        </member>
        <member name="M:VC3.ComponentModel.BusinessObjectList.StopTrackingChanges">
            <summary>
            Signals the list to stop keeping track
            of which items are added and which are removed
            </summary>
        </member>
        <member name="M:VC3.ComponentModel.BusinessObjectList.OnChanged(VC3.ComponentModel.BusinessObject,System.Int32,VC3.ComponentModel.BusinessObject,System.Int32)">
            <summary>
            Called to raise the <see cref="E:VC3.ComponentModel.BusinessObjectList.Changed"/> event.
            Keeps track of which items have been added or removed.
            </summary>
            <param name="added">List item that that was added, if any</param>
            <param name="addedAt">The index of the added item, or <see cref="F:VC3.ComponentModel.BusinessObjectList.UnOrdered"/> if no item was added</param>
            <param name="removed">List item that was removed, if any</param>
            <param name="removedAt">The index of the removed item, or <see cref="F:VC3.ComponentModel.BusinessObjectList.UnOrdered"/> if no item was removed</param>
        </member>
        <member name="M:VC3.ComponentModel.BusinessObjectList.OnBeforeCommit">
            <summary>
            Delegates to the <see cref="T:VC3.ComponentModel.BusinessObjectList.PersistManager"/> to persist changes to the list.
            </summary>
        </member>
        <member name="M:VC3.ComponentModel.BusinessObjectList.OnAfterCommit">
            <summary>
            Delegates to the <see cref="T:VC3.ComponentModel.BusinessObjectList.PersistManager"/> to persist changes to the list.
            </summary>
        </member>
        <member name="M:VC3.ComponentModel.BusinessObjectList.CommitChanges">
            <summary>
            Commits changes to all items in the list
            and updates the association between the list
            owner and list items.
            </summary>
        </member>
        <member name="M:VC3.ComponentModel.BusinessObjectList.CopyTo(System.Collections.IList,System.Int32)">
            <summary>
            Copies the items in the list to another list
            </summary>
            <param name="list"></param>
        </member>
        <member name="M:VC3.ComponentModel.BusinessObjectList.Clone(System.Boolean,System.Boolean)">
            <summary>
            Returns a deep copy of the list. The cloned list
            will contain a clone of each item in the original
            list created by calling <see cref="M:VC3.ComponentModel.BusinessObject.Clone(System.Boolean,System.Boolean)"/> passing
            through the the isNew and fields parameters.
            </summary>
            <param name="isNew">
            If true, each cloned item will be new (<see cref="P:VC3.ComponentModel.BusinessObject.IsNew"/>).
            If false, the a new list object will be create however none of the items
            will be copied. The new list will appear to have had all of its items new added
            to it.
            </param>
            <param name="fields">If true, each cloned item's fields will also be cloned</param>
            <returns>Cloned list</returns>
        </member>
        <member name="M:VC3.ComponentModel.BusinessObjectList.ToIdStrings">
            <summary>
            Gets the ids of all objects in the list
            </summary>
            <returns></returns>
        </member>
        <member name="M:VC3.ComponentModel.BusinessObjectList.RemoveDeletedItems">
            <summary>
            Removes any item from the list where the
            IsDeleted property is set to TRUE.
            <remarks>
            Useful when items are marked as IsDeleted, but
            they are still being loaded (ie the list is cached)
            </remarks>
            </summary>
        </member>
        <member name="M:VC3.ComponentModel.BusinessObjectList.InitializeContext">
            <summary>
            Initializes the list's context.
            </summary>
        </member>
        <member name="M:VC3.ComponentModel.BusinessObjectList.VC3#Security#Authorization#ISecurityContext#GetPermission(VC3.Security.Authorization.IRole)">
            <summary>
            Gets the context permissions on the object for the specified task.
            </summary>
        </member>
        <member name="P:VC3.ComponentModel.BusinessObjectList.IsReadOnly">
            <summary>
            If true, the contents of the business object list cannot be changed.
            </summary>
            <remarks>
            Sub-classes can override this property with specific
            rules for when they can be changed.
            <see cref="M:VC3.ComponentModel.BusinessObject.OnPropertySet(System.String,System.Object)"/> and <see cref="M:VC3.ComponentModel.BusinessObjectList.CommitChanges"/>
            are affected by this property.
            </remarks>
        </member>
        <member name="P:VC3.ComponentModel.BusinessObjectList.IsDirty">
            <summary>
            Indicates if the business object list has changed and needs to be
            persisted when <see cref="M:VC3.ComponentModel.BusinessObjectList.CommitChanges"/> is called.
            </summary>
            <seealso cref="M:VC3.ComponentModel.BusinessObjectList.CommitChanges"/>
        </member>
        <member name="P:VC3.ComponentModel.BusinessObjectList.IsDirtySafe">
            <summary>
            Checks the IsDirty flag without causing the list to load
            </summary>
        </member>
        <member name="P:VC3.ComponentModel.BusinessObjectList.IsInitialized">
            <summary>
            Indicates if the business object list has been initialized.
            Uninitialized business object lists are not persisted when
            <see cref="M:VC3.ComponentModel.BusinessObjectList.CommitChanges"/> is called.
            </summary>
            <seealso cref="M:VC3.ComponentModel.BusinessObjectList.CommitChanges"/>
        </member>
        <member name="P:VC3.ComponentModel.BusinessObjectList.IsLoading">
            <summary>
            Indicates if the business object list is in the process of being loaded.
            </summary>
        </member>
        <member name="P:VC3.ComponentModel.BusinessObjectList.IsCommiting">
            <summary>
            Indicates if the business object list is currently committing changes.
            </summary>
            <seealso cref="M:VC3.ComponentModel.BusinessObjectList.CommitChanges"/>
        </member>
        <member name="P:VC3.ComponentModel.BusinessObjectList.IsTrackingChanges">
            <summary>
            Indicates that the business object list is tracking changes.
            </summary>
            <seealso cref="T:VC3.ComponentModel.BusinessObjectList.PersistManager"/>
        </member>
        <member name="P:VC3.ComponentModel.BusinessObjectList.IsLoaded">
            <summary>
            Indicates whether the business object list has been loaded.
            </summary>
        </member>
        <member name="P:VC3.ComponentModel.BusinessObjectList.IsSorted">
            <summary>
            Indicates whether the business object list has been sorted.
            </summary>
        </member>
        <member name="P:VC3.ComponentModel.BusinessObjectList.Item(System.Int32)">
            <summary>
            Retrieves an item from the list based on its position. 0-based.
            </summary>
        </member>
        <member name="P:VC3.ComponentModel.BusinessObjectList.Count">
            <summary>
            The number of items in the list
            </summary>
        </member>
        <member name="P:VC3.ComponentModel.BusinessObjectList.Context">
            <summary>
            Gets the graph context in which this object resides.
            </summary>
        </member>
        <member name="P:VC3.ComponentModel.BusinessObjectList.Owner">
            <summary>
            The object that is registered as the list owner
            </summary>
        </member>
        <member name="P:VC3.ComponentModel.BusinessObjectList.CurrentLoader">
            <summary>
            Gets the current loader
            </summary>
        </member>
        <member name="P:VC3.ComponentModel.BusinessObjectList.LoadingHint">
            <summary>
            Optional hints that will affect how the list will be loaded.
            </summary>
        </member>
        <member name="P:VC3.ComponentModel.BusinessObjectList.Transaction">
            <summary>
            If specified, the transaction provider to use when
            <see cref="M:VC3.ComponentModel.BusinessObjectList.CommitChanges"/> is called.
            </summary>
        </member>
        <member name="E:VC3.ComponentModel.BusinessObjectList.Changed">
            <summary>
            Raised when an item is added to or removed from the list.
            Non-public delegates attached to this event will not be serialized.
            </summary>
        </member>
        <member name="E:VC3.ComponentModel.BusinessObjectList.AfterLoad">
            <summary>
            Raised immediately after the list has been loaded with its data.  If the list
            is already loaded the event is raised immediately.
            </summary>
        </member>
        <member name="T:VC3.ComponentModel.BusinessObjectList.IndexedList">
            <summary>
            Provides a single-valued indexed search for a <see cref="T:VC3.ComponentModel.BusinessObjectList"/>.
            </summary>
        </member>
        <member name="T:VC3.ComponentModel.BusinessObjectList.IndexedListBase">
            <summary>
            Base class for an providing an indexed search for a <see cref="T:VC3.ComponentModel.BusinessObjectList"/>.
            </summary>
            <remarks>
            <para>
            This class is not serializable to minimize the serialization footprint.
            </para>
            <para>
            Subclasses of <see cref="T:VC3.ComponentModel.BusinessObjectList"/> that maintain an indexed list
            will not have the index copied if the list is cloned.  The reference will
            be null in the copied object.
            </para>
            <para>
            If changes are made to the underlying list, the index will automatically
            update itself to relfect those changes.
            </para>
            </remarks>
        </member>
        <member name="M:VC3.ComponentModel.BusinessObjectList.IndexedListBase.#ctor(VC3.ComponentModel.BusinessObjectList,System.Collections.IDictionary,System.Boolean)">
            <summary>
            Creates a new index on the specified list for the specified property.
            To create a case-insensitive list use a Hashtable that uses a <see cref="T:System.Collections.CaseInsensitiveHashCodeProvider"/>
            and <see cref="T:System.Collections.CaseInsensitiveComparer"/>.
            </summary>
            <param name="list">List to index</param>
            <param name="indexStorage">Dictionary index is stored in or null to use the default storage</param>
            <param name="ignoreDuplicates">Indicates whether to ignore duplicate entries when the index is built</param>
        </member>
        <member name="M:VC3.ComponentModel.BusinessObjectList.IndexedListBase.Find(System.Object)">
            <summary>
            Locates the object, if any, in the index by the specified key.
            </summary>
        </member>
        <member name="M:VC3.ComponentModel.BusinessObjectList.IndexedListBase.GetKey(System.Object)">
            <summary>
            Gets the key that can be used to retrieve an object from the indexed list.
            </summary>
            <param name="valueObj">The object to get the key of.</param>
            <returns>The key to locate the object.</returns>
        </member>
        <member name="M:VC3.ComponentModel.BusinessObjectList.IndexedList.#ctor(VC3.ComponentModel.BusinessObjectList,VC3.ComponentModel.PropertyReflector)">
            <summary>
            Creates a new index on the specified list for the specified property
            </summary>
            <param name="list">List to index</param>
            <param name="property">Property to index by</param>
        </member>
        <member name="M:VC3.ComponentModel.BusinessObjectList.IndexedList.#ctor(VC3.ComponentModel.BusinessObjectList,System.String)">
            <summary>
            Creates a new index on the specified list for the specified property
            </summary>
            <param name="list">List to index</param>
            <param name="property">Property to index by</param>
        </member>
        <member name="M:VC3.ComponentModel.BusinessObjectList.IndexedList.#ctor(VC3.ComponentModel.BusinessObjectList,System.String,System.Boolean)">
            <summary>
            Creates a new index on the specified list for the specified property.
            To create a case-insensitive list use a Hashtable that uses a <see cref="T:System.Collections.CaseInsensitiveHashCodeProvider"/>
            and <see cref="T:System.Collections.CaseInsensitiveComparer"/>.
            </summary>
            <param name="list">List to index</param>
            <param name="property">Property to index</param>
            <param name="ignoreDuplicates">Indicates whether to ignore duplicate entries when the index is built</param>
        </member>
        <member name="M:VC3.ComponentModel.BusinessObjectList.IndexedList.#ctor(VC3.ComponentModel.BusinessObjectList,System.String,System.Collections.IDictionary)">
            <summary>
            Creates a new index on the specified list for the specified property.
            To create a case-insensitive list use a Hashtable that uses a <see cref="T:System.Collections.CaseInsensitiveHashCodeProvider"/>
            and <see cref="T:System.Collections.CaseInsensitiveComparer"/>.
            </summary>
            <param name="list">List to index</param>
            <param name="property">Property to index</param>
            <param name="indexStorage">Dictionary index is stored in</param>
        </member>
        <member name="M:VC3.ComponentModel.BusinessObjectList.IndexedList.#ctor(VC3.ComponentModel.BusinessObjectList,System.String,System.Collections.IDictionary,System.Boolean)">
            <summary>
            Creates a new index on the specified list for the specified property.
            To create a case-insensitive list use a Hashtable that uses a <see cref="T:System.Collections.CaseInsensitiveHashCodeProvider"/>
            and <see cref="T:System.Collections.CaseInsensitiveComparer"/>.
            </summary>
            <param name="list">List to index</param>
            <param name="property">Property to index</param>
            <param name="indexStorage">Dictionary index is stored in</param>
            <param name="ignoreDuplicates">Indicates whether to ignore duplicate entries when the index is built</param>
        </member>
        <member name="M:VC3.ComponentModel.BusinessObjectList.IndexedList.GetPropertyReflector(System.String,VC3.ComponentModel.BusinessObjectList)">
            <summary>
            Converts a string to a PropertyReflector.
            </summary>
        </member>
        <member name="M:VC3.ComponentModel.BusinessObjectList.IndexedList.GetKey(System.Object)">
            <summary>
            Overridden to use a <see cref="T:VC3.ComponentModel.PropertyReflector"/>
            to read a key from an object.
            </summary>
            <param name="valueObj"></param>
            <returns></returns>
        </member>
        <member name="P:VC3.ComponentModel.BusinessObjectList.IndexedList.Item(System.Object)">
            <summary>
            Locates the object, if any, in the index by the specified key.
            </summary>
        </member>
        <member name="T:VC3.ComponentModel.BusinessObjectList.DuplicateIndexException">
            <summary>
            Thrown when an indexed list encounters a duplicate index value.
            </summary>
        </member>
        <member name="M:VC3.ComponentModel.BusinessObjectList.DuplicateIndexException.#ctor(System.Object,VC3.ComponentModel.BusinessObject,VC3.ComponentModel.BusinessObject,System.Exception)">
            <summary>
            Creates a new exception indicating that the
            list contains a duplicate index value.
            </summary>
            <param name="key">The value of the key that exists more than once in the indexed list </param>
            <param name="initialValue">The first <see cref="T:VC3.ComponentModel.BusinessObject"/> associated with the duplicate key.</param>
            <param name="duplicateValue">The second <see cref="T:VC3.ComponentModel.BusinessObject"/> associated with the duplicate key.</param>
            <param name="ex">The inner exception</param>
        </member>
        <member name="P:VC3.ComponentModel.BusinessObjectList.DuplicateIndexException.Key">
            <summary>
            Gets the key value that exists more than once in the indexed list.
            </summary>
        </member>
        <member name="P:VC3.ComponentModel.BusinessObjectList.DuplicateIndexException.InitialValue">
            <summary>
            Gets the initial <see cref="T:VC3.ComponentModel.BusinessObject"/> associated with the duplicate key.
            </summary>
        </member>
        <member name="P:VC3.ComponentModel.BusinessObjectList.DuplicateIndexException.DuplicateValue">
            <summary>
            Gets the duplicate <see cref="T:VC3.ComponentModel.BusinessObject"/> associated with the duplicate key.
            </summary>
        </member>
        <member name="T:VC3.ComponentModel.BusinessObjectList.ComplexIndexedList">
            <summary>
            Provides a multi-valued indexed search for a <see cref="T:VC3.ComponentModel.BusinessObjectList"/>.
            </summary>
        </member>
        <member name="M:VC3.ComponentModel.BusinessObjectList.ComplexIndexedList.#ctor(VC3.ComponentModel.BusinessObjectList,VC3.ComponentModel.PropertyReflector[])">
            <summary>
            Creates a new index on the specified list for an array of properties.
            </summary>
            <param name="list">List to index</param>
            <param name="properties">Properties to index. Ensure the first item in the array
            is a most selective property as the list will indexed off this property.</param>
        </member>
        <member name="M:VC3.ComponentModel.BusinessObjectList.ComplexIndexedList.#ctor(VC3.ComponentModel.BusinessObjectList,System.String[])">
            <summary>
            Creates a new index on the specified list for an array of properties.
            </summary>
            <param name="list">List to index</param>
            <param name="properties">Properties to index. Ensure the first item in the array
            is a most selective property as the list will indexed off this property.</param>
        </member>
        <member name="M:VC3.ComponentModel.BusinessObjectList.ComplexIndexedList.#ctor(VC3.ComponentModel.BusinessObjectList,System.Boolean,System.String[])">
            <summary>
            Creates a new index on the specified list an array of properties.
            To create a case-insensitive list use a Hashtable that uses a <see cref="T:System.Collections.CaseInsensitiveHashCodeProvider"/>
            and <see cref="T:System.Collections.CaseInsensitiveComparer"/>.
            </summary>
            <param name="list">List to index</param>
            <param name="ignoreDuplicates">Indicates whether to ignore duplicate entries when the index is built</param>
            <param name="properties">Properties to index. Ensure the first item in the array
            is a most selective property as the list will indexed off this property.</param>
        </member>
        <member name="M:VC3.ComponentModel.BusinessObjectList.ComplexIndexedList.#ctor(VC3.ComponentModel.BusinessObjectList,System.Collections.IDictionary,System.String[])">
            <summary>
            Creates a new index on the specified list for the specified property.
            To create a case-insensitive list use a Hashtable that uses a <see cref="T:System.Collections.CaseInsensitiveHashCodeProvider"/>
            and <see cref="T:System.Collections.CaseInsensitiveComparer"/>.
            </summary>
            <param name="list">List to index</param>
            <param name="indexStorage">Dictionary index is stored in</param>
            <param name="properties">Properties to index. Ensure the first item in the array
            is a most selective property as the list will indexed off this property.</param>
        </member>
        <member name="M:VC3.ComponentModel.BusinessObjectList.ComplexIndexedList.#ctor(VC3.ComponentModel.BusinessObjectList,System.Collections.IDictionary,System.Boolean,System.String[])">
            <summary>
            Creates a new index on the specified list for the specified property.
            To create a case-insensitive list use a Hashtable that uses a <see cref="T:System.Collections.CaseInsensitiveHashCodeProvider"/>
            and <see cref="T:System.Collections.CaseInsensitiveComparer"/>.
            </summary>
            <param name="list">List to index</param>
            <param name="indexStorage">Dictionary index is stored in</param>
            <param name="ignoreDuplicates">Indicates whether to ignore duplicate entries when the index is built</param>
            <param name="properties">Properties to index. Ensure the first item in the array
            is a most selective property as the list will indexed off this property.</param>
        </member>
        <member name="M:VC3.ComponentModel.BusinessObjectList.ComplexIndexedList.GetPropertyReflectors(System.String[],VC3.ComponentModel.BusinessObjectList)">
            <summary>
            Converts a string to a PropertyReflector.
            </summary>
        </member>
        <member name="M:VC3.ComponentModel.BusinessObjectList.ComplexIndexedList.GetKey(System.Object)">
            <summary>
            Overridden to use a <see cref="T:VC3.ComponentModel.PropertyReflector"/>
            to read a key from an object.
            </summary>
            <param name="valueObj"></param>
            <returns></returns>
        </member>
        <member name="P:VC3.ComponentModel.BusinessObjectList.ComplexIndexedList.Item(System.Object[])">
            <summary>
            Locates the object, if any, in the by the specified keys.
            </summary>
        </member>
        <member name="T:VC3.ComponentModel.BusinessObjectList.Loader">
            <summary>
            Per request singleton that manages on-demand batch loading of business objects.
            </summary>
        </member>
        <member name="M:VC3.ComponentModel.BusinessObjectList.Loader.Register(VC3.ComponentModel.BusinessObjectList)">
            <summary>
            Registers a business object list with the loader to enable on-demand batch loading.
            Its safe to register two different lists with the same parent.
            </summary>
            <param name="list">The business object list to register.</param>
        </member>
        <member name="M:VC3.ComponentModel.BusinessObjectList.Loader.GetLoader(VC3.ComponentModel.BusinessObjectList)">
            <summary>
            Gets a loader that can be used to load the specified list.
            </summary>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:VC3.ComponentModel.BusinessObjectList.Loader.Load(VC3.ComponentModel.BusinessObjectList,VC3.ComponentModel.LoadingHint)">
            <summary>
            Loads all lists associated with this loader
            </summary>
            <remarks>
            This method will perform a "read ahead optimization" by loading
            the requested list as well as other as many other lists as
            possible, up to <see cref="P:VC3.ComponentModel.BusinessObjectList.LoadingHint"/>.MaxBatchSize.
            </remarks>
        </member>
        <member name="M:VC3.ComponentModel.BusinessObjectList.Loader.OnBeforeLoad(VC3.ComponentModel.BusinessObjectList)">
            <summary>
            Called after a list is loaded to mark it as loaded
            </summary>
        </member>
        <member name="M:VC3.ComponentModel.BusinessObjectList.Loader.OnAfterLoad(VC3.ComponentModel.BusinessObjectList)">
            <summary>
            Called after a list is loaded to mark it as loaded
            </summary>
        </member>
        <member name="T:VC3.ComponentModel.BusinessObjectList.PersistManager">
            <summary>
            Base class for handling list persisting relationships between
            the owner of a <see cref="T:VC3.ComponentModel.BusinessObjectList"/> to the items in 
            the list.  <see cref="T:VC3.ComponentModel.BusinessObjectList"/> delegates to an instance of
            this class to handle certain tasks.
            </summary>
        </member>
        <member name="M:VC3.ComponentModel.BusinessObjectList.PersistManager.#ctor(VC3.ComponentModel.BusinessObjectList)">
            <summary>
            Creates a new PersistManager for a given list.
            </summary>
            <param name="list">The list to manage</param>
        </member>
        <member name="M:VC3.ComponentModel.BusinessObjectList.PersistManager.OnChanged(System.Object,VC3.ComponentModel.BusinessObjectListChangedEventArgs)">
            <summary>
            Called before the list's Changed event is raised.  This is used instead of
            the event itself to facilitate serialization.
            </summary>
            <param name="source">The list that was changed</param>
            <param name="e">Event args</param>
        </member>
        <member name="M:VC3.ComponentModel.BusinessObjectList.PersistManager.StartTrackingChanges">
            <summary>
            Called by <see cref="T:VC3.ComponentModel.BusinessObjectList"/> when
            the manager be prepared for changes to the list
            </summary>
        </member>
        <member name="M:VC3.ComponentModel.BusinessObjectList.PersistManager.OnBeforeCommit">
            <summary>
            Called by <see cref="T:VC3.ComponentModel.BusinessObjectList"/> BEFORE
            it commits each item in the list.
            </summary>
        </member>
        <member name="M:VC3.ComponentModel.BusinessObjectList.PersistManager.OnAfterCommit">
            <summary>
            Called by <see cref="T:VC3.ComponentModel.BusinessObjectList"/> AFTER
            it commits each item in the list.
            </summary>
        </member>
        <member name="M:VC3.ComponentModel.BusinessObjectList.PersistManager.GetContext">
            <summary>
            Gets the context that should be used by the list
            </summary>
        </member>
        <member name="P:VC3.ComponentModel.BusinessObjectList.PersistManager.List">
            <summary>
            The list being managed
            </summary>
        </member>
        <member name="T:VC3.ComponentModel.BusinessObjectList.OwnerPersister">
            <summary>
            Handles lists that are being used to maintain a relationship
            between the list owner and item in the list where the items
            in the list are "owned" by the list owner and cannot exist without
            being owned.
            </summary>
            <remarks>
            <para>
            An example of this type of relationship might be
            an Account's assocition with AccountNote.  AccountNote
            cannot exist without being associated with an Account.
            By using this form of list management, AccountNotes can be deleted
            from the system simply by removing them from the AccountNotesList
            owned by an Account.  Likewise, an AccountNote can be associated with
            an Account by addinging it to an Account's Notes collection.
            </para>
            <para>
            This class works in conjunction with the <see cref="T:VC3.ComponentModel.OwnerAttribute"/>
            and <see cref="T:VC3.ComponentModel.OrderedAttribute"/> attributes.
            </para>
            </remarks>
        </member>
        <member name="M:VC3.ComponentModel.BusinessObjectList.OwnerPersister.SetOrderProperty(System.Object,System.Int32)">
            <summary>
            Utility method for setting the order property of an item
            </summary>
        </member>
        <member name="M:VC3.ComponentModel.BusinessObjectList.OwnerPersister.GetOwnerProperty(System.Object)">
            <summary>
            Gets a reflector for the owner property
            </summary>
        </member>
        <member name="M:VC3.ComponentModel.BusinessObjectList.OwnerPersister.SetOwnerProperty(System.Object,VC3.ComponentModel.BusinessObject)">
            <summary>
            Utility method for setting the owner property of an item
            </summary>
        </member>
        <member name="M:VC3.ComponentModel.BusinessObjectList.OwnerPersister.Clone(System.Boolean)">
            <summary>
            Clones the object
            </summary>
            <returns></returns>
        </member>
        <member name="T:VC3.ComponentModel.BusinessObjectList.UpdatePersister">
            <summary>
            Allows for an "update" delegate to be used to persist the current
            list of items.
            </summary>
        </member>
        <member name="M:VC3.ComponentModel.BusinessObjectList.UpdatePersister.OnAfterCommit">
            <summary>
            Called after each item in the list is committed.
            Invokes the "update" delegate passing the list owner
            and current list of list item ids.
            </summary>
        </member>
        <member name="T:VC3.ComponentModel.BusinessObjectList.AddRemovePersister">
            <summary>
            Tracks a list of added and removed objects and allows
            for two delegates, an "adder" and a "remover" to handle
            persisting the changes.
            </summary>
        </member>
        <member name="M:VC3.ComponentModel.BusinessObjectList.AddRemovePersister.OnBeforeCommit">
            <summary>
            Called by <see cref="T:VC3.ComponentModel.BusinessObjectList"/> BEFORE each item 
            in the list is commited.  Calls the "remover" delegate
            that was specified during list registration passing to it
            the list owner and list of REMOVED item ids.
            </summary>
            <remarks>
            Deletes must be performed before inserts to prevent primary
            key violations.  Because of this, deletes will performed first,
            followed by CommitChanges on each list item, followed by 
            inserts (<see cref="M:VC3.ComponentModel.BusinessObjectList.AddRemovePersister.OnAfterCommit"/>).
            </remarks>
        </member>
        <member name="M:VC3.ComponentModel.BusinessObjectList.AddRemovePersister.OnAfterCommit">
            <summary>
            Called by <see cref="T:VC3.ComponentModel.BusinessObjectList"/> AFTER each item 
            in the list is commited.  Calls the "adder" delegate
            that was specified during list registration passing to it
            the list owner and list of ADDED item ids.
            </summary>
            <remarks>
            Deletes must be performed before inserts to prevent primary
            key violations.  Because of this, deletes (<see cref="M:VC3.ComponentModel.BusinessObjectList.AddRemovePersister.OnBeforeCommit"/>) 
            will performed first, followed by CommitChanges on each list item, 
            followed by inserts.
            </remarks>
        </member>
        <member name="M:VC3.ComponentModel.BusinessObjectList.Filterer.original_Changed(System.Object,VC3.ComponentModel.BusinessObjectListChangedEventArgs)">
            <summary>
            Handle additions and removals from the original list to automatically update the filtered list.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:VC3.ComponentModel.BusinessObjectList.Filterer.item_BeforePropertySet(System.Object,VC3.ComponentModel.PropertySetEventArgs)">
            <summary>
            Handle property changes on items in the original list to automatically update the filtered list.
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
        </member>
        <member name="T:VC3.ComponentModel.BusinessObjectList.SpaceOptimizedSerializer">
            <summary>
            Serializes an unloaded <see cref="T:VC3.ComponentModel.BusinessObjectList"/> in certain
            situations to save space.
            </summary>
        </member>
        <member name="T:VC3.ComponentModel.ObjectStateSerializer">
            <summary>
            Serializes the complete state of a <see cref="T:VC3.ComponentModel.BusinessObject"/>
            </summary>
        </member>
        <member name="M:VC3.ComponentModel.ObjectStateSerializer.GetObjectData(System.Object,System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serializes the full state of an object
            </summary>
        </member>
        <member name="M:VC3.ComponentModel.ObjectStateSerializer.SetObjectData(System.Object,System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext,System.Runtime.Serialization.ISurrogateSelector)">
            <summary>
            Deserializes the full state of an object
            </summary>
        </member>
        <member name="M:VC3.ComponentModel.BusinessObjectList.SpaceOptimizedSerializer.GetObjectData(System.Object,System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serializes a <see cref="T:VC3.ComponentModel.BusinessObjectList"/>
            </summary>
        </member>
        <member name="T:VC3.Serialization.ISerializer">
            <summary>
            Interface for a serialization strategy
            </summary>
        </member>
        <member name="M:VC3.ComponentModel.GuidBusinessObjectList.#ctor">
            <summary>
            Creates a new, empty list.
            </summary>
        </member>
        <member name="M:VC3.ComponentModel.GuidBusinessObjectList.#ctor(VC3.ComponentModel.BusinessObject.ListLoader)">
            <summary>
            Creates a new, empty list, and registers a delegate for loading items.
            </summary>
            <param name="loader">Used to populate the list. Pass null if the list is a new list.</param>
        </member>
        <member name="M:VC3.ComponentModel.GuidBusinessObjectList.#ctor(VC3.ComponentModel.BusinessObject.ListLoader,System.String)">
            <summary>
            Creates a new, empty list, and registers a delegate for loading items and the name of the owner.
            </summary>
            <param name="loader">Used to populate the list. Pass null if the list is a new list.</param>
            <param name="ownerPropertyName">The name of the property on the objects contained in the list that corresponds to the owner of the list</param>
        </member>
        <member name="M:VC3.ComponentModel.GuidBusinessObjectList.#ctor(VC3.ComponentModel.BusinessObject.ListLoader,VC3.ComponentModel.BusinessObject.ListPersister)">
            <summary>
            Creates a new, empty list, and registers delegates for loading and updating items.
            Begins tracking changes to the list if an adder or remover are specified.
            </summary>
            <param name="loader">Used to populate the list. Pass null if the list is a new list.</param>
            <param name="updater">Used to update relationships between owner and items in the list</param>
        </member>
        <member name="M:VC3.ComponentModel.GuidBusinessObjectList.#ctor(VC3.ComponentModel.BusinessObject.ListLoader,VC3.ComponentModel.BusinessObject.ListCommitter,VC3.ComponentModel.BusinessObject.ListCommitter)">
            <summary>
            Creates a new, empty list, and registers delegates for loading, removing, and adding items.
            Begins tracking changes to the list if an adder or remover are specified.
            </summary>
            <param name="loader">Used to populate the list. Pass null if the list is a new list.</param>
            <param name="adder">Used to save new relationships between owner and items in the list</param>
            <param name="remover">Used to remove old relationships between owner and items in the list</param>
        </member>
        <member name="M:VC3.ComponentModel.GuidBusinessObjectList.#ctor(VC3.ComponentModel.BusinessObject.ListLoader,VC3.ComponentModel.BusinessObject.ListPersister,VC3.ComponentModel.BusinessObject.ListPersister)">
            <summary>
            Creates a new, empty list, and registers delegates for loading, removing, and adding items.
            Begins tracking changes to the list if an adder or remover are specified.
            </summary>
            <param name="loader">Used to populate the list. Pass null if the list is a new list.</param>
            <param name="adder">Used to save new relationships between owner and items in the list</param>
            <param name="remover">Used to remove old relationships between owner and items in the list</param>
        </member>
        <member name="M:VC3.ComponentModel.GuidBusinessObjectList.Add(System.Guid[])">
            <summary>
            Adds items to the list based on their guid ids.
            </summary>
        </member>
        <member name="M:VC3.ComponentModel.GuidBusinessObjectList.ToGuidArray">
            <summary>
            Gets the ids of each object in the list
            </summary>
            <returns></returns>
        </member>
        <member name="P:VC3.ComponentModel.GuidBusinessObjectList.Item(System.Guid)">
            <summary>
            Gets a <see cref="T:VC3.ComponentModel.GuidBusinessObject"/> contained by the
            list based on the specified <see cref="T:System.Guid"/> id.
            </summary>
        </member>
        <member name="T:VC3.ComponentModel.GuidBusinessObjectList`1">
            <summary>
            Generic version of <see cref="T:VC3.ComponentModel.GuidBusinessObjectList"/> that also implements <see cref="T:VC3.ComponentModel.IBatchableList`1"/>.
            </summary>
            <typeparam name="T">The type of <see cref="T:VC3.ComponentModel.GuidBusinessObject"/></typeparam>
        </member>
        <member name="T:VC3.ComponentModel.IBatchableList`1">
            <summary>
            A list that supports AddRange and RemoveRange as batch operations.
            </summary>
            <typeparam name="T">The type of item in the list</typeparam>
        </member>
        <member name="M:VC3.ComponentModel.IBatchableList`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adds all items to the list as a single batch
            </summary>
            <param name="items">The items to add</param>
        </member>
        <member name="M:VC3.ComponentModel.IBatchableList`1.RemoveRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Remove all items from the list as a single batch
            </summary>
            <param name="items">The items to remove</param>
        </member>
        <member name="M:VC3.ComponentModel.GuidBusinessObjectList`1.#ctor">
            <summary>
            Creates an empty list of objects.
            </summary>
        </member>
        <member name="M:VC3.ComponentModel.GuidBusinessObjectList`1.#ctor(VC3.ComponentModel.BusinessObject.ListLoader)">
            <summary>
            Creates a new, empty list of objects, and registers a delegate for loading items.
            </summary>
            <param name="loader">Used to populate an uninitialized list.</param>
        </member>
        <member name="M:VC3.ComponentModel.GuidBusinessObjectList`1.#ctor(VC3.ComponentModel.BusinessObject.ListLoader,VC3.ComponentModel.BusinessObject.ListPersister)">
            <summary>
            Creates a new, empty list of, and registers a delegate for loading items.
            </summary>
            <param name="loader">Used to populate an uninitialized list.</param>
            <param name="updater">Used to update relationships between owner and items in the list</param>
        </member>
        <member name="M:VC3.ComponentModel.GuidBusinessObjectList`1.#ctor(VC3.ComponentModel.BusinessObject.ListLoader,System.String)">
            <summary>
            Creates a new, empty list of objects, and registers a delegate for loading items.
            </summary>
            <param name="loader">Used to populate an uninitialized list.</param>
            <param name="ownerPropertyName">The name of the property on the objects contained in the list that corresponds to the owner of the list</param>
        </member>
        <member name="M:VC3.ComponentModel.GuidBusinessObjectList`1.#ctor(VC3.ComponentModel.BusinessObject.ListLoader,VC3.ComponentModel.BusinessObject.ListPersister,VC3.ComponentModel.BusinessObject.ListPersister)">
            <summary>
            Creates a new, empty list of objects, and registers a delegate for loading items.
            </summary>
            <param name="loader">Used to populate an uninitialized list.</param>
            <param name="adder">Used to save new relationships between owner and items in the list</param>
            <param name="remover">Used to remove old relationships between owner and items in the list</param>
        </member>
        <member name="M:VC3.ComponentModel.GuidBusinessObjectList`1.IndexOf(`0)">
            <summary>
            Determines the index of a particular item in the list
            </summary>
            <param name="item">The item to search for</param>
            <returns>The index if item is found. -1 otherwise.</returns>
        </member>
        <member name="M:VC3.ComponentModel.GuidBusinessObjectList`1.Insert(System.Int32,`0)">
            <summary>
            Adds a item to the list
            </summary>
            <param name="index">Position at which the item will be inserted</param>
            <param name="item">The item to add to the list</param>
        </member>
        <member name="M:VC3.ComponentModel.GuidBusinessObjectList`1.RemoveAt(System.Int32)">
            <summary>
            Removes a particular item from the list
            </summary>
            <param name="index">Position of the item to remove from the list</param>
        </member>
        <member name="M:VC3.ComponentModel.GuidBusinessObjectList`1.Add(`0)">
            <summary>
            Adds an item to the list
            </summary>
            <param name="item">The item to add to the list</param>
            <returns>The position at which the item was inserted</returns>
        </member>
        <member name="M:VC3.ComponentModel.GuidBusinessObjectList`1.Contains(`0)">
            <summary>
            Determines if a particular item is in the list.
            </summary>
            <param name="item">The item to search for</param>
            <returns>True if item is found. False otherwise.</returns>
        </member>
        <member name="M:VC3.ComponentModel.GuidBusinessObjectList`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the elements in the list to an array, starting at a particular array index.
            </summary>
            <param name="array">The destination array</param>
            <param name="arrayIndex">The zero-based index in array at which copying begins</param>
        </member>
        <member name="M:VC3.ComponentModel.GuidBusinessObjectList`1.Remove(`0)">
            <summary>
            Removes a particular item from the list
            </summary>
            <param name="item">The item to search for</param>
            <returns>true if item was successfully removed from the list</returns>
        </member>
        <member name="M:VC3.ComponentModel.GuidBusinessObjectList`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>A <see cref="T:System.Collections.Generic.IEnumerator`1"/></returns>
        </member>
        <member name="M:VC3.ComponentModel.GuidBusinessObjectList`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adds a range of items to the list
            </summary>
            <param name="items">an <see cref="T:System.Collections.Generic.IEnumerable`1"/> of items to add to the list</param>
        </member>
        <member name="M:VC3.ComponentModel.GuidBusinessObjectList`1.RemoveRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Remves a range of item from the list
            </summary>
            <param name="items">an <see cref="T:System.Collections.Generic.IEnumerable`1"/> of items to remove from the list</param>
        </member>
        <member name="P:VC3.ComponentModel.GuidBusinessObjectList`1.Item(System.Guid)">
            <summary>
            Retrieves an item from the list based on its <see cref="P:VC3.ComponentModel.GuidBusinessObject.Id"/> property
            </summary>
            <param name="id">ID of the object to retrieve</param>
        </member>
        <member name="P:VC3.ComponentModel.GuidBusinessObjectList`1.Item(System.Int32)">
            <summary>
            Retrieves an item from the list based on position in the list
            </summary>
            <param name="index">Position of the item to remove from the list</param>
        </member>
        <member name="T:VC3.ComponentModel.BusinessObjectListAuditor">
            <summary>
            Implements <see cref="T:VC3.ComponentModel.IAuditor"/> to enable the simplified automatic
            auditing of changes to <see cref="T:VC3.ComponentModel.BusinessObjectList"/> subclasses.
            </summary>
            <example>
            Creates an XML representation of audited changes via ToXml() using the
            following structure:
            
            <list>
            	<add>
            		<object/>
            	</add>
            	<remove>
            		<object/>
            	</remove>
            </list>
            
            </example>
        </member>
        <member name="M:VC3.ComponentModel.BusinessObjectListAuditor.#ctor(VC3.ComponentModel.BusinessObjectList)">
            <summary>
            Creates an new <see cref="T:VC3.ComponentModel.BusinessObjectListAuditor"/> to monitor changes
            in the specified <see cref="T:VC3.ComponentModel.BusinessObjectList"/>.
            </summary>
            <param name="instance">The <see cref="T:VC3.ComponentModel.BusinessObjectList"/> instance to audit</param>
        </member>
        <member name="M:VC3.ComponentModel.BusinessObjectListAuditor.instance_Changed(System.Object,VC3.ComponentModel.BusinessObjectListChangedEventArgs)">
            <summary>
            Handles the <see cref="E:VC3.ComponentModel.BusinessObjectList.Changed"/> event to track
            additions, removals, and replacements made to the associated list.
            </summary>
            <param name="sender">The <see cref="T:VC3.ComponentModel.BusinessObjectList"/> being audited</param>
            <param name="args">The event args</param>
        </member>
        <member name="M:VC3.ComponentModel.BusinessObjectListAuditor.ToString">
            <summary>
            Converts the audited change history into an XML string representation.
            </summary>
            <returns>The XML audit history</returns>
        </member>
        <member name="M:VC3.ComponentModel.BusinessObjectListAuditor.Abort">
            <summary>
            Notifies the auditor to stop auditing due to an error condition.
            </summary>
            <remarks>
            Subclasses may use this notification to store auditing information
            in a system error log.
            </remarks>
        </member>
        <member name="M:VC3.ComponentModel.BusinessObjectListAuditor.Complete">
            <summary>
            Notifies the auditor to stop auditing due to the completion of the
            operation being audited.
            </summary>
            <remarks>
            Subclasses may use this notification to store auditing information
            and a audit log for reporting purposes.
            </remarks>
        </member>
        <member name="M:VC3.ComponentModel.BusinessObjectListAuditor.ToXml">
            <summary>
            Converts the current audited change history into an XML representation.
            </summary>
            <returns>A <see cref="T:System.String"/> containing the XML change history</returns>
        </member>
        <member name="P:VC3.ComponentModel.BusinessObjectListAuditor.Changes">
            <summary>
            Gets the set of additions and deletions to the list that
            have occurred since the auditor was created.
            </summary>
        </member>
        <member name="T:VC3.ComponentModel.BusinessObjectListAuditor.ListChangeRecord">
            <summary>
            Records addition, removals, and replacements made to <see cref="T:VC3.ComponentModel.BusinessObjectList"/> instances.
            </summary>
        </member>
        <member name="M:VC3.ComponentModel.BusinessObjectListAuditor.ListChangeRecord.#ctor(VC3.ComponentModel.BusinessObject,VC3.ComponentModel.BusinessObject)">
            <summary>
            Creates an new <see cref="T:VC3.ComponentModel.BusinessObjectListAuditor.ListChangeRecord"/> to track a change
            that was made to a <see cref="T:VC3.ComponentModel.BusinessObjectList"/>.
            </summary>
            <param name="added">The <see cref="T:VC3.ComponentModel.BusinessObject"/> that was added</param>
            <param name="removed">The <see cref="T:VC3.ComponentModel.BusinessObject"/> that was removed</param>
        </member>
        <member name="P:VC3.ComponentModel.BusinessObjectListAuditor.ListChangeRecord.Added">
            <summary>
            Gets the <see cref="T:VC3.ComponentModel.BusinessObject"/> instance that was added to the list.
            </summary>
        </member>
        <member name="P:VC3.ComponentModel.BusinessObjectListAuditor.ListChangeRecord.Removed">
            <summary>
            Gets the <see cref="T:VC3.ComponentModel.BusinessObject"/> instance that was removed from the list.
            </summary>
        </member>
        <member name="P:VC3.ComponentModel.BusinessObjectListAuditor.ListChangeRecord.Description">
            <summary>
            Gets the description of the change that was made to the list.
            </summary>
        </member>
        <member name="T:VC3.ComponentModel.AuditedAttribute">
            <summary>
            Indicates whether a property or component should be audited.
            </summary>
        </member>
        <member name="M:VC3.ComponentModel.AuditedAttribute.#ctor">
            <summary>
            Creates a new <see cref="T:VC3.ComponentModel.AuditedAttribute"/> that indicates that
            auditing should occur for a property or component.
            </summary>
        </member>
        <member name="M:VC3.ComponentModel.AuditedAttribute.#ctor(System.Boolean)">
            <summary>
            Creates a new <see cref="T:VC3.ComponentModel.AuditedAttribute"/> that indicates that
            auditing should occur for a property or component.
            </summary>
            <param name="autoAudit">Indicates whether the property should be automaticall audited</param>
        </member>
        <member name="P:VC3.ComponentModel.AuditedAttribute.PropertySet">
            <summary>
            Indicates whether the BeforePropertySet
            event should be audited for the class or property.
            </summary>
        </member>
        <member name="P:VC3.ComponentModel.AuditedAttribute.Children">
            <summary>
            Indicates whether changes to child <see cref="T:VC3.ComponentModel.BusinessObject"/>
            or <see cref="T:VC3.ComponentModel.BusinessObjectList"/> properties should be audited
            for the class or property.
            </summary>
        </member>
        <member name="P:VC3.ComponentModel.AuditedAttribute.ShowValues">
            <summary>
            Indicates whether audited changes to child <see cref="T:VC3.ComponentModel.BusinessObject"/>
            or <see cref="T:VC3.ComponentModel.BusinessObjectList"/> properties should include values.
            </summary>
        </member>
        <member name="P:VC3.ComponentModel.AuditedAttribute.HiddenPropertyValue">
            <summary>
            Gets or sets the value that should be used for auditing when the 
            property's actual value is hidden.
            </summary>
        </member>
        <member name="P:VC3.ComponentModel.AuditedAttribute.AutoAudit">
             <summary>
             Indicates whether the <see cref="P:VC3.ComponentModel.AuditedAttribute.PropertySet"/> and
             <see cref="P:VC3.ComponentModel.AuditedAttribute.Children"/> auditing settings should be
             automatically determined by <see cref="T:VC3.ComponentModel.IAuditor"/>
             implementations, or if the values for these settings
             on the current attribute should be used.
             </summary>
             <remarks>
             The following logic will be used when automatically
             determining auditing settings:
             
             if child is BusinessObject
            		if child has audited properties
            			if has auditor attribute
            				PropertySet	= true
            				Children	= false
            			else
            				PropertySet	= false
            				Children	= true
            		else
            			PropertySet	= true
            			Children	= false
            			
            	else if child is BusinessObjectList
            		PropertySet	= false
            		if list has add/remove persist manager
            			Children	= true
            		else
            			Children	= false
            
            	else
            		PropertySet	= true
            		Children	= false
            		
             </remarks>
        </member>
        <member name="T:VC3.Text.ListBuilder">
            <summary>
            Utility class to aid in building textual lists of items
            such as SQL statements, HTML lists, etc.
            </summary>
            <remarks>
            This class can be used to simplify the conversion
            of a list to string.  It will handle placing seperators between
            items and conditionally including a header and footer if
            the list is not empty.
            </remarks>
            <example>
            <code><![CDATA[
            // Example to create a where clause
            ListBuilder whereClause = new ListBuilder( "WHERE", " AND ", "" );
            
            whereClause.ToString( );  // ""
            
            whereClause.AppendItem( "x > 1" );
            whereClause.ToString( );  // "WHERE x > 1"
            
            whereClause.AppendItem( "y > 2" );
            whereClause.ToString( );  // "WHERE x > 1 AND y > 2"
            
            // Example that automatically builds a string from a list
            // by calling ToString() on each item in the list.
            ArrayList list = new ArrayList( );
            list.Add( 1 );
            list.Add( 2 );
            list.Add( 3 );
            
            ListBuilder lb = new ListBuilder( "The numbers are ", ", ", "", false, list );
            lb.ToString( );		// "The numbers are 1, 2, 3"
            ]]></code>
            </example>
        </member>
        <member name="M:VC3.Text.ListBuilder.#ctor(System.String,System.String,System.String)">
            <summary>
            A ListBuilder.  Each item will be seperated by the
            specified seperator.  The header and footer will be included
            only if the list is not empty when <see cref="M:VC3.Text.ListBuilder.ToString"/> is called.
            </summary>
            <param name="header">String to include at the start of the list.</param>
            <param name="seperator">String to include between values</param>
            <param name="footer">String to include at the end of the list</param>
        </member>
        <member name="M:VC3.Text.ListBuilder.#ctor(System.String,System.String,System.String,System.Boolean)">
            <summary>
            A ListBuilder.  Each item will be seperated by the
            specified seperator.  The header and footer will be included
            based on the specified parameter.
            </summary>
            <param name="header">String to include at the start of the list.</param>
            <param name="seperator">String to include between values</param>
            <param name="footer">String to include at the end of the list</param>
            <param name="headerAndFooterAlways">If true, the header and footer will be included
            when <see cref="M:VC3.Text.ListBuilder.ToString"/> is called even if there are no items
            in the list (<see cref="P:VC3.Text.ListBuilder.ItemCount"/> == 0).</param>
        </member>
        <member name="M:VC3.Text.ListBuilder.#ctor(System.String,System.String,System.String,System.Boolean,System.Collections.IEnumerable)">
            <summary>
            A ListBuilder.  Each item will be seperated by the
            specified seperator.  The specified items will be automattically
            added to the list.
            </summary>
            <param name="header">String to include at the start of the list.</param>
            <param name="seperator">String to include between values</param>
            <param name="footer">String to include at the end of the list</param>
            <param name="headerAndFooterAlways">If true, the header and footer will be included
            when <see cref="M:VC3.Text.ListBuilder.ToString"/> is called even if there are no items
            in the list (<see cref="P:VC3.Text.ListBuilder.ItemCount"/> == 0).</param>
        </member>
        <member name="M:VC3.Text.ListBuilder.#ctor(System.String)">
            <summary>
            A new ListBuilder
            </summary>
            <param name="seperator">String to include between values</param>
        </member>
        <member name="M:VC3.Text.ListBuilder.NewItem">
            <summary>
            Indicates a boundary between items in the list. 
            If this is not the first item a seperator will be added.
            </summary>
        </member>
        <member name="M:VC3.Text.ListBuilder.AppendItem(System.String,System.Object[])">
            <summary>
            If val is not null and length &gt; 0 then calls 
            <see cref="M:VC3.Text.ListBuilder.NewItem"/> then appends the value specified
            </summary>
        </member>
        <member name="M:VC3.Text.ListBuilder.AppendItems(System.Collections.IEnumerable)">
            <summary>
            If val is not null and length &gt; 0 then calls 
            <see cref="M:VC3.Text.ListBuilder.NewItem"/> then appends the value specified
            </summary>
        </member>
        <member name="M:VC3.Text.ListBuilder.AppendItems(System.String,System.Collections.IEnumerable)">
            <summary>
            If val is not null and length &gt; 0 then calls 
            <see cref="M:VC3.Text.ListBuilder.NewItem"/> then appends the value specified
            </summary>
        </member>
        <member name="M:VC3.Text.ListBuilder.Append(System.String)">
            <summary>
            Appends a string for the current item
            </summary>
        </member>
        <member name="M:VC3.Text.ListBuilder.Append(System.String,System.Object[])">
            <summary>
            Appends a string for the current item
            </summary>
        </member>
        <member name="M:VC3.Text.ListBuilder.ToString">
            <summary>
            Returns the header, list items with seperators between each
            item, and the footer as a single string.
            </summary>
        </member>
        <member name="M:VC3.Text.ListBuilder.ToString(System.Collections.IEnumerable)">
            <summary>
            Converts a list of values into a comma-delimited string.
            </summary>
            <param name="items">The list of values to convert</param>
            <returns>The comma-delimited string of values</returns>
        </member>
        <member name="M:VC3.Text.ListBuilder.ToString(System.Collections.IEnumerable,System.String)">
            <summary>
            Converts a list of values into a delimited string.
            </summary>
            <param name="items">The list of values to convert</param>
            <param name="delimiter">The delimiter to use</param>
            <returns>The delimited string of values</returns>
        </member>
        <member name="P:VC3.Text.ListBuilder.ItemCount">
            <summary>
            Gets the number of items in the list
            </summary>
        </member>
        <member name="P:VC3.Text.ListBuilder.Indent">
            <summary>
            The string to use to indent each newline when <see cref="M:VC3.Text.ListBuilder.ToString"/>
            is invoked.
            </summary>
        </member>
        <member name="T:VC3.ComponentModel.ComponentPropertyDescriptor">
            <summary>
            An enhanced <see cref="T:System.ComponentModel.PropertyDescriptor"/> that delegates to
            <see cref="T:System.ComponentModel.TypeConverterAttribute"/> and <see cref="T:VC3.ComponentModel.FormatAttribute"/>
            to control type conversion.
            </summary>
        </member>
        <member name="T:VC3.ComponentModel.BusinessObjectHacksForExoWeb">
            <summary>
            This class has flags in in to control how BusinessObjects behavior until we can spend
            more time getting ExoWeb rules and errors more fully in place.  Be aware that this
            class (hopefully) will be removed at some point soon.
            </summary>
        </member>
        <member name="P:VC3.ComponentModel.BusinessObjectHacksForExoWeb.PropertySetValidationThrowsExceptions">
            <summary>
            Scoped to the current thread/request
            </summary>
        </member>
        <member name="T:VC3.ComponentModel.BusinessObjectReferenceSerializer">
            <summary>
            Tracks a reference to a <see cref="T:VC3.ComponentModel.BusinessObject"/>.  Used
            to optimize the storage space of serialized objects.
            </summary>
        </member>
        <member name="T:VC3.ComponentModel.BusinessObjectGlobalReferenceSerializer">
            <summary>
            Tracks a reference to a <see cref="T:VC3.ComponentModel.BusinessObject"/>.  Used
            to optimize the storage space of serialized objects.
            </summary>
        </member>
        <member name="T:VC3.ComponentModel.SerializationOptimizations">
            <summary>
            Options for how <see cref="T:VC3.ComponentModel.BusinessObject"/>s are serialized.
            Returned by ISerializationController.GetOptions().
            </summary>
        </member>
        <member name="F:VC3.ComponentModel.SerializationOptimizations.None">
            <summary>
            No optimizations are performed
            </summary>
        </member>
        <member name="F:VC3.ComponentModel.SerializationOptimizations.Automatic">
            <summary>
            Automatically select the best optimizations.  (Default)
            </summary>
        </member>
        <member name="F:VC3.ComponentModel.SerializationOptimizations.SerializeReference">
            <summary>
            Only serialize an object reference but not the object's state
            </summary>
        </member>
        <member name="T:VC3.ComponentModel.ISerializationController">
            <summary>
            Allows an object to control the how an object is optimized.
            Typically the default serialization behavior is good enough so this
            interface should be used with discretion.
            </summary>
        </member>
        <member name="T:VC3.ComponentModel.IAlwaysSerializeReferenceAttribute">
            <summary>
            Marker interface to indicate that a <see cref="T:VC3.ComponentModel.BusinessObject"/> class
            should always be serialized as a reference.
            </summary>
        </member>
        <member name="T:VC3.ComponentModel.AlwaysSerializeReferenceAttribute">
            <summary>
            Indicates that a <see cref="T:VC3.ComponentModel.BusinessObject"/> class
            should always be serialized as a reference.
            </summary>
        </member>
        <member name="T:VC3.ComponentModel.BusinessObjectSurrogateSelector">
            <summary>
            Can be used by a <see cref="T:System.Runtime.Serialization.Formatter"/>
            to minimize the space required by serialized <see cref="T:VC3.ComponentModel.BusinessObject"/> objects.
            </summary>
        </member>
        <member name="T:VC3.ComponentModel.BusinessObjectSpaceOptimizedSerializer">
            <summary>
            Serializes a reference to a <see cref="T:VC3.ComponentModel.BusinessObject"/> in certain
            situations to save space.
            </summary>
        </member>
        <member name="M:VC3.ComponentModel.BusinessObjectSpaceOptimizedSerializer.GetObjectData(System.Object,System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serializes a <see cref="T:VC3.ComponentModel.BusinessObject"/>
            </summary>
        </member>
        <member name="M:VC3.ComponentModel.BusinessObjectSpaceOptimizedSerializer.SetObjectData(System.Object,System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext,System.Runtime.Serialization.ISurrogateSelector)">
            <summary>
            Deserializes a <see cref="T:VC3.ComponentModel.BusinessObject"/>
            </summary>
            <returns></returns>
        </member>
        <member name="T:VC3.ComponentModel.BusinessObjectEventType">
            <summary>
            Identifies the type of event being raised by a <see cref="T:VC3.ComponentModel.BusinessObject"/>.
            Useful for loose handling of events.
            </summary>
        </member>
        <member name="T:VC3.ComponentModel.BusinessObjectEventHandler">
            <summary>
            Delegate for handling general <see cref="T:VC3.ComponentModel.BusinessObject"/> events
            </summary>
        </member>
        <member name="T:VC3.ComponentModel.BusinessObjectEventArgs">
            <summary>
            Base class for events raised by <see cref="T:VC3.ComponentModel.BusinessObject"/>
            </summary>
        </member>
        <member name="T:VC3.ComponentModel.PropertySetEventHandler">
            <summary>
            Delegate for handling the property set event for <see cref="T:VC3.ComponentModel.BusinessObject"/>s
            </summary>
        </member>
        <member name="T:VC3.ComponentModel.PropertySetEventArgs">
            <summary>
            Information about the propert set event <see cref="T:VC3.ComponentModel.BusinessObject"/>s
            </summary>
        </member>
        <member name="P:VC3.ComponentModel.PropertySetEventArgs.Property">
            <summary>
            The property that was changed.
            </summary>
        </member>
        <member name="P:VC3.ComponentModel.PropertySetEventArgs.Value">
            <summary>
            The new value of the property
            </summary>
        </member>
        <member name="P:VC3.ComponentModel.PropertySetEventArgs.IsDirty">
            <summary>
            If true, the property value is being changed to a different value
            </summary>
        </member>
        <member name="T:VC3.ComponentModel.IArchived">
            <summary>
            Interface for abstracting the concept of soft
            deleted, inactive, archived, etc. items
            </summary>
        </member>
        <member name="P:VC3.ComponentModel.IArchived.IsArchived">
            <summary>
            True if the object is considered archived
            </summary>
        </member>
        <member name="T:VC3.ComponentModel.SecurityAdapter">
            <summary>
            Allows application-specific implementation of security across multiple <see cref="T:VC3.ComponentModel.BusinessObject"/> subclasses.
            BusinessObject's <see cref="P:VC3.ComponentModel.BusinessObject.CanView"/>, <see cref="P:VC3.ComponentModel.BusinessObject.CanEdit"/>, and <see cref="P:VC3.ComponentModel.BusinessObject.CanDelete"/> properties
            delegate to a security adapter.  If a custom adapter is not specified by an application, this one will be used by default.
            </summary>
        </member>
        <member name="M:VC3.ComponentModel.SecurityAdapter.EditNewTask(VC3.ComponentModel.BusinessObject)">
            <summary>
            Gets the task associated with editing a business object.
            Called by <see cref="P:VC3.ComponentModel.BusinessObject.CanEdit"/> when the object is new.
            Default: null.
            </summary>
        </member>
        <member name="M:VC3.ComponentModel.SecurityAdapter.EditNewRules(VC3.ComponentModel.BusinessObject)">
            <summary>
            Verifies that the object is not readonly.  Called by <see cref="P:VC3.ComponentModel.BusinessObject.CanEdit"/>
            when the object is new.
            </summary>
        </member>
        <member name="M:VC3.ComponentModel.SecurityAdapter.EditExistingTask(VC3.ComponentModel.BusinessObject)">
            <summary>
            Gets the task associated with editing a business object.
            Called by <see cref="P:VC3.ComponentModel.BusinessObject.CanEdit"/> when the object is new.
            Default: null.
            </summary>
        </member>
        <member name="M:VC3.ComponentModel.SecurityAdapter.EditExistingRules(VC3.ComponentModel.BusinessObject)">
            <summary>
            Verifies that the object is not readonly. Called by <see cref="P:VC3.ComponentModel.BusinessObject.CanEdit"/>
            when the object is not new.
            </summary>
        </member>
        <member name="M:VC3.ComponentModel.SecurityAdapter.DeleteTask(VC3.ComponentModel.BusinessObject)">
            <summary>
            Gets the task associated with deleting a business object.
            Called by <see cref="P:VC3.ComponentModel.BusinessObject.CanDelete"/>.
            Default: null
            </summary>
        </member>
        <member name="M:VC3.ComponentModel.SecurityAdapter.DeleteRules(VC3.ComponentModel.BusinessObject)">
            <summary>
            Verifies that the object is not new and has not already been deleted.
            Called by <see cref="P:VC3.ComponentModel.BusinessObject.CanDelete"/>.
            </summary>
        </member>
        <member name="M:VC3.ComponentModel.SecurityAdapter.ViewTask(VC3.ComponentModel.BusinessObject)">
            <summary>
            Gets the task associated with viewing a business object
            Called by <see cref="P:VC3.ComponentModel.BusinessObject.CanView"/>.
            Default: null
            </summary>
        </member>
        <member name="M:VC3.ComponentModel.SecurityAdapter.ViewRules(VC3.ComponentModel.BusinessObject)">
            <summary>
            Verifies that the object can be viewed, which by default it always can be.
            Called by <see cref="P:VC3.ComponentModel.BusinessObject.CanView"/>.
            </summary>
        </member>
        <member name="M:VC3.ComponentModel.ListTypeAttribute.GetListType(System.Type)">
            <summary>
            Given a list type, gets the item type that the list will hold.
            </summary>
            <param name="type">Type of the list</param>
            <returns>Type of the items in the list</returns>
        </member>
        <member name="T:VC3.ComponentModel.Closure">
            <summary>
            Simulates a closure. Binds a delegate and its arguments into 
            another "delegate" that when invoked, calls the original 
            delegate with the specified parameters.
            </summary>
        </member>
        <member name="M:VC3.ComponentModel.Closure.#ctor(System.Delegate,System.Object[])">
            <summary>
            Creates a new <see cref="T:VC3.ComponentModel.Closure"/> that can be invoked synchronously
            or asynchronously.
            </summary>
            <param name="function">Delegate to invoke</param>
            <param name="parameters">Parameters to pass to delegate</param>
        </member>
        <member name="M:VC3.ComponentModel.Closure.#ctor(VC3.ComponentModel.AsyncExceptionHandler,System.Delegate,System.Object[])">
            <summary>
            Creates a new <see cref="T:VC3.ComponentModel.Closure"/> that can be invoked synchronously
            or asynchronously.
            </summary>
            <param name="exceptionHandler">Delegate to call in the case of an unhandled exception when calling <see cref="M:VC3.ComponentModel.Closure.InvokeAsync(VC3.ComponentModel.AsyncExceptionHandler,System.Delegate,System.Object[])"/>. 
            For example, <see cref="M:VC3.Diagnostics.Notifier.NotifyAll(System.Exception)"/></param>
            <param name="function">Delegate to invoke</param>
            <param name="parameters">Parameters to pass to delegate</param>
        </member>
        <member name="M:VC3.ComponentModel.Closure.Invoke">
            <summary>
            Invokes the delegate using the parameters specified
            in the constructor
            </summary>
        </member>
        <member name="M:VC3.ComponentModel.Closure.InvokeAsync">
            <summary>
            Asynchronously invokes the delegate using the parameters
            specified in the constructor.
            </summary>
        </member>
        <member name="M:VC3.ComponentModel.Closure.InvokeAsync(VC3.ComponentModel.AsyncExceptionHandler,System.Delegate,System.Object[])">
            <summary>
            Asynchronously invokes a delegate. Same as 
            creating a new <see cref="T:VC3.ComponentModel.Closure"/> and calling
            <see cref="M:VC3.ComponentModel.Closure.InvokeAsync"/> yourself.
            </summary>
            <param name="d">The delegate to invoke.</param>
            <param name="args">The arguments for the delegate</param>
            <param name="exceptionHandler">Delegate that is called if an exception occurs.</param>
        </member>
        <member name="M:VC3.ComponentModel.Closure.InvokeAsync(System.Delegate,System.Object[])">
            <summary>
            Asynchronously invokes a delegate. Same as 
            creating a new <see cref="T:VC3.ComponentModel.Closure"/> and calling
            <see cref="M:VC3.ComponentModel.Closure.InvokeAsync"/> yourself.
            </summary>
            <param name="d">The delegate to invoke.</param>
            <param name="args">The arguments for the delegate</param>
        </member>
        <member name="M:VC3.ComponentModel.Closure.InvokeAsyncCallback">
            <summary>
            Entry point for the new thread created by <see cref="M:VC3.ComponentModel.Closure.InvokeAsync"/>
            </summary>
        </member>
        <member name="T:VC3.ComponentModel.AsyncExceptionHandler">
            <summary>
            Called to handle exceptions that occur during an asynchronous
            closure invocation.
            </summary>
        </member>
        <member name="T:VC3.ComponentModel.CloneAttribute">
            <summary>
            Can be applied to a field or type to change how they will be
            cloned by the <see cref="T:VC3.Util.ObjectCloner"/> class.
            The <see cref="P:VC3.ComponentModel.CloneAttribute.IsNew"/> and <see cref="P:VC3.ComponentModel.CloneAttribute.Fields"/> properties
            can be used to control how the object is cloned.
            </summary>
        </member>
        <member name="M:VC3.ComponentModel.CloneAttribute.Clone(System.Object)">
            <summary>
            Creates a clone of the original object via the method
            specified in the attribute constructor.
            </summary>
            <param name="original">object to clone.  Must be a <see cref="T:VC3.ComponentModel.BusinessObject"/> 
            or <see cref="T:VC3.ComponentModel.BusinessObjectList"/></param>
        </member>
        <member name="P:VC3.ComponentModel.CloneAttribute.IsNew">
            <summary>
            If true, the cloned object will be marked as new.
            Defaults to false.
            </summary>
        </member>
        <member name="P:VC3.ComponentModel.CloneAttribute.Fields">
            <summary>
            If true, the cloned object's fields will also be cloned.
            Defaults to false.
            </summary>
        </member>
        <member name="T:VC3.ComponentModel.OrderedAttribute">
            <summary>
            Indicates an association is ordered. Specifies the property
            that should be set to persist the order.
            </summary>
        </member>
        <member name="M:VC3.ComponentModel.OrderedAttribute.#ctor(System.String)">
            <summary>
            Creates a new OrderedAttribute
            </summary>
            <param name="orderProperty">The property on this object that holds 
            the order information</param>
        </member>
        <member name="M:VC3.ComponentModel.OrderedAttribute.SetOrder(System.Object,System.Int32)">
            <summary>
            Sets the "order" property of the object the attribute is applied to.
            </summary>
        </member>
        <member name="T:VC3.ComponentModel.TransactedActivity">
             <summary>
             Represents a set of transacted actions.
             </summary>
             <remarks>
             The transaction is automatically started when the object is created. 
             Call <see cref="M:VC3.ComponentModel.TransactedActivity.Complete"/> to commit the transaction.
             If <see cref="M:VC3.ComponentModel.TransactedActivity.Complete"/> is not called before <see cref="M:VC3.ComponentModel.TransactedActivity.Dispose"/> is called,
             Dispose will rollback the transaction.
             </remarks>
             <example>
             The following is an example usage of <see cref="T:VC3.ComponentModel.TransactedActivity"/>:
             <code>
             	using( IActivity activity = new TransactedActivity(Transaction) )
             	{
             		// A transaction is automattically started when TransactedActivity
             		// is constructed.
            
             		// if an exception is thrown before Complete()
             		// is called, the transaction will automattically be rolled back.
            			RaiseBeforeDelete();
            			OnDelete();
            			RaiseAfterDelete();
            
            			// This will commit the transaction
            			activity.Complete();
            		}
             </code>
             </example>
        </member>
        <member name="M:VC3.ComponentModel.TransactedActivity.#ctor(VC3.ComponentModel.ITransactionProvider)">
            <summary>
            Begins a new transaction using the specified transaction provider.
            </summary>
            <param name="transaction">The transaction provider</param>
        </member>
        <member name="M:VC3.ComponentModel.TransactedActivity.Complete">
            <summary>
            Commits the transaction.  Will throw an exception if the
            transaction has already been committed or rolled back.
            </summary>
        </member>
        <member name="M:VC3.ComponentModel.TransactedActivity.Abort">
            <summary>
            Rolls back the transaction.  Will throw an exception if the
            transaction has already been committed or rolled back.
            </summary>
        </member>
        <member name="M:VC3.ComponentModel.TransactedActivity.Dispose">
            <summary>
            Aborts the transaction if it has not already been committed or
            rolled back.
            </summary>
        </member>
        <member name="M:VC3.ComponentModel.TransactedActivity.StepComplete">
            <summary>
            Completes the current transaction and begins a new one. Will throw an exception if the
            transaction has already been committed or rolled back.
            </summary>
        </member>
        <member name="T:VC3.ComponentModel.CompositeActivity">
            <summary>
            Represents a set of two or more composite actions.
            </summary>
        </member>
        <member name="M:VC3.ComponentModel.CompositeActivity.#ctor(VC3.ComponentModel.IActivity[])">
            <summary>
            Combines two or more activities into a single composite activity.
            </summary>
            <param name="activities">An array of two or more activities to combine</param>
        </member>
        <member name="M:VC3.ComponentModel.CompositeActivity.Complete">
            <summary>
            Completes the activities in reverse order to ensure that
            inner activities are completed before outer activities.
            </summary>
        </member>
        <member name="M:VC3.ComponentModel.CompositeActivity.Abort">
            <summary>
            Aborts the activities in reverse order to ensure that
            inner activities are aborted before outer activities.
            </summary>
        </member>
        <member name="M:VC3.ComponentModel.CompositeActivity.Dispose">
            <summary>
            Disposes all activities in reverse order to ensure that
            inner activities are disposed before outer activities.
            </summary>
            <remarks>
            If an exception occurs when one or more of the activities
            are being disposed, the first exception while be stored and
            rethrown after all activities have been disposed to ensure that
            resources are not lost.
            </remarks>
        </member>
        <member name="T:VC3.ComponentModel.UndoableAction">
            <summary>
            Implementation of IDisposible that invokes a delegate
            when the object is disposed.
            </summary>
        </member>
        <member name="E:VC3.ComponentModel.ITransactionProvider.BeforeBegin">
            <summary>
            Raised just before the root transaction begins.
            Event handlers are automatically unregistered after the
            transaction is completed.
            </summary>
        </member>
        <member name="E:VC3.ComponentModel.ITransactionProvider.AfterBegin">
            <summary>
            Raised just after the root transaction begins.
            Event handlers are automatically unregistered after the
            transaction is completed.
            </summary>
        </member>
        <member name="E:VC3.ComponentModel.ITransactionProvider.BeforeCommit">
            <summary>
            Raised just before the root transaction is committed.
            Event handlers are automatically unregistered after the
            transaction is completed.
            </summary>
        </member>
        <member name="E:VC3.ComponentModel.ITransactionProvider.AfterCommit">
            <summary>
            Raised after the root transaction has been committed.
            Event handlers are automatically unregistered after the
            transaction is completed.
            </summary>
        </member>
        <member name="E:VC3.ComponentModel.ITransactionProvider.AfterRollback">
            <summary>
            Raised after the root transaction has been rolled back.
            Event handlers are automatically unregistered after the
            transaction is completed.
            </summary>
        </member>
        <member name="E:VC3.ComponentModel.DatabaseTransactionProvider.BeforeBegin">
            <summary>
            Raised before the root transaction begins.
            </summary>
        </member>
        <member name="E:VC3.ComponentModel.DatabaseTransactionProvider.AfterBegin">
            <summary>
            Raised after the root transaction begins.
            </summary>
        </member>
        <member name="E:VC3.ComponentModel.DatabaseTransactionProvider.BeforeCommit">
            <summary>
            Raised after the root transaction has been committed.
            </summary>
        </member>
        <member name="E:VC3.ComponentModel.DatabaseTransactionProvider.AfterCommit">
            <summary>
            Raised after the root transaction has been committed.
            </summary>
        </member>
        <member name="E:VC3.ComponentModel.DatabaseTransactionProvider.AfterRollback">
            <summary>
            Raised after the root transaction has been rolled back.
            </summary>
        </member>
        <member name="T:VC3.ComponentModel.NoOpTransactionProvider">
            <summary>
            Transaction provider that doesn't do anything.  Can be used
            to disable transactions.
            </summary>
        </member>
        <member name="E:VC3.ComponentModel.NoOpTransactionProvider.BeforeBegin">
            <summary>
            Raised before the root transaction begins.
            </summary>
        </member>
        <member name="E:VC3.ComponentModel.NoOpTransactionProvider.AfterBegin">
            <summary>
            Raised after the root transaction begins.
            </summary>
        </member>
        <member name="E:VC3.ComponentModel.NoOpTransactionProvider.BeforeCommit">
            <summary>
            Raised after the root transaction has been committed.
            </summary>
        </member>
        <member name="E:VC3.ComponentModel.NoOpTransactionProvider.AfterCommit">
            <summary>
            Raised after the root transaction has been committed.
            </summary>
        </member>
        <member name="E:VC3.ComponentModel.NoOpTransactionProvider.AfterRollback">
            <summary>
            Raised after the root transaction has been rolled back.
            </summary>
        </member>
        <member name="T:VC3.ComponentModel.EditGlobalScopeIntention">
            <summary>
            Notifies the component model that the current thread intends to edit
            objects that are in <see cref="T:VC3.ComponentModel.GlobalScope"/>.  Once this intention
            has been specified, all loading and editing activities involving objects in global scope
            will be temporarily isolated just to the current thread. If a global object
            is changed AND committed, then the shared global scope will be refreshed
            for the current thread, any future threads, or, if in a web app, any future web requests.
            Note: Dispose of the object once the editing is completed to revert.
            </summary>
        </member>
        <member name="M:VC3.ComponentModel.EditGlobalScopeIntention.#ctor">
            <summary>
            Notifies the component model that the current thread intends to edit
            objects that are in <see cref="T:VC3.ComponentModel.GlobalScope"/>.  Once this intention
            has been specified, all loading and editing activities involving objects in global scope
            will be temporarily isolated just to the current thread. If a global object
            is changed AND committed, then the shared global scope will be refreshed
            for the current thread, any future threads, or, if in a web app, any future web requests.
            Note: Dispose of the object once the editing is completed to revert.
            </summary>
        </member>
        <member name="T:VC3.ComponentModel.SerializableBusinessObjectReference">
            <summary>
            A lightweight object that holds the type and id of a BusinessObject
            </summary>
        </member>
        <member name="M:VC3.ComponentModel.SerializableBusinessObjectReference.#ctor(VC3.ComponentModel.BusinessObject)">
            <summary>
            A lightweight object that holds the type and id of a BusinessObject 
            </summary>
            <param name="obj">The object to store the shallow reference to</param>
        </member>
        <member name="M:VC3.ComponentModel.SerializableBusinessObjectReference.GetRealObject(System.Runtime.Serialization.StreamingContext)">
            <summary>
            Calls GetInstance to retrieve the underlying BusinessObject
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="P:VC3.ComponentModel.SerializableBusinessObjectReference.Type">
            <summary>
            The type of the BusinessObject
            </summary>
        </member>
        <member name="P:VC3.ComponentModel.SerializableBusinessObjectReference.Id">
            <summary>
            The ID of the BusinessObject
            </summary>
        </member>
        <member name="T:VC3.ComponentModel.Slim`1">
            <summary>
            Gives explicit control over how much of a business object is serialized
            </summary>
            <typeparam name="T">Subclass of <see cref="T:VC3.ComponentModel.BusinessObject"/> to persist</typeparam>
        </member>
        <member name="M:VC3.ComponentModel.Slim`1.#ctor(System.String[])">
            <summary>
            Gives explicit control over how much of a business object is serialized
            </summary>
            <param name="properties">The list of properties on the BusinessObject to be serialized.  If a property is a BusinessObject itself, only its' id will be serliazed</param>
        </member>
        <member name="M:VC3.ComponentModel.Slim`1.#ctor(`0,System.String[])">
            <summary>
            Gives explicit control over how much of a business object is serialized
            </summary>
            <param name="obj">The initial value of the object property</param>
            <param name="properties">The list of properties on the BusinessObject to be serialized.  If a property is a BusinessObject itself, only its' id will be serliazed</param>
        </member>
        <member name="P:VC3.ComponentModel.Slim`1.Object">
            <summary>
            The underlying object
            </summary>
        </member>
        <member name="T:VC3.Security.Authorization.SecurityContextAttribute">
            <summary>
            Summary description for SecurityContextAttribute.
            </summary>
        </member>
        <member name="M:VC3.Security.Authorization.SecurityContextAttribute.GetContextProperties(System.Object)">
            <summary>
            Gets the context properties for the source object.
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="P:VC3.Security.Authorization.SecurityContextAttribute.Property">
            <summary>
            Gets or sets the property that is marked as a security context.
            </summary>
        </member>
        <member name="T:VC3.Data.DictionaryDataRecord">
            <summary>
            This class implements the IDataRecord interface by internally tracking a dictionary of string 
            column names to object values.  It also references a parent DictionaryDataReader, which provides
            an array of column names which can be used to map from ordinal to name and vice versa.
            </summary>
        </member>
        <member name="M:VC3.Data.DictionaryDataRecord.#ctor(VC3.Data.DictionaryDataReader,System.Object[])">
            <summary>
            Creates a new record with the given parent reader and array of values.
            </summary>
            <param name="reader">The DictionaryDataReader that provides schema information for the record.</param>
            <param name="values">The values for this record.</param>
        </member>
        <member name="M:VC3.Data.DictionaryDataRecord.GetValue``1(System.Int32)">
            <summary>
            Returns the value at the given index as type T.
            </summary>
            <typeparam name="T">The type of result to return.</typeparam>
            <param name="i">The index to retrieve.</param>
            <returns>The value at the given index as type T.</returns>
        </member>
        <member name="M:VC3.Data.DictionaryDataRecord.GetValue(System.Int32)">
            <summary>
            Returns the value at the given index.
            </summary>
            <param name="i">The index to retrieve.</param>
            <returns>The value at the given index.</returns>
        </member>
        <member name="M:VC3.Data.DictionaryDataRecord.GetFieldType(System.Int32)">
            <summary>
            Gets the type of the field at the given index.
            </summary>
            <param name="i">The index to retrieve.</param>
            <returns>The type of the field at the given index.</returns>
        </member>
        <member name="M:VC3.Data.DictionaryDataRecord.System#Data#IDataRecord#GetBoolean(System.Int32)">
            <summary>
            Gets the value of the specified column as a Boolean.
            </summary>
            <param name="i">The index of the field to find.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:VC3.Data.DictionaryDataRecord.System#Data#IDataRecord#GetByte(System.Int32)">
            <summary>
            Gets the 8-bit unsigned integer value of the specified column.
            </summary>
            <param name="i">The index of the field to find.</param>
            <returns>The 8-bit unsigned integer value of the specified column.</returns>
        </member>
        <member name="M:VC3.Data.DictionaryDataRecord.System#Data#IDataRecord#GetBytes(System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads a stream of bytes from the specified column offset into the buffer
            as an array, starting at the given buffer offset.
            </summary>
            <param name="i">The index of the field to find.</param>
            <param name="fieldOffset">The index within the field from which to start the read operation.</param>
            <param name="buffer">The buffer into which to read the stream of bytes.</param>
            <param name="bufferoffset">The index for buffer to start the read operation.</param>
            <param name="length">The number of bytes to read.</param>
            <returns>The actual number of bytes read.</returns>
        </member>
        <member name="M:VC3.Data.DictionaryDataRecord.System#Data#IDataRecord#GetChar(System.Int32)">
            <summary>
            Gets the character value of the specified column.
            </summary>
            <param name="i">The index of the field to find.</param>
            <returns>The character value of the specified column.</returns>
        </member>
        <member name="M:VC3.Data.DictionaryDataRecord.System#Data#IDataRecord#GetChars(System.Int32,System.Int64,System.Char[],System.Int32,System.Int32)">
            <summary>
            Reads a stream of characters from the specified column offset into the buffer
            as an array, starting at the given buffer offset.
            </summary>
            <param name="i">The index of the field to find.</param>
            <param name="fieldoffset">The index within the row from which to start the read operation.</param>
            <param name="buffer">The buffer into which to read the stream of bytes.</param>
            <param name="bufferoffset">The index for buffer to start the read operation.</param>
            <param name="length">The number of bytes to read.</param>
            <returns>The number of bytes to read.</returns>
        </member>
        <member name="M:VC3.Data.DictionaryDataRecord.System#Data#IDataRecord#GetData(System.Int32)">
            <summary>
            Returns an System.Data.IDataReader for the specified column ordinal.
            </summary>
            <param name="i">The zero-based index.</param>
            <returns>An System.Data.IDataReader.</returns>
        </member>
        <member name="M:VC3.Data.DictionaryDataRecord.System#Data#IDataRecord#GetDataTypeName(System.Int32)">
            <summary>
            Gets the data type information for the specified field.
            </summary>
            <param name="i">The index of the field to find.</param>
            <returns>The data type information for the specified field.</returns>
        </member>
        <member name="M:VC3.Data.DictionaryDataRecord.System#Data#IDataRecord#GetDateTime(System.Int32)">
            <summary>
            Gets the date and time data value of the specified field.
            </summary>
            <param name="i">The index of the field to find.</param>
            <returns>The date and time data value of the specified field.</returns>
        </member>
        <member name="M:VC3.Data.DictionaryDataRecord.System#Data#IDataRecord#GetDecimal(System.Int32)">
            <summary>
            Gets the fixed-position numeric value of the specified field.
            </summary>
            <param name="i">The index of the field to find.</param>
            <returns>The fixed-position numeric value of the specified field.</returns>
        </member>
        <member name="M:VC3.Data.DictionaryDataRecord.System#Data#IDataRecord#GetDouble(System.Int32)">
            <summary>
            Gets the double-precision floating point number of the specified field.
            </summary>
            <param name="i">The index of the field to find.</param>
            <returns>The double-precision floating point number of the specified field.</returns>
        </member>
        <member name="M:VC3.Data.DictionaryDataRecord.System#Data#IDataRecord#GetFieldType(System.Int32)">
            <summary>
            Gets the System.Type information corresponding to the type of System.Object
            that would be returned from System.Data.IDataRecord.GetValue(System.Int32).
            </summary>
            <param name="i">The index of the field to find.</param>
            <returns>
            The System.Type information corresponding to the type of System.Object
            that would be returned from System.Data.IDataRecord.GetValue(System.Int32).
            </returns>
        </member>
        <member name="M:VC3.Data.DictionaryDataRecord.System#Data#IDataRecord#GetFloat(System.Int32)">
            <summary>
            Gets the single-precision floating point number of the specified field.
            </summary>
            <param name="i">The index of the field to find.</param>
            <returns>The single-precision floating point number of the specified field.</returns>
        </member>
        <member name="M:VC3.Data.DictionaryDataRecord.System#Data#IDataRecord#GetGuid(System.Int32)">
            <summary>
            Returns the GUID value of the specified field.
            </summary>
            <param name="i">The index of the field to find.</param>
            <returns>The GUID value of the specified field.</returns>
        </member>
        <member name="M:VC3.Data.DictionaryDataRecord.System#Data#IDataRecord#GetInt16(System.Int32)">
            <summary>
            Gets the 16-bit signed integer value of the specified field.
            </summary>
            <param name="i">The index of the field to find.</param>
            <returns>The 16-bit signed integer value of the specified field.</returns>
        </member>
        <member name="M:VC3.Data.DictionaryDataRecord.System#Data#IDataRecord#GetInt32(System.Int32)">
            <summary>
            Gets the 32-bit signed integer value of the specified field.
            </summary>
            <param name="i">The index of the field to find.</param>
            <returns>The 32-bit signed integer value of the specified field.</returns>
        </member>
        <member name="M:VC3.Data.DictionaryDataRecord.System#Data#IDataRecord#GetInt64(System.Int32)">
            <summary>
            Gets the 64-bit signed integer value of the specified field.
            </summary>
            <param name="i">The index of the field to find.</param>
            <returns>The 64-bit signed integer value of the specified field.</returns>
        </member>
        <member name="M:VC3.Data.DictionaryDataRecord.System#Data#IDataRecord#GetName(System.Int32)">
            <summary>
            Gets the name for the field to find.
            </summary>
            <param name="i">The index of the field to find.</param>
            <returns>The name of the field or the empty string (""), if there is no value to return.</returns>
        </member>
        <member name="M:VC3.Data.DictionaryDataRecord.System#Data#IDataRecord#GetOrdinal(System.String)">
            <summary>
            Return the index of the named field.
            </summary>
            <param name="name">The name of the field to find.</param>
            <returns>The index of the named field.</returns>
        </member>
        <member name="M:VC3.Data.DictionaryDataRecord.System#Data#IDataRecord#GetString(System.Int32)">
            <summary>
            Gets the string value of the specified field.
            </summary>
            <param name="i">The index of the field to find.</param>
            <returns>The string value of the specified field.</returns>
        </member>
        <member name="M:VC3.Data.DictionaryDataRecord.System#Data#IDataRecord#GetValue(System.Int32)">
            <summary>
            Return the value of the specified field.
            </summary>
            <param name="i">The index of the field to find.</param>
            <returns>The System.Object which will contain the field value upon return.</returns>
        </member>
        <member name="M:VC3.Data.DictionaryDataRecord.System#Data#IDataRecord#GetValues(System.Object[])">
            <summary>
            Gets all the attribute fields in the collection for the current record.
            </summary>
            <param name="values">An array of System.Object to copy the attribute fields into.</param>
            <returns>The number of instances of System.Object in the array.</returns>
        </member>
        <member name="M:VC3.Data.DictionaryDataRecord.System#Data#IDataRecord#IsDBNull(System.Int32)">
            <summary>
            Return whether the specified field is set to null.
            </summary>
            <param name="i">The index of the field to find.</param>
            <returns>true if the specified field is set to null; otherwise, false.</returns>
        </member>
        <member name="P:VC3.Data.DictionaryDataRecord.System#Data#IDataRecord#FieldCount">
            <summary>
            Gets the number of columns in the current row.
            </summary>
        </member>
        <member name="P:VC3.Data.DictionaryDataRecord.System#Data#IDataRecord#Item(System.String)">
            <summary>
            Gets the column with the specified name.
            </summary>
            <param name="name">The name of the column to find.</param>
            <returns>The column with the specified name as an System.Object.</returns>
        </member>
        <member name="P:VC3.Data.DictionaryDataRecord.System#Data#IDataRecord#Item(System.Int32)">
            <summary>
            Gets the column located at the specified index.
            </summary>
            <param name="i">The index of the field to find.</param>
            <returns>The column located at the specified index as an System.Object.</returns>
        </member>
        <member name="T:VC3.Data.DictionaryDataReader">
            <summary>
            This class implements the IDataReader interface by internally tracking a list of DictionaryDataRecords.
            It also holds an array of column names which can be used to map from ordinal to name and vice versa.
            </summary>
        </member>
        <member name="M:VC3.Data.DictionaryDataReader.#ctor(System.String[])">
            <summary>
            Creates a new DictionaryDataReader with the given named columns.
            </summary>
            <param name="columns">An array of column names.</param>
        </member>
        <member name="M:VC3.Data.DictionaryDataReader.AddRecord(System.Object[])">
            <summary>
            Adds a new record with the given values.
            </summary>
            <param name="values">The new record's values.</param>
        </member>
        <member name="M:VC3.Data.DictionaryDataReader.GetColumnName(System.Int32)">
            <summary>
            Gets the column name at the given index.
            </summary>
            <param name="i">The index to retreive.</param>
            <returns>The column name at the given index.</returns>
        </member>
        <member name="M:VC3.Data.DictionaryDataReader.GetColumnName(System.Int32,System.Boolean)">
            <summary>
            Gets the column name at the given index.  If allowOutOfRange is true and the
            index is out of range the null will be returned.
            </summary>
            <param name="i">The index to retreive.</param>
            <param name="allowOutOfRange">Whether to allow an index that is out of range (and return null).</param>
            <returns>The column name at the given index, or null if allowOutOfRange is true and the index is out of range.</returns>
        </member>
        <member name="M:VC3.Data.DictionaryDataReader.GetValue``1(System.Int32)">
            <summary>
            Returns the current record's value at the given index as type T.
            </summary>
            <typeparam name="T">The type of result to return.</typeparam>
            <param name="i">The index to retrieve.</param>
            <returns>The current record's value at the given index as type T.</returns>
        </member>
        <member name="M:VC3.Data.DictionaryDataReader.GetValue(System.Int32)">
            <summary>
            Returns the current record's value at the given index.
            </summary>
            <param name="i">The index to retrieve.</param>
            <returns>The current record's value at the given index.</returns>
        </member>
        <member name="M:VC3.Data.DictionaryDataReader.GetFieldType(System.Int32)">
            <summary>
            Gets the type of the field at the given index.
            </summary>
            <param name="i">The index to retrieve.</param>
            <returns>The type of the field at the given index.</returns>
        </member>
        <member name="M:VC3.Data.DictionaryDataReader.GetOrdinal(System.String)">
            <summary>
            Gets the index of the "column" with the given name.
            </summary>
            <param name="name">The name of the "column".</param>
            <returns>The index of the "column" with the given name.</returns>
        </member>
        <member name="M:VC3.Data.DictionaryDataReader.System#Data#IDataReader#Close">
            <summary>
            Closes the System.Data.IDataReader Object.
            </summary>
        </member>
        <member name="M:VC3.Data.DictionaryDataReader.System#Data#IDataReader#GetSchemaTable">
            <summary>
            Returns a System.Data.DataTable that describes the column
            metadata of the System.Data.IDataReader.
            </summary>
            <returns>A System.Data.DataTable that describes the column metadata.</returns>
        </member>
        <member name="M:VC3.Data.DictionaryDataReader.System#Data#IDataReader#NextResult">
            <summary>
            Advances the data reader to the next result, when reading the
            results of batch SQL statements.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VC3.Data.DictionaryDataReader.System#Data#IDataReader#Read">
            <summary>
            Advances the System.Data.IDataReader to the next record.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VC3.Data.DictionaryDataReader.System#IDisposable#Dispose">
            <summary>
            Performs application-defined tasks associated with freeing,
            releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:VC3.Data.DictionaryDataReader.System#Data#IDataRecord#GetBoolean(System.Int32)">
            <summary>
            Gets the value of the specified column as a Boolean.
            </summary>
            <param name="i">The index of the field to find.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:VC3.Data.DictionaryDataReader.System#Data#IDataRecord#GetByte(System.Int32)">
            <summary>
            Gets the 8-bit unsigned integer value of the specified column.
            </summary>
            <param name="i">The index of the field to find.</param>
            <returns>The 8-bit unsigned integer value of the specified column.</returns>
        </member>
        <member name="M:VC3.Data.DictionaryDataReader.System#Data#IDataRecord#GetBytes(System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads a stream of bytes from the specified column offset into the buffer
            as an array, starting at the given buffer offset.
            </summary>
            <param name="i">The index of the field to find.</param>
            <param name="fieldOffset">The index within the field from which to start the read operation.</param>
            <param name="buffer">The buffer into which to read the stream of bytes.</param>
            <param name="bufferoffset">The index for buffer to start the read operation.</param>
            <param name="length">The number of bytes to read.</param>
            <returns>The actual number of bytes read.</returns>
        </member>
        <member name="M:VC3.Data.DictionaryDataReader.System#Data#IDataRecord#GetChar(System.Int32)">
            <summary>
            Gets the character value of the specified column.
            </summary>
            <param name="i">The index of the field to find.</param>
            <returns>The character value of the specified column.</returns>
        </member>
        <member name="M:VC3.Data.DictionaryDataReader.System#Data#IDataRecord#GetChars(System.Int32,System.Int64,System.Char[],System.Int32,System.Int32)">
            <summary>
            Reads a stream of characters from the specified column offset into the buffer
            as an array, starting at the given buffer offset.
            </summary>
            <param name="i">The index of the field to find.</param>
            <param name="fieldoffset">The index within the row from which to start the read operation.</param>
            <param name="buffer">The buffer into which to read the stream of bytes.</param>
            <param name="bufferoffset">The index for buffer to start the read operation.</param>
            <param name="length">The number of bytes to read.</param>
            <returns>The number of bytes to read.</returns>
        </member>
        <member name="M:VC3.Data.DictionaryDataReader.System#Data#IDataRecord#GetData(System.Int32)">
            <summary>
            Returns an System.Data.IDataReader for the specified column ordinal.
            </summary>
            <param name="i">The zero-based index.</param>
            <returns>An System.Data.IDataReader.</returns>
        </member>
        <member name="M:VC3.Data.DictionaryDataReader.System#Data#IDataRecord#GetDataTypeName(System.Int32)">
            <summary>
            Gets the data type information for the specified field.
            </summary>
            <param name="i">The index of the field to find.</param>
            <returns>The data type information for the specified field.</returns>
        </member>
        <member name="M:VC3.Data.DictionaryDataReader.System#Data#IDataRecord#GetDateTime(System.Int32)">
            <summary>
            Gets the date and time data value of the specified field.
            </summary>
            <param name="i">The index of the field to find.</param>
            <returns>The date and time data value of the specified field.</returns>
        </member>
        <member name="M:VC3.Data.DictionaryDataReader.System#Data#IDataRecord#GetDecimal(System.Int32)">
            <summary>
            Gets the fixed-position numeric value of the specified field.
            </summary>
            <param name="i">The index of the field to find.</param>
            <returns>The fixed-position numeric value of the specified field.</returns>
        </member>
        <member name="M:VC3.Data.DictionaryDataReader.System#Data#IDataRecord#GetDouble(System.Int32)">
            <summary>
            Gets the double-precision floating point number of the specified field.
            </summary>
            <param name="i">The index of the field to find.</param>
            <returns>The double-precision floating point number of the specified field.</returns>
        </member>
        <member name="M:VC3.Data.DictionaryDataReader.System#Data#IDataRecord#GetFieldType(System.Int32)">
            <summary>
            Gets the System.Type information corresponding to the type of System.Object
            that would be returned from System.Data.IDataRecord.GetValue(System.Int32).
            </summary>
            <param name="i">The index of the field to find.</param>
            <returns>
            The System.Type information corresponding to the type of System.Object
            that would be returned from System.Data.IDataRecord.GetValue(System.Int32).
            </returns>
        </member>
        <member name="M:VC3.Data.DictionaryDataReader.System#Data#IDataRecord#GetFloat(System.Int32)">
            <summary>
            Gets the single-precision floating point number of the specified field.
            </summary>
            <param name="i">The index of the field to find.</param>
            <returns>The single-precision floating point number of the specified field.</returns>
        </member>
        <member name="M:VC3.Data.DictionaryDataReader.System#Data#IDataRecord#GetGuid(System.Int32)">
            <summary>
            Returns the GUID value of the specified field.
            </summary>
            <param name="i">The index of the field to find.</param>
            <returns>The GUID value of the specified field.</returns>
        </member>
        <member name="M:VC3.Data.DictionaryDataReader.System#Data#IDataRecord#GetInt16(System.Int32)">
            <summary>
            Gets the 16-bit signed integer value of the specified field.
            </summary>
            <param name="i">The index of the field to find.</param>
            <returns>The 16-bit signed integer value of the specified field.</returns>
        </member>
        <member name="M:VC3.Data.DictionaryDataReader.System#Data#IDataRecord#GetInt32(System.Int32)">
            <summary>
            Gets the 32-bit signed integer value of the specified field.
            </summary>
            <param name="i">The index of the field to find.</param>
            <returns>The 32-bit signed integer value of the specified field.</returns>
        </member>
        <member name="M:VC3.Data.DictionaryDataReader.System#Data#IDataRecord#GetInt64(System.Int32)">
            <summary>
            Gets the 64-bit signed integer value of the specified field.
            </summary>
            <param name="i">The index of the field to find.</param>
            <returns>The 64-bit signed integer value of the specified field.</returns>
        </member>
        <member name="M:VC3.Data.DictionaryDataReader.System#Data#IDataRecord#GetName(System.Int32)">
            <summary>
            Gets the name for the field to find.
            </summary>
            <param name="i">The index of the field to find.</param>
            <returns>The name of the field or the empty string (""), if there is no value to return.</returns>
        </member>
        <member name="M:VC3.Data.DictionaryDataReader.System#Data#IDataRecord#GetOrdinal(System.String)">
            <summary>
            Return the index of the named field.
            </summary>
            <param name="name">The name of the field to find.</param>
            <returns>The index of the named field.</returns>
        </member>
        <member name="M:VC3.Data.DictionaryDataReader.System#Data#IDataRecord#GetString(System.Int32)">
            <summary>
            Gets the string value of the specified field.
            </summary>
            <param name="i">The index of the field to find.</param>
            <returns>The string value of the specified field.</returns>
        </member>
        <member name="M:VC3.Data.DictionaryDataReader.System#Data#IDataRecord#GetValue(System.Int32)">
            <summary>
            Return the value of the specified field.
            </summary>
            <param name="i">The index of the field to find.</param>
            <returns>The System.Object which will contain the field value upon return.</returns>
        </member>
        <member name="M:VC3.Data.DictionaryDataReader.System#Data#IDataRecord#GetValues(System.Object[])">
            <summary>
            Gets all the attribute fields in the collection for the current record.
            </summary>
            <param name="values">An array of System.Object to copy the attribute fields into.</param>
            <returns>The number of instances of System.Object in the array.</returns>
        </member>
        <member name="M:VC3.Data.DictionaryDataReader.System#Data#IDataRecord#IsDBNull(System.Int32)">
            <summary>
            Return whether the specified field is set to null.
            </summary>
            <param name="i">The index of the field to find.</param>
            <returns>true if the specified field is set to null; otherwise, false.</returns>
        </member>
        <member name="P:VC3.Data.DictionaryDataReader.Columns">
            <summary>
            Gets the array of column names.
            </summary>
        </member>
        <member name="P:VC3.Data.DictionaryDataReader.CurrentRecord">
            <summary>
            Gets the current record if reading has begun and has not read past all records.
            </summary>
        </member>
        <member name="P:VC3.Data.DictionaryDataReader.System#Data#IDataReader#Depth">
            <summary>
            Gets a value indicating the depth of nesting for the current row.
            </summary>
        </member>
        <member name="P:VC3.Data.DictionaryDataReader.System#Data#IDataReader#IsClosed">
            <summary>
            Gets a value indicating whether the data reader is closed.
            </summary>
        </member>
        <member name="P:VC3.Data.DictionaryDataReader.System#Data#IDataReader#RecordsAffected">
            <summary>
            Gets the number of rows changed, inserted, or deleted by execution of the SQL statement.
            </summary>
        </member>
        <member name="P:VC3.Data.DictionaryDataReader.System#Data#IDataRecord#FieldCount">
            <summary>
            Gets the number of columns in the current row.
            </summary>
        </member>
        <member name="P:VC3.Data.DictionaryDataReader.System#Data#IDataRecord#Item(System.String)">
            <summary>
            Gets the column with the specified name.
            </summary>
            <param name="name">The name of the column to find.</param>
            <returns>The column with the specified name as an System.Object.</returns>
        </member>
        <member name="P:VC3.Data.DictionaryDataReader.System#Data#IDataRecord#Item(System.Int32)">
            <summary>
            Gets the column located at the specified index.
            </summary>
            <param name="i">The index of the field to find.</param>
            <returns>The column located at the specified index as an System.Object.</returns>
        </member>
        <member name="T:VC3.ComponentModel.SystemPermissionAdapter">
            <summary>
            Allows any <see cref="T:System.Security.IPermission"/> to be treated as a <see cref="T:VC3.ComponentModel.Permission"/>
            </summary>
        </member>
        <member name="M:VC3.ComponentModel.SystemPermissionAdapter.IsUserAllowed(VC3.Security.Authentication.IUser)">
            <summary>
            True if the inner permission is allowed for the specified user.
            </summary>
            <param name="user"></param>
            <returns></returns>
        </member>
        <member name="P:VC3.ComponentModel.SystemPermissionAdapter.IsAllowed">
            <summary>
            True if the inner permission
            </summary>
        </member>
        <member name="P:VC3.ComponentModel.SystemPermissionAdapter.NoPermissionMessage">
            <summary>
            Returns the reason the IPermission is not allowed
            </summary>
        </member>
        <member name="T:VC3.ComponentModel.FeatureLicensePermission">
            <summary>
            Subclass of <see cref="T:VC3.ComponentModel.Permission"/> that provides FeatureLicense checks against
            <see cref="P:VC3.ComponentModel.License.Current"/>
            </summary>
        </member>
        <member name="M:VC3.ComponentModel.FeatureLicensePermission.#ctor(VC3.ComponentModel.FeatureLicense)">
            <summary>
            Creates a new <see cref="T:VC3.ComponentModel.Permission"/> based on a <see cref="T:VC3.ComponentModel.FeatureLicense"/>
            </summary>
            <param name="feature"></param>
        </member>
        <member name="M:VC3.ComponentModel.FeatureLicensePermission.#ctor(System.Guid)">
            <summary>
            Creates a new <see cref="T:VC3.ComponentModel.Permission"/> based on a Guid.
            </summary>
        </member>
        <member name="M:VC3.ComponentModel.FeatureLicensePermission.IsUserAllowed(VC3.Security.Authentication.IUser)">
            <summary>
            Indicates whether the specified <see cref="T:VC3.Security.Authentication.IUser"/> has access to this <see cref="T:VC3.ComponentModel.FeatureLicense"/>
            </summary>
        </member>
        <member name="M:VC3.ComponentModel.FeatureLicensePermission.Copy">
            <summary>
            Creates a copy of the current permission.
            </summary>
        </member>
        <member name="P:VC3.ComponentModel.FeatureLicensePermission.IsAllowed">
            <summary>
            Indicates whether the current <see cref="T:VC3.ComponentModel.License"/> has access to this <see cref="T:VC3.ComponentModel.FeatureLicense"/>
            </summary>
        </member>
        <member name="P:VC3.ComponentModel.FeatureLicensePermission.CanDefer">
            <summary>
            Indicates that the user interface should prevent the user from
            using a <see cref="T:VC3.ComponentModel.FeatureLicense"/>
            </summary>
        </member>
        <member name="P:VC3.ComponentModel.FeatureLicensePermission.NoPermissionMessage">
            <summary>
            Gets a standard message to display when the current <see cref="T:VC3.ComponentModel.License"/>
            does not have the required feature licensed.
            </summary>
        </member>
        <member name="T:VC3.ComponentModel.GrantPermission">
            <summary>
            Singleton realization of <see cref="T:VC3.ComponentModel.Permission"/> that represents
            a permission that has been granted.
            </summary>
        </member>
        <member name="M:VC3.ComponentModel.GrantPermission.IsUserAllowed(VC3.Security.Authentication.IUser)">
            <summary>
            Always return true to indicate that the permission has been granted.
            </summary>
            <param name="user"></param>
            <returns></returns>
        </member>
        <member name="M:VC3.ComponentModel.GrantPermission.Demand">
            <summary>
            Does nothing, because the user has sufficient permissions.
            </summary>
        </member>
        <member name="M:VC3.ComponentModel.GrantPermission.Copy">
            <summary>
            Creates a copy of the current permission.
            </summary>
        </member>
        <member name="P:VC3.ComponentModel.GrantPermission.IsAllowed">
            <summary>
            Always returns true to indicate that the permission has been granted.
            </summary>
        </member>
        <member name="P:VC3.ComponentModel.GrantPermission.CanDefer">
            <summary>
            Indicates that the user interface should prevent the user
            from attempting to perform the operation.
            </summary>
        </member>
        <member name="P:VC3.ComponentModel.GrantPermission.NoPermissionMessage">
            <summary>
            No message is required when permissions have been granted.
            </summary>
        </member>
        <member name="T:VC3.ComponentModel.DenyPermission">
            <summary>
            Subclass of <see cref="T:VC3.ComponentModel.Permission"/> that represents
            a permission that has been denied.
            </summary>
        </member>
        <member name="F:VC3.ComponentModel.DenyPermission.NotImplemented">
            <summary>
            A canned permission to deny access because something is not yet complete.
            </summary>
        </member>
        <member name="M:VC3.ComponentModel.DenyPermission.#ctor(System.String)">
            <summary>
            Creates a new <see cref="T:VC3.ComponentModel.DenyPermission"/> instance with the
            specified no permission message.
            </summary>
            <param name="message">The message to return for the <see cref="P:VC3.ComponentModel.DenyPermission.NoPermissionMessage"/> property</param>
        </member>
        <member name="M:VC3.ComponentModel.DenyPermission.#ctor(System.String,System.Object[])">
            <summary>
            Creates a new <see cref="T:VC3.ComponentModel.DenyPermission"/> instance with the
            specified no permission message.
            </summary>
            <param name="messageFormat">The message to return for the <see cref="P:VC3.ComponentModel.DenyPermission.NoPermissionMessage"/> property</param>
            <param name="messageArgs">Arguments used to format the message with string.Format</param>
        </member>
        <member name="M:VC3.ComponentModel.DenyPermission.IsUserAllowed(VC3.Security.Authentication.IUser)">
            <summary>
            Always returns false to indicate that the permission has been denied.
            </summary>
        </member>
        <member name="M:VC3.ComponentModel.DenyPermission.Copy">
            <summary>
            Creates a copy of the current permission.
            </summary>
        </member>
        <member name="P:VC3.ComponentModel.DenyPermission.IsAllowed">
            <summary>
            Always returns false to indicate that the permission has been denied.
            </summary>
        </member>
        <member name="P:VC3.ComponentModel.DenyPermission.CanDefer">
            <summary>
            Indicates that the user interface should prevent the user
            from attempting to perform the operation.
            </summary>
        </member>
        <member name="P:VC3.ComponentModel.DenyPermission.NoPermissionMessage">
            <summary>
            Gets the reason the permission has been denied.
            </summary>
        </member>
        <member name="M:VC3.ComponentModel.DeferredDenyPermission.#ctor(System.String)">
            <summary>
            Creates a new <see cref="T:VC3.ComponentModel.DeferredDenyPermission"/> instance with the
            specified no permission message.
            </summary>
            <param name="message">The message to return for the <see cref="P:VC3.ComponentModel.Permission.NoPermissionMessage"/> property</param>
        </member>
        <member name="M:VC3.ComponentModel.DeferredDenyPermission.#ctor(System.String,System.Object[])">
            <summary>
            Creates a new <see cref="T:VC3.ComponentModel.DeferredDenyPermission"/> instance with the
            specified no permission message.
            </summary>
            <param name="messageFormat">The message to return for the <see cref="P:VC3.ComponentModel.Permission.NoPermissionMessage"/> property</param>
            <param name="messageArgs">Arguments to pass to string.Format() to format the message</param>
        </member>
        <member name="P:VC3.ComponentModel.DeferredDenyPermission.CanDefer">
            <summary>
            Indicates that the user interface should ignore the fact that
            the user does not have sufficient permissions, and defer to the
            business layer to check the permissions.
            </summary>
        </member>
        <member name="T:VC3.ComponentModel.AndPermission">
            <summary>
            Represents the combination of two permissions.
            </summary>
        </member>
        <member name="M:VC3.ComponentModel.AndPermission.#ctor(VC3.ComponentModel.Permission,VC3.ComponentModel.Permission)">
            <summary>
            Creates a new <see cref="T:VC3.ComponentModel.AndPermission"/> based on the combination
            of the two specified permissions.
            </summary>
            <param name="first">The first permission to combine</param>
            <param name="second">The second permission to combine</param>
        </member>
        <member name="M:VC3.ComponentModel.AndPermission.IsUserAllowed(VC3.Security.Authentication.IUser)">
            <summary>
            Indicates whether the specified user has permission to
            perform one or more of the associated tasks.
            </summary>
        </member>
        <member name="M:VC3.ComponentModel.AndPermission.Demand">
            <summary>
            Throws an exception if the user does not have sufficient permissions.
            </summary>
        </member>
        <member name="M:VC3.ComponentModel.AndPermission.Copy">
            <summary>
            Creates a copy of the current permission.
            </summary>
        </member>
        <member name="P:VC3.ComponentModel.AndPermission.IsAllowed">
            <summary>
            Indicates whether the current user has permission to
            perform one or more of the associated tasks.
            </summary>
        </member>
        <member name="P:VC3.ComponentModel.AndPermission.CanDefer">
            <summary>
            Indicates whether the user interface may ignore the fact that
            the user does not have sufficient permissions, and defer to the
            business layer to check the permissions.
            </summary>
        </member>
        <member name="P:VC3.ComponentModel.AndPermission.NoPermissionMessage">
            <summary>
            Gets a standard message to display when a user
            does not have sufficient permissions.
            </summary>
        </member>
        <member name="T:VC3.ComponentModel.OrPermission">
            <summary>
            Represents the combination of two permissions.
            </summary>
        </member>
        <member name="M:VC3.ComponentModel.OrPermission.#ctor(VC3.ComponentModel.Permission,VC3.ComponentModel.Permission)">
            <summary>
            Creates a new <see cref="T:VC3.ComponentModel.AndPermission"/> based on the combination
            of the two specified permissions.
            </summary>
            <param name="first">The first permission to combine</param>
            <param name="second">The second permission to combine</param>
        </member>
        <member name="M:VC3.ComponentModel.OrPermission.IsUserAllowed(VC3.Security.Authentication.IUser)">
            <summary>
            Indicates whether the specified user has permission to
            perform one or more of the associated tasks.
            </summary>
        </member>
        <member name="M:VC3.ComponentModel.OrPermission.Demand">
            <summary>
            Throws an exception if the user does not have sufficient permissions.
            User have one or both permissions.
            </summary>
        </member>
        <member name="M:VC3.ComponentModel.OrPermission.Copy">
            <summary>
            Creates a copy of the current permission.
            </summary>
        </member>
        <member name="P:VC3.ComponentModel.OrPermission.IsAllowed">
            <summary>
            Indicates whether the current user has permission to
            perform one or more of the associated tasks.
            </summary>
        </member>
        <member name="P:VC3.ComponentModel.OrPermission.CanDefer">
            <summary>
            Indicates whether the user interface may ignore the fact that
            the user does not have sufficient permissions, and defer to the
            business layer to check the permissions.
            </summary>
        </member>
        <member name="P:VC3.ComponentModel.OrPermission.NoPermissionMessage">
            <summary>
            Gets a standard message to display when a user
            does not have sufficient permissions.
            </summary>
        </member>
        <member name="T:VC3.ComponentModel.IfPermission">
            <summary>
            Represents the selection of a particular permission based on a condition.
            </summary>
        </member>
        <member name="M:VC3.ComponentModel.IfPermission.#ctor(VC3.ComponentModel.IfPermission.Expression,VC3.ComponentModel.Permission,VC3.ComponentModel.Permission)">
            <summary>
            Creates a new <see cref="T:VC3.ComponentModel.IfPermission"/>.
            </summary>
            <param name="condition">The condition to evaluation for the permission check</param>
            <param name="whenTrue">The permission to delegate to when the condition is true</param>
            <param name="whenFalse">The permission to delegate to when the condition is false</param>
        </member>
        <member name="M:VC3.ComponentModel.IfPermission.IsUserAllowed(VC3.Security.Authentication.IUser)">
            <summary>
            Indicates whether the specified user has permission to
            perform one or more of the associated tasks.
            </summary>
        </member>
        <member name="M:VC3.ComponentModel.IfPermission.Demand">
            <summary>
            Throws an exception if the user does not have sufficient permissions.
            User have one or both permissions.
            </summary>
        </member>
        <member name="M:VC3.ComponentModel.IfPermission.Copy">
            <summary>
            Creates a copy of the current permission.
            </summary>
        </member>
        <member name="P:VC3.ComponentModel.IfPermission.IsAllowed">
            <summary>
            Indicates whether the current user has permission to
            perform one or more of the associated tasks.
            </summary>
        </member>
        <member name="P:VC3.ComponentModel.IfPermission.CanDefer">
            <summary>
            Indicates whether the user interface may ignore the fact that
            the user does not have sufficient permissions, and defer to the
            business layer to check the permissions.
            </summary>
        </member>
        <member name="P:VC3.ComponentModel.IfPermission.NoPermissionMessage">
            <summary>
            Gets a standard message to display when a user
            does not have sufficient permissions.
            </summary>
        </member>
        <member name="T:VC3.ComponentModel.GeneratedAttribute">
            <summary>
            Indicates that this member was generated by a tool and can 
            be safely re-generated again later.
            </summary>
        </member>
        <member name="P:VC3.ComponentModel.GeneratedAttribute.CommentPreservation">
            <summary>
            If true, the comments associated with this element will be kept when 
            this element is regenerated.
            </summary>
        </member>
        <member name="P:VC3.ComponentModel.GeneratedAttribute.KeepComments">
            <summary>
            If true, the comments associated with this element will be kept when 
            this element is regenerated.
            </summary>
        </member>
        <member name="P:VC3.ComponentModel.GeneratedAttribute.KeepAttributes">
            <summary>
            If true, the attributes associated with this element will be kept 
            this element is regenerated.
            </summary>
        </member>
        <member name="P:VC3.ComponentModel.GeneratedAttribute.KeepAccess">
            <summary>
            If true, the keepAccess declaration (public, private, etc.) associated with this element 
            will be kept when this element is regenerated. 
            Default: true
            </summary>
        </member>
        <member name="P:VC3.ComponentModel.GeneratedAttribute.OriginalName">
            <summary>
            Used to specify the original name of this element.  If
            an item exists by the name of this value in the intermediate results of the generation
            process, it will be renamed to the current name of the element.
            </summary>
        </member>
        <member name="T:VC3.Security.Authentication.IUser">
            <summary>
            Extends the functionality of <see cref="T:System.Security.Principal.IPrincipal"/> to
            expose context permissions for the current user.
            </summary>
        </member>
        <member name="P:VC3.Security.Authentication.IUser.Permissions">
            <summary>
            Gets the context permissions for the current user.
            </summary>
            <remarks>
            If it is not efficient to load all user context
            permissions with each request, this property should return
            a subclass of <seealso cref="T:VC3.Security.Authorization.ContextPermission"/> that
            performs the necessary checks in a more efficient way.
            </remarks>
        </member>
        <member name="T:VC3.ComponentModel.RegistrationBehavior">
            <summary>
            Used to control the behavior of <see cref="M:VC3.ComponentModel.IScheme.Register(VC3.ComponentModel.BusinessObject,VC3.ComponentModel.RegistrationBehavior)"/>.
            </summary>
        </member>
        <member name="F:VC3.ComponentModel.RegistrationBehavior.KeepExisting">
            <summary>
            Only add the instance to the pool if it does not already exist
            </summary>
        </member>
        <member name="F:VC3.ComponentModel.RegistrationBehavior.OverwriteExisting">
            <summary>
            Replace the instance in the pool if it already exists
            </summary>
        </member>
        <member name="F:VC3.ComponentModel.RegistrationBehavior.ThrowOnDuplicate">
            <summary>
            Throw an exception if the instance already exists in the pool
            </summary>
        </member>
        <member name="T:VC3.ComponentModel.IScheme">
            <summary>
            Interface for creating and managing BusinessObjects.
            The implementation of this interface cannot be provided by 
            a <see cref="T:VC3.ComponentModel.BusinessObject"/> class due to it being
            responsible for the creation of new instances.
            </summary>
        </member>
        <member name="M:VC3.ComponentModel.IScheme.CreateInstance(System.Type)">
            <summary>
            Gets the <see cref="T:VC3.ComponentModel.BusinessObject"/> instance represented by the
            specified <see cref="T:VC3.ComponentModel.BusinessObject.Identifier"/>.
            </summary>
            <param name="objectType">Type of object to create. The type must be managed by this scheme.</param>
            <returns>
            A new instance
            </returns>
        </member>
        <member name="M:VC3.ComponentModel.IScheme.GetInstance(VC3.ComponentModel.BusinessObject.Identifier)">
            <summary>
            Gets the <see cref="T:VC3.ComponentModel.BusinessObject"/> instance represented by the
            specified <see cref="T:VC3.ComponentModel.BusinessObject.Identifier"/>.
            </summary>
            <param name="id">The <see cref="T:VC3.ComponentModel.BusinessObject.Identifier"/> to retrieve the instance for</param>
            <returns>
            The corresponding <see cref="T:VC3.ComponentModel.BusinessObject"/> instance or a new
            instance if id is null.
            </returns>
        </member>
        <member name="M:VC3.ComponentModel.IScheme.GetInstance(System.Type,System.Data.IDataRecord,VC3.ComponentModel.LoadingHint)">
            <summary>
            Gets the <see cref="T:VC3.ComponentModel.BusinessObject"/> instance represented by the
            data contained in the specified <see cref="T:System.Data.IDataRecord"/>.
            </summary>
            <param name="objectType">The type of the instance that should be returned.  Must
            be a type handled by this scheme.</param>
            <param name="data">The <see cref="T:System.Data.IDataRecord"/> to retrieve the instance for</param>
            <param name="hint">Optional loading hint to affect how the object receives its data</param>
            <returns>The corresponding <see cref="T:VC3.ComponentModel.BusinessObject"/> instance.  The instance
            will be of type <paramref name="objectType"/> (or a subclass of it).</returns>
        </member>
        <member name="M:VC3.ComponentModel.IScheme.Load(VC3.ComponentModel.BusinessObject,VC3.ComponentModel.LoadingHint)">
            <summary>
            Forces the loading of a <see cref="T:VC3.ComponentModel.BusinessObject"/> instance.
            </summary>
            <remarks>
            The specified object will be forced to load. Also, as an optimization,
            other uninitialized objects of the same type may be loaded.
            </remarks>
            <param name="obj">The <see cref="T:VC3.ComponentModel.BusinessObject"/> to load</param>
        </member>
        <member name="M:VC3.ComponentModel.IScheme.Register(VC3.ComponentModel.BusinessObject,VC3.ComponentModel.RegistrationBehavior)">
            <summary>
            Must be called when an object is bound to an <see cref="T:VC3.ComponentModel.BusinessObject.Identifier"/>.
            This method will place the object in the current <see cref="T:VC3.ComponentModel.IPool"/> and,
            if the object is uninitialized, register it with the <see cref="T:VC3.ComponentModel.ILoader"/>.
            </summary>
            <param name="obj">The <see cref="T:VC3.ComponentModel.BusinessObject"/> to register</param>
            <param name="behavior">The behavior that should be used to duplicate registrations</param>
        </member>
        <member name="M:VC3.ComponentModel.IScheme.GetIdentifier(System.Type,System.Object[])">
            <summary>
            Gets an <see cref="T:VC3.ComponentModel.BusinessObject.Identifier"/> based on the id values in an object array.
            </summary>
            <param name="objectType">Type refered to by the ID</param>
            <param name="id">An array of <see cref="T:System.Object"/> id values</param>
            <returns>The <see cref="T:VC3.ComponentModel.BusinessObject.Identifier"/> based of the id values</returns>
        </member>
        <member name="M:VC3.ComponentModel.IScheme.GetIdentifier(System.Type,System.String)">
            <summary>
            Gets an <see cref="T:VC3.ComponentModel.BusinessObject.Identifier"/> based on the id string.
            </summary>
            <param name="objectType">Type refered to by the ID</param>
            <param name="id">An <see cref="T:System.String"/> id</param>
            <returns>The <see cref="T:VC3.ComponentModel.BusinessObject.Identifier"/> based of the id</returns>
        </member>
        <member name="M:VC3.ComponentModel.IScheme.GetIdentifier(VC3.ComponentModel.BusinessObject)">
            <summary>
            Gets an <see cref="T:VC3.ComponentModel.BusinessObject.Identifier"/> for the specified <see cref="T:VC3.ComponentModel.BusinessObject"/>
            based on the values of the properties marked as identifiers using
            the <see cref="T:VC3.ComponentModel.BusinessObject.IdAttribute"/>.
            </summary>
            <param name="instance">A <see cref="T:VC3.ComponentModel.BusinessObject"/> instance</param>
            <returns>The <see cref="T:VC3.ComponentModel.BusinessObject.Identifier"/> based of the instance</returns>
        </member>
        <member name="M:VC3.ComponentModel.IScheme.GetIdentifier(System.Type,System.Data.IDataRecord)">
            <summary>
            Gets an <see cref="T:VC3.ComponentModel.BusinessObject.Identifier"/> for the specified <see cref="T:VC3.ComponentModel.BusinessObject"/>
            based on the values of the properties marked as identifiers using
            the <see cref="T:VC3.ComponentModel.BusinessObject.IdAttribute"/>.
            </summary>
            <param name="objectType">Type refered to by the ID</param>
            <param name="data">An <see cref="T:System.Data.IDataRecord"/> containing the identifier data</param>
            <returns>The <see cref="T:VC3.ComponentModel.BusinessObject.Identifier"/> based of the data record</returns>
        </member>
        <member name="P:VC3.ComponentModel.IScheme.IdLength">
            <summary>
            Length of the <see cref="P:VC3.ComponentModel.BusinessObject.Identifier.Values"/> array
            of all identifiers created by this scheme.
            </summary>
        </member>
        <member name="P:VC3.ComponentModel.IScheme.Scope">
            <summary>
            Gets the scope used by this scheme and the <see cref="T:VC3.ComponentModel.BusinessObject"/>s that
            it is managing.
            </summary>
        </member>
        <member name="T:VC3.ComponentModel.Scheme">
            <summary>
            A modular implementation of IScheme.  Delegates most functionality 
            to a <see cref="T:VC3.ComponentModel.IFactory"/>, <see cref="T:VC3.ComponentModel.ILoader"/>,
            and <see cref="T:VC3.ComponentModel.IPool"/>.
            </summary>
        </member>
        <member name="F:VC3.ComponentModel.Scheme.appSchemes">
            <summary>
            Application-wide scheme cache
            </summary>
        </member>
        <member name="F:VC3.ComponentModel.Scheme.threadSchemes">
            <summary>
            Thread-scoped scheme cache that override the appSchemes
            </summary>
        </member>
        <member name="F:VC3.ComponentModel.Scheme.attributeOverrides">
            <summary>
            Thread-scoped attribute overrides
            </summary>
        </member>
        <member name="M:VC3.ComponentModel.Scheme.#ctor(VC3.ComponentModel.IFactory,VC3.ComponentModel.ILoader,VC3.ComponentModel.IPool,VC3.ComponentModel.SecurityAdapter,VC3.ComponentModel.IScope)">
            <summary>
            Creates a new scheme based on the specified components.
            </summary>
            <param name="factory">Factory to use for creating id's and objects</param>
            <param name="loader">Loader used for on-demand loading of <see cref="T:VC3.ComponentModel.BusinessObject"/>s</param>
            <param name="pool">Pool used to track running <see cref="T:VC3.ComponentModel.BusinessObject"/>s</param>
        </member>
        <member name="M:VC3.ComponentModel.Scheme.GetScheme(System.Type)">
            <summary>
            Gets the <see cref="T:VC3.ComponentModel.IScheme"/> for the specified <see cref="T:System.Type"/>.
            </summary>
            <remarks>
            GetScheme will always return the same scheme for a given type however
            a single scheme may manage multiple types.
            </remarks>
            <param name="type">The type of <see cref="T:VC3.ComponentModel.BusinessObject"/> to get the scheme of</param>
            <returns>An <see cref="T:VC3.ComponentModel.IScheme"/></returns>
        </member>
        <member name="M:VC3.ComponentModel.Scheme.CreateInstance(System.Type)">
            <summary>
            Gets the <see cref="T:VC3.ComponentModel.BusinessObject"/> instance represented by the
            specified <see cref="T:VC3.ComponentModel.BusinessObject.Identifier"/>.
            </summary>
            <param name="objectType">Type of object to create. The type must be managed by this scheme.</param>
            <returns>
            A new instance
            </returns>
        </member>
        <member name="M:VC3.ComponentModel.Scheme.GetInstance(VC3.ComponentModel.BusinessObject.Identifier)">
            <summary>
            Gets the <see cref="T:VC3.ComponentModel.BusinessObject"/> instance represented by the
            specified <see cref="T:VC3.ComponentModel.BusinessObject.Identifier"/>.
            </summary>
            <param name="id">The <see cref="T:VC3.ComponentModel.BusinessObject.Identifier"/> to retrieve the instance for</param>
            <returns>
            The corresponding <see cref="T:VC3.ComponentModel.BusinessObject"/> instance
            </returns>
        </member>
        <member name="M:VC3.ComponentModel.Scheme.GetInstance(System.Type,System.Data.IDataRecord,VC3.ComponentModel.LoadingHint)">
            <summary>
            Gets the <see cref="T:VC3.ComponentModel.BusinessObject"/> instance represented by the
            data contained in the specified <see cref="T:System.Data.IDataRecord"/>.
            
            Partial data may be returned in some cases if InheritanceScheme
            is being used and only data say for the base class is being
            returned (specified by the loading hint).
            
            Assumes caller has acquired the appropriate loading lock.
            </summary>
            <param name="objectType">The type of the instance that should be returned.  Must
            be a type handled by this scheme.</param>
            <param name="data">The <see cref="T:System.Data.IDataRecord"/> to retrieve the instance for</param>
            <param name="hint">Optional loading hint to affect how the object receives its data</param>
            <returns>The corresponding <see cref="T:VC3.ComponentModel.BusinessObject"/> instance.  The instance
            will be of type <paramref name="objectType"/> (or a subclass of it).</returns>
        </member>
        <member name="M:VC3.ComponentModel.Scheme.Load(VC3.ComponentModel.BusinessObject,VC3.ComponentModel.LoadingHint)">
            <summary>
            Forces the loading of a <see cref="T:VC3.ComponentModel.BusinessObject"/> instance.
            
            Assumes caller has acquired the appropriate loading lock.
            </summary>
            <remarks>
            The specified object will be forced to load. Also, as an optimization,
            other uninitialized objects of the same type may be loaded.
            </remarks>
            <param name="obj">The <see cref="T:VC3.ComponentModel.BusinessObject"/> to load</param>
        </member>
        <member name="M:VC3.ComponentModel.Scheme.Load(VC3.ComponentModel.BusinessObject,System.Data.IDataRecord)">
            <summary>
            Forces the loading of a <see cref="T:VC3.ComponentModel.BusinessObject"/> instance.
            
            Assumes caller has acquired the appropriate loading lock.
            </summary>
            <remarks>
            The specified object will be loaded with the specified data.
            </remarks>
            <param name="obj">The <see cref="T:VC3.ComponentModel.BusinessObject"/> to load</param>
            <param name="data">The data to load into the object</param>
        </member>
        <member name="M:VC3.ComponentModel.Scheme.Register(VC3.ComponentModel.BusinessObject,VC3.ComponentModel.RegistrationBehavior)">
            <summary>
            Must be called when an object is bound to an <see cref="T:VC3.ComponentModel.BusinessObject.Identifier"/>.
            This method will place the object in the current <see cref="T:VC3.ComponentModel.IPool"/> and,
            if the object is uninitialized, register it with the <see cref="T:VC3.ComponentModel.ILoader"/>.
            </summary>
            <param name="obj">The <see cref="T:VC3.ComponentModel.BusinessObject"/> to register</param>
        </member>
        <member name="M:VC3.ComponentModel.Scheme.GetIdentifier(System.Type,System.Object[])">
            <summary>
            Gets an <see cref="T:VC3.ComponentModel.BusinessObject.Identifier"/> based on the id values in an object array.
            </summary>
            <param name="objectType">The type of object the identifier refers to</param>
            <param name="id">An array of <see cref="T:System.Object"/> id values</param>
            <returns>
            The <see cref="T:VC3.ComponentModel.BusinessObject.Identifier"/> based of the id values or null
            if the id represents a null identifier
            </returns>
        </member>
        <member name="M:VC3.ComponentModel.Scheme.GetIdentifier(System.Type,System.String)">
            <summary>
            Gets an <see cref="T:VC3.ComponentModel.BusinessObject.Identifier"/> based on the id string.
            </summary>
            <param name="objectType">The type of object the identifier refers to</param>
            <param name="id">An <see cref="T:System.String"/> id</param>
            <returns>
            The <see cref="T:VC3.ComponentModel.BusinessObject.Identifier"/> based of the id or
            null if id == DataConverter.StringNull</returns>
        </member>
        <member name="M:VC3.ComponentModel.Scheme.GetIdentifier(VC3.ComponentModel.BusinessObject)">
            <summary>
            Gets an <see cref="T:VC3.ComponentModel.BusinessObject.Identifier"/> for the specified <see cref="T:VC3.ComponentModel.BusinessObject"/>
            based on the values of the properties marked as identifiers using
            the <see cref="T:VC3.ComponentModel.BusinessObject.IdAttribute"/>.
            </summary>
            <param name="instance">A <see cref="T:VC3.ComponentModel.BusinessObject"/> instance</param>
            <returns>The <see cref="T:VC3.ComponentModel.BusinessObject.Identifier"/> based of the instance</returns>
        </member>
        <member name="M:VC3.ComponentModel.Scheme.GetIdentifier(System.Type,System.Data.IDataRecord)">
            <summary>
            Gets an <see cref="T:VC3.ComponentModel.BusinessObject.Identifier"/> for the specified <see cref="T:VC3.ComponentModel.BusinessObject"/>
            based on the values of the properties marked as identifiers using
            the <see cref="T:VC3.ComponentModel.BusinessObject.IdAttribute"/>.
            </summary>
            <param name="objectType">The type of object the identifier refers to</param>
            <param name="data">An <see cref="T:System.Data.IDataRecord"/> containing the identifier data</param>
            <returns>The <see cref="T:VC3.ComponentModel.BusinessObject.Identifier"/> based of the data record</returns>
        </member>
        <member name="M:VC3.ComponentModel.Scheme.OverrideAttributes(System.Type,System.Attribute[])">
            <summary>
            Changes the scheme used for a given type.  Change 
            applies only to the current thread.
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:VC3.ComponentModel.Scheme.GetCustomAttributes(System.Type,System.Type,System.Boolean)">
            <summary>
            Gets the custom attributes for the specified type.  Takes
            into account any attributes that may have been overriden
            using the <see cref="M:VC3.ComponentModel.Scheme.OverrideAttributes(System.Type,System.Attribute[])"/> method.
            </summary>
        </member>
        <member name="P:VC3.ComponentModel.Scheme.IdLength">
            <summary>
            Length of the <see cref="P:VC3.ComponentModel.BusinessObject.Identifier.Values"/> array
            of all identifiers created by this scheme.
            </summary>
        </member>
        <member name="T:VC3.ComponentModel.IScope">
            <summary>
            Used to specify the lifetime and visibility of a 
            set of objects.  Objects added to an <see cref="T:VC3.ComponentModel.IScope"/>
            instance are isolated to that scope.
            </summary>
        </member>
        <member name="P:VC3.ComponentModel.IScope.Item(System.Object)">
            <summary>
            Used to access a named value from the scope.
            Set to null to remove the item from this scope
            </summary>
        </member>
        <member name="P:VC3.ComponentModel.IScope.Locker">
            <summary>
            Used to synchronize access to objects within the scope
            </summary>
        </member>
        <member name="T:VC3.ComponentModel.ScopeBase">
            <summary>
            Base class to simplify scope implementations
            </summary>
        </member>
        <member name="T:VC3.ComponentModel.ResetableScope`1">
            <summary>
            A type of <see cref="T:VC3.ComponentModel.IScope"/> that will gracefully
            reset its state. When <see cref="M:VC3.ComponentModel.ResetableScope`1.ResetAll"/> is called, all instances
            of this scope will be reset to their original state for all future threads
            or web requests.  All current threads or web requests however will be unaffected
            except for the thread that called <see cref="M:VC3.ComponentModel.ResetableScope`1.ResetAll"/>.
            </summary>
        </member>
        <member name="M:VC3.ComponentModel.ResetableScope`1.ResetAll">
            <summary>
            Resets all scope instances of this type. All instances
            of this scope will be reset to their original state for all future threads
            or web requests.  All current threads or web requests however will be unaffected
            except for the thread that called <see cref="M:VC3.ComponentModel.ResetableScope`1.ResetAll"/>.
            </summary>
        </member>
        <member name="T:VC3.ComponentModel.ThreadScope">
            <summary>
            Used to scope objects to a single, logical thread.  If there is a web request
            executing, then <see cref="T:System.Web.HttpContext"/> is used for storage and the scope
            will be reset at the end of the web request.
            </summary>
        </member>
        <member name="T:VC3.ComponentModel.GlobalScope">
            <summary>
            Used to scope objects to an a scope that is shared across threads.
            Objects in this scope change infrequently and can only be edited
            when a <see cref="T:VC3.ComponentModel.EditGlobalScopeIntention"/> is in effect.
            </summary>
        </member>
        <member name="F:VC3.ComponentModel.GlobalScope.GlobalLocker">
            <summary>
            Use a shared lock for GlobalScope and ReadOnlyScope
            </summary>
        </member>
        <member name="T:VC3.ComponentModel.ReadOnlyScope">
            <summary>
            Used to scope objects to an a scope that is shared across threads.  Objects
            in this scope cannot be edited. Ever.
            </summary>
        </member>
        <member name="T:VC3.ComponentModel.LoadingHint">
            <summary>
            Provides hints to object loaders in order to optimize the loading process.
            </summary>
        </member>
        <member name="F:VC3.ComponentModel.LoadingHint.SingularLoading">
            <summary>
            <see cref="P:VC3.ComponentModel.LoadingHint.MaxBatchSize"/> = 1 and assumes that all types will
            be loadable.
            </summary>
        </member>
        <member name="F:VC3.ComponentModel.LoadingHint.Defaults">
            <summary>
            Don't use any special hints.  Use default batch size and assumes
            that all types will be loadable.
            </summary>
        </member>
        <member name="F:VC3.ComponentModel.LoadingHint.maxBatchSize">
            <summary>
            0 means defaults will be used
            </summary>
        </member>
        <member name="M:VC3.ComponentModel.LoadingHint.#ctor(System.Int32)">
            <summary>
            Suggests that loading should be optimized by reading ahead in
            batches of up to <paramref name="maxBatchSize"/>.  Assumes that all
            types will have full data available and are loadable.
            </summary>
            <param name="maxBatchSize">Maximum size of read-ahead batch</param>
        </member>
        <member name="M:VC3.ComponentModel.LoadingHint.#ctor(System.Type[])">
            <summary>
            Assumes that full data is available only for a specific set of types.  In this mode, the
            database can return the id, and typeid if InheritanceScheme is being used,
            of all objects but <see cref="M:VC3.ComponentModel.BusinessObject.OnInit(System.Data.IDataRecord)"/> will only be called for objects of 
            the type specified.  Data for list associations must also include the parent object's id.
            This allows full initialization to be deferred and delegated to type-specific stored
            procedures using "item loading".
            </summary>
            <param name="initableTypes">The list of types that the loader will assume have full
            data and can be initialized.  If no types are specified, no objects will be initialized.</param>
        </member>
        <member name="P:VC3.ComponentModel.LoadingHint.MaxBatchSize">
            <summary>
            Maximum number of items to load when doing batched loading.
            0 means that the default value will be used.
            </summary>
        </member>
        <member name="P:VC3.ComponentModel.LoadingHint.LoadableTypes">
            <summary>
            The list of types that can be loaded
            </summary>
        </member>
        <member name="T:VC3.ComponentModel.ILoader">
            <summary>
            Interface for classes responsible for on-demand loading of 
            unitialized <see cref="T:VC3.ComponentModel.BusinessObject"/> objects.
            </summary>
        </member>
        <member name="M:VC3.ComponentModel.ILoader.SetScope(VC3.ComponentModel.IScope)">
            <summary>
            Sets the scope of the loader.  The loader
            should store all BusinessObjects it is tracking
            in the scope to ensure that objects can be properly
            accessed and destroyed.
            </summary>
            <param name="scope"></param>
        </member>
        <member name="M:VC3.ComponentModel.ILoader.Load(VC3.ComponentModel.BusinessObject,VC3.ComponentModel.LoadingHint)">
            <summary>
            Loads the specified <see cref="T:VC3.ComponentModel.BusinessObject"/>.
            </summary>
            <remarks>
            Classes that implement this interface must at least load
            the specified object but may load other objects as well
            as an optimization.
            </remarks>
            <param name="obj">Object to load</param>
        </member>
        <member name="M:VC3.ComponentModel.ILoader.Load(VC3.ComponentModel.BusinessObject,System.Data.IDataRecord)">
            <summary>
            Loads the specified object and any other objects with the same id already registered.
            </summary>
            <param name="obj">Object to load</param>
            <param name="data">Data to load into the object</param>
        </member>
        <member name="M:VC3.ComponentModel.ILoader.Register(VC3.ComponentModel.BusinessObject)">
            <summary>
            Used to notify the loader that the specified object
            has not yet been loaded but is a candidate for being loaded.
            The object may be loaded now or later.
            </summary>
            <param name="obj">The loadable <see cref="T:VC3.ComponentModel.BusinessObject"/>.</param>
        </member>
        <member name="T:VC3.ComponentModel.BatchedLoader">
            <summary>
            Responsible for on-demand batch loading of unintialized <see cref="T:VC3.ComponentModel.BusinessObject"/>
            objects.  Provides read-ahead optimization to load all uninitialized objects
            registered with the loader when the first one calls <see cref="M:VC3.ComponentModel.BatchedLoader.Load(VC3.ComponentModel.BusinessObject,VC3.ComponentModel.LoadingHint)"/>.
            </summary>
        </member>
        <member name="F:VC3.ComponentModel.BatchedLoader.MultiRegInitialCapacity">
            <summary>
            The number of items with the same Id that are expected
            to be registered at the same time.  Making this smaller
            will save some memory but as soon as the number of items
            registered at the same id gets larger than this, there will
            be a hit for the list to resize itself.
            </summary>
        </member>
        <member name="M:VC3.ComponentModel.BatchedLoader.Register(VC3.ComponentModel.BusinessObject)">
            <summary>
            Registers a business object with the loader to enable on-demand batch loading.
            </summary>
            <param name="obj">The business object to register.</param>
        </member>
        <member name="M:VC3.ComponentModel.BatchedLoader.Load(VC3.ComponentModel.BusinessObject,System.Data.IDataRecord)">
            <summary>
            Loads the specified object and any other objects with the same id already registered.
            </summary>
            <param name="obj">Object to load</param>
            <param name="data">Data to load into the object</param>
        </member>
        <member name="M:VC3.ComponentModel.BatchedLoader.Load(VC3.ComponentModel.BusinessObject,VC3.ComponentModel.LoadingHint)">
            <summary>
            Forces all objects being tracked by this loader to initialize.
            </summary>
            <param name="obj">The object requesting to be loaded. Must have
            been passed to <see cref="M:VC3.ComponentModel.BatchedLoader.Register(VC3.ComponentModel.BusinessObject)"/> earlier.</param>
        </member>
        <member name="T:VC3.ComponentModel.TypePartitionedLoader">
            <summary>
            A loader that partitions objects based on their
            runtime <see cref="T:System.Type"/>.  Works in conjuction
            with other loaders (one per type).  The
            inner loaders are created based on <see cref="T:VC3.ComponentModel.LoaderAttribute"/> 
            attribute(s).
            </summary>
        </member>
        <member name="M:VC3.ComponentModel.TypePartitionedLoader.#ctor">
            <summary>
            Creates a new MultiTypeLoader
            </summary>
        </member>
        <member name="M:VC3.ComponentModel.TypePartitionedLoader.SetScope(VC3.ComponentModel.IScope)">
            <summary>
            Not implemented
            </summary>
            <param name="scope">N/A</param>
        </member>
        <member name="M:VC3.ComponentModel.TypePartitionedLoader.Load(VC3.ComponentModel.BusinessObject,VC3.ComponentModel.LoadingHint)">
            <summary>
            Loads the specified <see cref="T:VC3.ComponentModel.BusinessObject"/>.
            </summary>
            <remarks>
            Classes that implement this interface must at least load
            the specified object but may load other objects as well
            as an optimization.
            </remarks>
            <param name="obj">Object to load</param>
        </member>
        <member name="M:VC3.ComponentModel.TypePartitionedLoader.Load(VC3.ComponentModel.BusinessObject,System.Data.IDataRecord)">
            <summary>
            Loads the specified object and any other objects with the same id already registered.
            </summary>
            <param name="obj">Object to load</param>
            <param name="data">Data to load into the object</param>
        </member>
        <member name="M:VC3.ComponentModel.TypePartitionedLoader.Register(VC3.ComponentModel.BusinessObject)">
            <summary>
            Used to notify the loader that the specified object
            has not yet been loaded but is a candidate for being loaded.
            The object may be loaded now or later.
            </summary>
            <param name="obj">The loadable <see cref="T:VC3.ComponentModel.BusinessObject"/>.</param>
        </member>
        <member name="T:VC3.ComponentModel.IPool">
            <summary>
            Responsible for tracking a set of <see cref="T:VC3.ComponentModel.BusinessObject"/> instances
            </summary>
        </member>
        <member name="M:VC3.ComponentModel.IPool.SetScope(VC3.ComponentModel.IScope)">
            <summary>
            Sets the scope of the pool.  The pool
            should store all BusinessObjects it is tracking
            in the scope to ensure that all objects can be properly
            accessed and destroyed.
            </summary>
            <param name="scope"></param>
        </member>
        <member name="M:VC3.ComponentModel.IPool.Get(VC3.ComponentModel.BusinessObject.Identifier)">
            <summary>
            Gets a <see cref="T:VC3.ComponentModel.BusinessObject"/> based on
            an <see cref="T:VC3.ComponentModel.BusinessObject.Identifier"/>.
            </summary>
            <param name="id">Identifys the object to create</param>
            <returns>Returns the object with the specified Id, or null if the
            object was not found</returns>
        </member>
        <member name="M:VC3.ComponentModel.IPool.Add(VC3.ComponentModel.BusinessObject)">
            <summary>
            Adds an object to the pool
            </summary>
            <param name="obj">The object to add to the pool</param>
        </member>
        <member name="M:VC3.ComponentModel.IPool.Remove(VC3.ComponentModel.BusinessObject.Identifier)">
            <summary>
            Removes a <see cref="T:VC3.ComponentModel.BusinessObject"/> from the pool
            </summary>
            <param name="id">The identity of the object to remove from the pool</param>
        </member>
        <member name="T:VC3.ComponentModel.BasicPool">
            <summary>
            A simple <see cref="T:VC3.ComponentModel.IPool"/> implementation
            </summary>
        </member>
        <member name="M:VC3.ComponentModel.BasicPool.SetScope(VC3.ComponentModel.IScope)">
            <summary>
            Sets the scope of the loader.  The loader
            should store all BusinessObjects it is tracking
            in the scope to ensure that all objects can be properly
            accessed and destroyed.
            </summary>
            <param name="scope"></param>
        </member>
        <member name="T:VC3.ComponentModel.TypeInferredFactory">
            <summary>
            Implementation of IFactory that supports type inference.  This
            class works in conjunction with other <see cref="T:VC3.ComponentModel.IFactory"/> objects,
            one per type, and a <see cref="T:VC3.ComponentModel.ITypeInferer"/>. The inner factories
            are created based on <see cref="T:VC3.ComponentModel.FactoryAttribute"/> attribute(s).
            
            To customize how types are defined, 
            create a subclass of <see cref="T:VC3.ComponentModel.ITypeInferer"/> or use
            a <see cref="T:VC3.ComponentModel.ReflectionTypeInferer"/> in conjuction
            with <see cref="T:VC3.ComponentModel.TypeIdAttribute"/> attributes.
            </summary>
        </member>
        <member name="M:VC3.ComponentModel.TypeInferredFactory.#ctor(System.Type,VC3.ComponentModel.ITypeInferer)">
            <summary>
            Creates a new factory.
            </summary>
            <param name="inferer">Used to determine the type of business object
            based on its data</param>
        </member>
        <member name="M:VC3.ComponentModel.TypeInferredFactory.CreateBusinessObject(System.Type)">
            <summary>
            Creates a <see cref="T:VC3.ComponentModel.BusinessObject"/> of the specified type.
            The object returned will be new (<see cref="P:VC3.ComponentModel.BusinessObject.IsNew"/> = true).
            </summary>
            <param name="objectType">The type of object to create. Must be a type handled by this factory.</param>
            <returns>
            A new <see cref="T:VC3.ComponentModel.BusinessObject"/> with <see cref="P:VC3.ComponentModel.BusinessObject.IsNew"/> = true.
            </returns>
        </member>
        <member name="M:VC3.ComponentModel.TypeInferredFactory.CreateBusinessObject(VC3.ComponentModel.BusinessObject.Identifier)">
            <summary>
            Creates a business object from the specified identifier
            </summary>
            <param name="id">Identity of the object to create</param>
            <returns>A new BusinessObject</returns>
        </member>
        <member name="M:VC3.ComponentModel.TypeInferredFactory.CreateIdentifier(System.Type,System.Data.IDataRecord)">
            <summary>
            Infers the object type based on the data and then creates a new identifier that
            holds an object id as well as type info about the object.
            </summary>
            <param name="data">Data used to infer the object type and create the identifier</param>
            <returns>A new identifier</returns>
        </member>
        <member name="M:VC3.ComponentModel.TypeInferredFactory.CreateIdentifier(VC3.ComponentModel.BusinessObject)">
            <summary>
            Creates an identifier from the specified instance
            </summary>
            <param name="instance">Object to create an identifier for</param>
            <returns>A new identifier</returns>
        </member>
        <member name="M:VC3.ComponentModel.TypeInferredFactory.CreateIdentifier(System.Type,System.Object[])">
            <summary>
            Creates an identifier from an array of values that includes
            id and type information.
            </summary>
            <para>
            The array should be in the form: { idValue+ [, typeId] }
            Where idValue should be the untyped id values and typeId is an optional
            type id.  If a typeId is included, it will be used to infer the objectType
            to use.  If a typeId is not included and objectType has no sub classes then
            the factory doesn't need to use typeId but will instead simply use the objectType.
            If the type cannot be identified a <see cref="T:VC3.ComponentModel.TypedIdentifier"/> that is
            <see cref="P:VC3.ComponentModel.TypedIdentifier.IsAbstract"/> is returned.  This id can still be used to comparisons
            with other ids however passing it into CreateBusinessObject will result in an exception.
            </para>
            <returns>A new identifier</returns>
        </member>
        <member name="M:VC3.ComponentModel.TypeInferredFactory.CreateIdentifier(System.Type,System.String)">
            <summary>
            Creates an id based on a string that has id and type information
            </summary>
            <param name="id">Id string that was created from an identifier
            returned by this factory via <see cref="M:VC3.ComponentModel.BusinessObject.ToIdString"/></param>
            <returns>A new identifier</returns>
        </member>
        <member name="M:VC3.ComponentModel.TypeInferredFactory.GetFactoryForType(System.Type)">
            <summary>
            Gets a type-specific factory
            </summary>
            <param name="objectType">Type that the factory should handle</param>
            <returns>A factory that can handle the specifed Type</returns>
        </member>
        <member name="P:VC3.ComponentModel.TypeInferredFactory.IdLength">
            <summary>
            Length of the <see cref="P:VC3.ComponentModel.BusinessObject.Identifier.Values"/> array
            of all identifiers created by this scheme.
            </summary>
        </member>
        <member name="T:VC3.ComponentModel.ReflectionTypeInferer">
            <summary>
            Infers type info based on <see cref="T:VC3.ComponentModel.TypeIdAttribute"/>
            attributes.
            </summary>
        </member>
        <member name="T:VC3.ComponentModel.ITypeInferer">
            <summary>
            Interface that is used by a <see cref="T:VC3.ComponentModel.TypeInferredFactory"/>
            to determine the type of a <see cref="T:VC3.ComponentModel.BusinessObject"/> based on 
            its data.
            </summary>
        </member>
        <member name="M:VC3.ComponentModel.ITypeInferer.GetTypeId(System.Data.IDataRecord,System.Boolean)">
            <summary>
            Gets a type id from a data record that can be
            used by <see cref="M:VC3.ComponentModel.ITypeInferer.GetType(System.String,System.Boolean)"/>.
            </summary>
            <param name="data">Record to read type id from</param>
            <param name="throwOnNull">Determines whether to throw 
            an exception if no type id is found</param>
            <returns>A typeId that can be used to get a <see cref="T:System.Type"/>
            using GetType()</returns>
        </member>
        <member name="M:VC3.ComponentModel.ITypeInferer.GetTypeId(System.Type,System.Boolean)">
            <summary>
            Gets a type id for a <see cref="T:System.Type"/>
            </summary>
            <param name="type">Type to determine the type id for</param>
            <param name="throwOnNull">Determines whether to throw 
            an exception if no type id is found</param>
            <returns>A typeId that can be used to get a <see cref="T:System.Type"/>
            using GetType()</returns>
        </member>
        <member name="M:VC3.ComponentModel.ITypeInferer.GetTypeId(VC3.ComponentModel.BusinessObject.Identifier,System.Type,System.Boolean)">
            <summary>
            Gets a type id based on the instance. Used to determine
            the type of an object before it is instantiated.
            </summary>
            <param name="instanceId">The id of the instance to determine the type id for</param>
            <param name="instanceType">The type of the instance. Most be assignable to the root type.</param>
            <param name="throwOnNull">Determines whether to throw 
            an exception if no type id is found</param>
            <returns>A typeId that can be used to get a <see cref="T:System.Type"/>
            using GetType()</returns>
        </member>
        <member name="M:VC3.ComponentModel.ITypeInferer.GetType(System.String,System.Boolean)">
            <summary>
            Gets a <see cref="T:System.Type"/> based on a type id that was previously
            returned by GetTypeId.
            </summary>
            <param name="typeId">Used to determine a Type</param>
            <param name="throwOnNull">Determines whether to throw 
            an exception if no type id is found</param>
            <returns>The Type that corresponds to the type id</returns>
        </member>
        <member name="M:VC3.ComponentModel.ReflectionTypeInferer.#ctor(System.Type)">
            <summary>
            Creates a TypeInferer that will infer a <see cref="T:System.Type"/>
            for the specified rootType and all sub types.
            </summary>
        </member>
        <member name="M:VC3.ComponentModel.ReflectionTypeInferer.CurrentDomain_AssemblyLoad(System.Object,System.AssemblyLoadEventArgs)">
            <summary>
            Process assemblies that are loaded after this attribute has been constructed
            </summary>
        </member>
        <member name="M:VC3.ComponentModel.ReflectionTypeInferer.ProcessAssembly(System.Reflection.Assembly)">
            <summary>
            Locates sub types defined in the specified assembly
            and adds them to the type mapping tables.
            </summary>
            <param name="a">Assembly to search for subtypes</param>
        </member>
        <member name="M:VC3.ComponentModel.ReflectionTypeInferer.GetTypeId(System.Data.IDataRecord,System.Boolean)">
            <summary>
            Gets a type id from a data record that can be
            used by <see cref="M:VC3.ComponentModel.ReflectionTypeInferer.GetType(System.String,System.Boolean)"/>.
            </summary>
            <param name="data">Record to read type id from</param>
            <param name="throwOnNull">Determines whether to throw 
            an exception if no type id is found</param>
            <returns>A typeId that can be used to get a <see cref="T:System.Type"/>
            using GetType()</returns>
        </member>
        <member name="M:VC3.ComponentModel.ReflectionTypeInferer.GetTypeId(System.Type,System.Boolean)">
            <summary>
            Gets a type id for a <see cref="T:System.Type"/>
            </summary>
            <param name="type">Type to determine the type id for</param>
            <param name="throwOnNull">Determines whether to throw 
            an exception if no type id is found</param>
            <returns>A typeId that can be used to get a <see cref="T:System.Type"/>
            using GetType()</returns>
        </member>
        <member name="M:VC3.ComponentModel.ReflectionTypeInferer.GetTypeId(VC3.ComponentModel.BusinessObject.Identifier,System.Type,System.Boolean)">
            <summary>
            Gets a type id based on the instance. Used to determine
            the type of an object before it is instantiated.
            </summary>
            <param name="instanceId">The id of the instance to determine the type id for</param>
            <param name="throwOnNull">Determines whether to throw 
            an exception if no type id is found</param>
            <returns>A typeId that can be used to get a <see cref="T:System.Type"/>
            using GetType()</returns>
        </member>
        <member name="M:VC3.ComponentModel.ReflectionTypeInferer.GetType(System.String,System.Boolean)">
            <summary>
            Gets a <see cref="T:System.Type"/> based on a type id that was previously
            returned by GetTypeId.
            </summary>
            <param name="typeId">Used to determine a Type. Case insensitive.</param>
            <param name="throwOnNull">Determines whether to throw 
            an exception if no type id is found</param>
            <returns>The Type that corresponds to the type id</returns>
        </member>
        <member name="M:VC3.ComponentModel.ReflectionTypeInferer.OnDiscoverInstanceTypeId(VC3.ComponentModel.BusinessObject.Identifier)">
            <summary>
            Called when a typeId for an instanceId needs to be discovered. Override
            in subclasses to discover type ids more efficiently. Base implementation
            attempts to leverage <see cref="T:VC3.ComponentModel.TypeIdAttribute"/> and calls 
            <see cref="M:VC3.ComponentModel.BusinessObject.GetData(VC3.ComponentModel.BusinessObject.IdentifierList)"/> to determine the actual typeId.
            </summary>
        </member>
        <member name="M:VC3.ComponentModel.ReflectionTypeInferer.IsLeafType(System.Type)">
            <summary>
            True if specified <see cref="T:System.Type"/> is not subclasses by by another <see cref="T:System.Type"/>
            in the current inheritance scheme.
            </summary>
        </member>
        <member name="T:VC3.ComponentModel.SimpleFactory">
            <summary>
            Responsible for creating instances of <see cref="T:VC3.ComponentModel.BusinessObject"/> 
            that use a <see cref="T:VC3.ComponentModel.SimpleIdentifier"/> as their identity.
            </summary>
        </member>
        <member name="M:VC3.ComponentModel.SimpleFactory.#ctor(System.Type)">
            <summary>
            Creates a new factory that can be used to create <see cref="T:VC3.ComponentModel.SimpleIdentifier"/>s
            for objects that have only a single-valued id.
            </summary>
            <param name="objectType">The type of objects this factory should create</param>
        </member>
        <member name="M:VC3.ComponentModel.SimpleFactory.CreateBusinessObject(System.Type)">
            <summary>
            Creates a <see cref="T:VC3.ComponentModel.BusinessObject"/> of the specified type.
            The object returned will be new (<see cref="P:VC3.ComponentModel.BusinessObject.IsNew"/> = true).
            </summary>
            <param name="objectType">The type of object to create. Must be a type handled by this factory.</param>
            <returns>
            A new <see cref="T:VC3.ComponentModel.BusinessObject"/> with <see cref="P:VC3.ComponentModel.BusinessObject.IsNew"/> = true.
            </returns>
        </member>
        <member name="M:VC3.ComponentModel.SimpleFactory.CreateBusinessObject(VC3.ComponentModel.BusinessObject.Identifier)">
            <summary>
            Creates a <see cref="T:VC3.ComponentModel.BusinessObject"/> based on
            an <see cref="T:VC3.ComponentModel.BusinessObject.Identifier"/>.
            </summary>
            <param name="id">Identifies the object to create</param>
            <returns>
            A new <see cref="T:VC3.ComponentModel.BusinessObject"/> with the specified id
            or an anonymous object if id is null.
            </returns>
        </member>
        <member name="M:VC3.ComponentModel.SimpleFactory.CreateIdentifier(System.Type,System.Data.IDataRecord)">
            <summary>
            Gets an <see cref="T:VC3.ComponentModel.BusinessObject.Identifier"/> for the specified <see cref="T:VC3.ComponentModel.BusinessObject"/>
            based on the values of the properties marked as identifiers using
            the <see cref="T:VC3.ComponentModel.BusinessObject.IdAttribute"/>.
            </summary>
            <param name="data">An <see cref="T:System.Data.IDataRecord"/> containing the identifier data</param>
            <returns>The <see cref="T:VC3.ComponentModel.BusinessObject.Identifier"/> based of the data record</returns>
        </member>
        <member name="M:VC3.ComponentModel.SimpleFactory.CreateIdentifier(VC3.ComponentModel.BusinessObject)">
            <summary>
            Gets an <see cref="T:VC3.ComponentModel.BusinessObject.Identifier"/> for the specified <see cref="T:VC3.ComponentModel.BusinessObject"/>.
            </summary>
            <param name="instance">A <see cref="T:VC3.ComponentModel.BusinessObject"/> instance</param>
            <returns>The <see cref="T:VC3.ComponentModel.BusinessObject.Identifier"/> based of the instance</returns>
        </member>
        <member name="M:VC3.ComponentModel.SimpleFactory.CreateIdentifier(System.Type,System.Object[])">
            <summary>
            Gets an <see cref="T:VC3.ComponentModel.BusinessObject.Identifier"/> based on the id values in an object array.
            </summary>
            <param name="id">An array of <see cref="T:System.Object"/> id values</param>
            <returns>The <see cref="T:VC3.ComponentModel.BusinessObject.Identifier"/> based of the id values</returns>
        </member>
        <member name="M:VC3.ComponentModel.SimpleFactory.CreateIdentifier(System.Type,System.String)">
            <summary>
            Gets an <see cref="T:VC3.ComponentModel.BusinessObject.Identifier"/> based on the id string.
            </summary>
            <param name="id">An <see cref="T:System.String"/> id</param>
            <returns>The <see cref="T:VC3.ComponentModel.BusinessObject.Identifier"/> based of the id</returns>
        </member>
        <member name="P:VC3.ComponentModel.SimpleFactory.IdLength">
            <summary>
            Length of the <see cref="P:VC3.ComponentModel.BusinessObject.Identifier.Values"/> array
            of all identifiers created by this scheme.
            </summary>
        </member>
        <member name="T:VC3.ComponentModel.ComplexFactory">
            <summary>
            Responsible for creating instances of <see cref="T:VC3.ComponentModel.BusinessObject"/> that use 
            a <see cref="T:VC3.ComponentModel.ComplexIdentifier"/> as their identity.
            </summary>
        </member>
        <member name="M:VC3.ComponentModel.ComplexFactory.#ctor(System.Type)">
            <summary>
            Creates a new factory that can be used to create <see cref="T:VC3.ComponentModel.SimpleIdentifier"/>s
            for objects that have only a single-valued id.
            </summary>
            <param name="objectType">The type of objects this factory should create</param>
        </member>
        <member name="M:VC3.ComponentModel.ComplexFactory.CreateBusinessObject(System.Type)">
            <summary>
            Creates a <see cref="T:VC3.ComponentModel.BusinessObject"/> of the specified type.
            The object returned will be new (<see cref="P:VC3.ComponentModel.BusinessObject.IsNew"/> = true).
            </summary>
            <param name="objectType">The type of object to create. Must be a type handled by this factory.</param>
            <returns>
            A new <see cref="T:VC3.ComponentModel.BusinessObject"/> with <see cref="P:VC3.ComponentModel.BusinessObject.IsNew"/> = true.
            </returns>
        </member>
        <member name="M:VC3.ComponentModel.ComplexFactory.CreateBusinessObject(VC3.ComponentModel.BusinessObject.Identifier)">
            <summary>
            Creates a <see cref="T:VC3.ComponentModel.BusinessObject"/> based on
            an <see cref="T:VC3.ComponentModel.BusinessObject.Identifier"/>.
            </summary>
            <param name="id">Identifies the object to create</param>
            <returns>
            A new <see cref="T:VC3.ComponentModel.BusinessObject"/> with the specified id
            or an anonymous object if id is null.
            </returns>
        </member>
        <member name="M:VC3.ComponentModel.ComplexFactory.CreateIdentifier(System.Type,System.Data.IDataRecord)">
            <summary>
            Gets an <see cref="T:VC3.ComponentModel.BusinessObject.Identifier"/> for the specified <see cref="T:VC3.ComponentModel.BusinessObject"/>
            based on the values of the properties marked as identifiers using
            the <see cref="T:VC3.ComponentModel.BusinessObject.IdAttribute"/>.
            </summary>
            <param name="data">An <see cref="T:System.Data.IDataRecord"/> containing the identifier data</param>
            <returns>The <see cref="T:VC3.ComponentModel.BusinessObject.Identifier"/> based of the data record</returns>
        </member>
        <member name="M:VC3.ComponentModel.ComplexFactory.CreateIdentifier(VC3.ComponentModel.BusinessObject)">
            <summary>
            Gets an <see cref="T:VC3.ComponentModel.BusinessObject.Identifier"/> for the specified <see cref="T:VC3.ComponentModel.BusinessObject"/>.
            </summary>
            <param name="instance">A <see cref="T:VC3.ComponentModel.BusinessObject"/> instance</param>
            <returns>The <see cref="T:VC3.ComponentModel.BusinessObject.Identifier"/> based of the instance</returns>
        </member>
        <member name="M:VC3.ComponentModel.ComplexFactory.CreateIdentifier(System.Type,System.Object[])">
            <summary>
            Gets an <see cref="T:VC3.ComponentModel.BusinessObject.Identifier"/> based on the id values in an object array.
            </summary>
            <param name="id">An array of <see cref="T:System.Object"/> id values</param>
            <returns>The <see cref="T:VC3.ComponentModel.BusinessObject.Identifier"/> based of the id values</returns>
        </member>
        <member name="M:VC3.ComponentModel.ComplexFactory.CreateIdentifier(System.Type,System.String)">
            <summary>
            Gets an <see cref="T:VC3.ComponentModel.BusinessObject.Identifier"/> based on the id string.
            </summary>
            <param name="id">An <see cref="T:System.String"/> id</param>
            <returns>The <see cref="T:VC3.ComponentModel.BusinessObject.Identifier"/> based of the id</returns>
        </member>
        <member name="M:VC3.ComponentModel.ComplexFactory.GetConstructorArgs(VC3.ComponentModel.BusinessObject.Identifier)">
            <summary>
            Recursively determines the parameters for objects that have
            complex keys, possibly including other <see cref="T:VC3.ComponentModel.BusinessObject"/> instances.
            </summary>
            <param name="id">The id to build the constructor args from</param>
            <returns>Arguments that can be passed to the constructor</returns>
        </member>
        <member name="M:VC3.ComponentModel.ComplexFactory.CompileKeys(VC3.ComponentModel.BusinessObject.IdAttribute[],System.Collections.ArrayList)">
            <summary>
            Recursively builds a list of string key names based on a
            hierarchy of id attributes.
            </summary>
        </member>
        <member name="M:VC3.ComponentModel.ComplexFactory.CompileValues(VC3.ComponentModel.BusinessObject.IdAttribute[],System.String[],System.Object[],System.Int32)">
            <summary>
            Recursively converts string values into object identifiers.
            </summary>
        </member>
        <member name="M:VC3.ComponentModel.ComplexFactory.CompileInstance(VC3.ComponentModel.BusinessObject,VC3.ComponentModel.BusinessObject.IdAttribute[],System.Collections.ArrayList)">
            <summary>
            Recursively retrieves the base type id values
            for a <see cref="T:VC3.ComponentModel.BusinessObject"/> instance.
            </summary>
        </member>
        <member name="M:VC3.ComponentModel.ComplexFactory.CompileData(System.Data.IDataRecord,VC3.ComponentModel.BusinessObject.IdAttribute[],System.Collections.ArrayList)">
            <summary>
            Recursively retrieves the base type id values
            from an <see cref="T:System.Data.IDataRecord"/> instance.
            </summary>
        </member>
        <member name="M:VC3.ComponentModel.ComplexFactory.CalcIdLength(VC3.ComponentModel.BusinessObject.IdAttribute[])">
            <summary>
            Calculates the value of the IdLength property
            </summary>
        </member>
        <member name="P:VC3.ComponentModel.ComplexFactory.IdLength">
            <summary>
            Length of the <see cref="P:VC3.ComponentModel.BusinessObject.Identifier.Values"/> array
            of all identifiers created by this scheme.
            </summary>
        </member>
        <member name="T:VC3.ComponentModel.FactoryMethod`1">
            <summary>
            Creates or acquires a <typeparamref name="T"/>.
            </summary>
        </member>
        <member name="T:VC3.ComponentModel.FactoryMethod`2">
            <summary>
            Creates or acquires a <typeparamref name="T"/> based on a single parameter
            </summary>
        </member>
        <member name="T:VC3.ComponentModel.TypeIdAttribute">
            <summary>
            This attribute can be used in two ways:
            
            1) When applied to a property, this attribute indicates that the
            value of the property will used to determine the <see cref="T:System.Type"/>
            of object to create when loading data.
            
            2) When applied to a class, this value specified in the constructor will
            be compared to the value of the property in (1).  If no value is specified,
            then it is treated as a default case which is useful for mapping a type
            in a "wildcard" fashion.  If multiple classes use wildcards the most specific class
            will win.  This enables for some framework classes to be customized per application
            by subclassing and adding a TypeId() attribute.
            </summary>
        </member>
        <member name="T:VC3.ComponentModel.SchemeAttribute">
            <summary>
            Abstract base class for scheme attributes.
            This attribute can be subclassed to custimize
            which scheme is used for a class.
            </summary>
        </member>
        <member name="M:VC3.ComponentModel.SchemeAttribute.CreateInstance(System.Type)">
            <summary>
            Creates an <see cref="T:VC3.ComponentModel.IScheme"/> for the specified
            type of <see cref="T:VC3.ComponentModel.BusinessObject"/>
            </summary>
            <param name="objectType">Type of <see cref="T:VC3.ComponentModel.BusinessObject"/></param>
            <returns>Scheme for the objectType</returns>
        </member>
        <member name="M:VC3.ComponentModel.SchemeAttribute.GetScheme(System.Type)">
            <summary>
            Gets a scheme that can be used for the specified objectType
            </summary>
            <param name="objectType">Type to get the scheme for</param>
            <returns>A scheme</returns>
        </member>
        <member name="T:VC3.ComponentModel.InheritanceSchemeAttribute">
            <summary>
            Creates an <see cref="T:VC3.ComponentModel.IScheme"/> that manages a family of <see cref="T:VC3.ComponentModel.BusinessObject"/> classes, 
            related by inheritance. When applied to a class, that class (the root class) and all derived 
            classes are managed by a single <see cref="T:VC3.ComponentModel.IScheme"/>. Each class in the family can be configured 
            independently using <see cref="T:VC3.ComponentModel.FactoryAttribute"/>, <see cref="T:VC3.ComponentModel.LoaderAttribute"/>, and 
            <see cref="T:VC3.ComponentModel.ScopeAttribute"/> attributes however only the <see cref="T:VC3.ComponentModel.PoolAttribute"/>
            applied to the root class or its subclasses will be used.
            </summary>
            <remarks>
            
            <para>
            You should use this attribute to enable inheritance in your <see cref="T:VC3.ComponentModel.BusinessObject"/> 
            classes.  To support inheritance, you must specify how types are infered from data by
            implementing a <see cref="P:VC3.ComponentModel.InheritanceSchemeAttribute.TypeInferer"/>.
            </para>
            
            <para>
            The family of classes managed by this scheme must meet the following requirements:
            -All concrete classes must have the same id structure
            -All objects must have a unique identity throughout the entire family
            </para>
            </remarks>
        </member>
        <member name="M:VC3.ComponentModel.InheritanceSchemeAttribute.#ctor">
            <summary>
            Creates a new attribute that will use a <see cref="T:VC3.ComponentModel.ReflectionTypeInferer"/>
            for type inference.  Use <see cref="T:VC3.ComponentModel.TypeIdAttribute"/> attributes to configure
            the inferencing.
            </summary>
        </member>
        <member name="M:VC3.ComponentModel.InheritanceSchemeAttribute.CreateInstance(System.Type)">
            <summary>
            Creates a new scheme if <paramref name="objectType"/> declared
            the attribute, otherwise locates the scheme of the objectType's
            base class and uses it.
            </summary>
            <param name="objectType">Type of BusinessObject to get the scheme of</param>
            <returns>The scheme of the objectType</returns>
        </member>
        <member name="P:VC3.ComponentModel.InheritanceSchemeAttribute.TypeInferer">
            <summary>
            Gets or sets the class that that implements <see cref="T:VC3.ComponentModel.ITypeInferer"/>
            that should be used to handle type mapping.
            </summary>
        </member>
        <member name="T:VC3.ComponentModel.FactoryAttribute">
            <summary>
            Used to specify which <see cref="T:VC3.ComponentModel.IFactory"/> implementation 
            should be used by the <see cref="T:VC3.ComponentModel.IScheme"/> of the class this
            attribute is applied to.
            </summary>
        </member>
        <member name="M:VC3.ComponentModel.FactoryAttribute.#ctor(System.Type)">
            <summary>
            Creates a new attribute
            </summary>
            <param name="factoryType">The class that implements <see cref="T:VC3.ComponentModel.IFactory"/></param>
        </member>
        <member name="M:VC3.ComponentModel.FactoryAttribute.#ctor">
            <summary>
            Forces the attribute to discover the type of factory
            based on IdAttributes.
            </summary>
        </member>
        <member name="M:VC3.ComponentModel.FactoryAttribute.CreateInstance(System.Type)">
            <summary>
            Creates an IFactory.  Can be overridden in subclasses to control
            which factory is created.  If factoryType is null, the factory will
            be determined based on IdAttributes found on objectType
            </summary>
            <param name="objectType"></param>
            <returns></returns>
        </member>
        <member name="M:VC3.ComponentModel.FactoryAttribute.GetFactory(System.Type)">
            <summary>
            Creates an <see cref="T:VC3.ComponentModel.IFactory"/> for the specified objectType.
            </summary>
            <param name="objectType">Type of <see cref="T:VC3.ComponentModel.BusinessObject"/></param>
            <returns>A new IFactory</returns>
        </member>
        <member name="T:VC3.ComponentModel.PoolAttribute">
            <summary>
            Used to specify which <see cref="T:VC3.ComponentModel.IPool"/> implementation 
            should be used by the <see cref="T:VC3.ComponentModel.IScheme"/> of the class this
            attribute is applied to.
            </summary>
        </member>
        <member name="M:VC3.ComponentModel.PoolAttribute.#ctor(System.Type)">
            <summary>
            Creates a new attribute
            </summary>
            <param name="poolType">The class that implements <see cref="T:VC3.ComponentModel.IPool"/></param>
        </member>
        <member name="M:VC3.ComponentModel.PoolAttribute.#ctor">
            <summary>
            Can be called by subclasses when they will determine
            the type of pool dynamically
            </summary>
        </member>
        <member name="M:VC3.ComponentModel.PoolAttribute.CreateInstance(System.Type)">
            <summary>
            Creates an IPool.  Can be overridden in subclasses to control
            which pool is created.
            </summary>
            <param name="objectType"></param>
            <returns></returns>
        </member>
        <member name="M:VC3.ComponentModel.PoolAttribute.GetPool(System.Type)">
            <summary>
            Creates an <see cref="T:VC3.ComponentModel.IPool"/> for the specified objectType.
            </summary>
            <param name="objectType">Type of <see cref="T:VC3.ComponentModel.BusinessObject"/></param>
            <returns>A new IPool</returns>
        </member>
        <member name="T:VC3.ComponentModel.LoaderAttribute">
            <summary>
            Used to specify which <see cref="T:VC3.ComponentModel.ILoader"/> implementation 
            should be used by the <see cref="T:VC3.ComponentModel.IScheme"/> of the class this
            attribute is applied to.
            </summary>
        </member>
        <member name="M:VC3.ComponentModel.LoaderAttribute.#ctor(System.Type)">
            <summary>
            Creates a new attribute
            </summary>
            <param name="loaderType">The class that implements <see cref="T:VC3.ComponentModel.ILoader"/></param>
        </member>
        <member name="M:VC3.ComponentModel.LoaderAttribute.#ctor">
            <summary>
            Can be called by subclasses when they will determine
            the type of loader dynamically
            </summary>
        </member>
        <member name="M:VC3.ComponentModel.LoaderAttribute.CreateInstance(System.Type)">
            <summary>
            Creates an ILoader.  Can be overridden in subclasses to control
            which loader is created.
            </summary>
            <param name="objectType"></param>
            <returns></returns>
        </member>
        <member name="M:VC3.ComponentModel.LoaderAttribute.GetLoader(System.Type)">
            <summary>
            Creates an <see cref="T:VC3.ComponentModel.ILoader"/> for the specified objectType.
            </summary>
            <param name="objectType">Type of <see cref="T:VC3.ComponentModel.BusinessObject"/></param>
            <returns>A new ILoader</returns>
        </member>
        <member name="T:VC3.ComponentModel.GlobalScopeAttribute">
            <summary>
            Sets the scope of a business object so that instances
            are scoped to application.  Should only be used
            for objects that change rarely during the life of an
            app domain.  Classes with this attribute must written
            to handle multi-threaded access to them.
            When objects in the scope are edited, they must be temporarily placed
            into ThreadScope by using a <see cref="T:VC3.ComponentModel.EditGlobalScopeIntention"/>.
            </summary>
        </member>
        <member name="T:VC3.ComponentModel.ScopeAttribute">
            <summary>
            Used to specify which <see cref="T:VC3.ComponentModel.IScope"/> should be used
            by the <see cref="T:VC3.ComponentModel.IScheme"/> to track objects.
            Should be used by the <see cref="T:VC3.ComponentModel.IScheme"/> of the class this
            attribute is applied to.
            </summary>
        </member>
        <member name="M:VC3.ComponentModel.ScopeAttribute.CreateClassScope(System.Type)">
            <summary>
            Creates an <see cref="T:VC3.ComponentModel.IScope"/> for the specified objectType.
            </summary>
            <param name="objectType">Type of <see cref="T:VC3.ComponentModel.BusinessObject"/></param>
            <returns>A new IScope</returns>
        </member>
        <member name="M:VC3.ComponentModel.ScopeAttribute.CreateInstance">
            <summary>
            Override in subclasses to create the scope
            </summary>
        </member>
        <member name="T:VC3.ComponentModel.ReadOnlyScopeAttribute">
            <summary>
            Sets the scope of a business object so that instances
            are scoped to an application.  Similar to GlobalScope except that objects in this 
            scope can ever be edited and are not affected by cache flushes. 
            Classes with this attribute must written to handle multi-threaded access to them.
            </summary>
        </member>
        <member name="T:VC3.ComponentModel.ThreadScopeAttribute">
            <summary>
            Sets the scope of a business object so that instances are scope to a logical
            thread of execution (thread or web request)
            </summary>
        </member>
        <member name="T:VC3.ComponentModel.ThreadLocal`1">
            <summary>
            Provides one storage location per executing thread.  If the storage is
            accessed in the context of a web request the <see cref="T:System.Web.HttpContext"/> is used
            for the backing store and the <see cref="P:VC3.ComponentModel.ThreadLocal`1.Object"/> will be released after
            the completion of the web request.  If there is no web request, then thread
            static storage (implemented with the <see cref="T:System.ThreadStaticAttribute"/>) will be used.
            
            Never use [ThreadStatic] inside of a web request.
            
            More Info:
            ThreadStatic, CallContext and HttpContext in ASP.Net
            http://piers7.blogspot.com/2005/11/threadstatic-callcontext-and_02.html
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:VC3.ComponentModel.ThreadLocal`1.GetStorage">
            <summary>
            The dictionary holding references, one per instanciated ThreadLocalReference type
            </summary>
            <returns></returns>
        </member>
        <member name="T:VC3.ComponentModel.RepeatableReadReference`1">
            <summary>
            A kind of ThreadLocalReference that ensures
            that a thread will always read the same value, regardless
            of changes made to it by other threads. New threads/requests
            will see the last value that was written by any other thread/request.
            In other words, this is a globally scoped object that will gracefully
            propagate changes to other threads.
            </summary>
            <typeparam name="T">Type of value to store</typeparam>
        </member>
        <member name="M:VC3.ComponentModel.RepeatableReadReference`1.Forget(`0)">
            <summary>
            Forces the current thread to forget the last value returned by
            the <see cref="P:VC3.ComponentModel.RepeatableReadReference`1.Object"/> property.  The value of the <paramref name="nextRead"/>
            parameter will be returned by the <see cref="P:VC3.ComponentModel.RepeatableReadReference`1.Object"/> property the next
            time it is read by any thread that has called Forget() since it's last read.
            </summary>
            <param name="nextRead">Value of the <see cref="P:VC3.ComponentModel.RepeatableReadReference`1.Object"/> property to return the next
            time it is read by any thread that has called Forget()</param>
        </member>
        <member name="P:VC3.ComponentModel.RepeatableReadReference`1.Object">
            <summary>
            The stored object. The current thread will always read the same value
            unless the value is changed by the current thread.  New threads will
            read the last written value.
            </summary>
        </member>
        <member name="T:VC3.ComponentModel.SimpleReference`1">
            <summary>
            An IReference with a single backing field as storage
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:VC3.ComponentModel.ScopedReference`1">
            <summary>
            An IReference that uses a scope as its backing storage.
            </summary>
        </member>
        <member name="M:VC3.ComponentModel.ScopedReference`1.#ctor(VC3.ComponentModel.IScope)">
            <summary>
            Creates a reference that is scoped to the specified <see cref="T:VC3.ComponentModel.IScope"/>.
            Use with care becuase this reference saves the scope -- if the scope of a type
            my change this reference will not recognize the change.
            </summary>
            <param name="scope"></param>
        </member>
        <member name="T:VC3.ComponentModel.TypedIdentifier">
            <summary>
            Wraps an untyped identifier with additional information about
            the type of <see cref="T:VC3.ComponentModel.BusinessObject"/> it represents.
            </summary>
        </member>
        <member name="F:VC3.ComponentModel.TypedIdentifier.TypeIdSeperatorChar">
            <summary>
            Character used to seperate the type if from the recordid:
            </summary>
        </member>
        <member name="M:VC3.ComponentModel.TypedIdentifier.#ctor(System.String,System.Type,VC3.ComponentModel.BusinessObject.Identifier)">
            <summary>
            Creates a new TypedIdentifier
            </summary>
            <param name="typeId">
            Type id of the <see cref="F:VC3.ComponentModel.TypedIdentifier.type"/> parameter.
            A null value indicates that this id <see cref="P:VC3.ComponentModel.TypedIdentifier.IsAbstract"/>.
            </param>
            <param name="type">Type of business object this id identifies</param>
            <param name="untypedId">The identifier that this identifier adds type information to</param>
        </member>
        <member name="M:VC3.ComponentModel.TypedIdentifier.GetHashCode">
            <summary>
            Returns the hash code of the untyped id.
            All typed id's within a type family must be unique
            without consideration of their type.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VC3.ComponentModel.TypedIdentifier.ToString">
            <summary>
            Gets a string that can be used to recreate this id later.
            </summary>
            <returns>Id string</returns>
        </member>
        <member name="M:VC3.ComponentModel.TypedIdentifier.ToDbString">
            <summary>
            Gets a string that can be parsed by database stored procedures
            </summary>
            <returns></returns>
        </member>
        <member name="P:VC3.ComponentModel.TypedIdentifier.Type">
            <summary>
            Type of business object this id identifies
            </summary>
        </member>
        <member name="P:VC3.ComponentModel.TypedIdentifier.IsAbstract">
            <summary>
            If true, indicates that this id cannot be passed to <see cref="M:VC3.ComponentModel.IFactory.CreateBusinessObject(VC3.ComponentModel.BusinessObject.Identifier)"/>
            b/c there is not enough type information available to select the Type to instantiate.
            </summary>
        </member>
        <member name="P:VC3.ComponentModel.TypedIdentifier.Values">
            <summary>
            Returns the values of the untyped id.
            </summary>
        </member>
        <member name="T:VC3.ComponentModel.SimpleIdentifier">
            <summary>
            Represents an identifier for a <see cref="T:VC3.ComponentModel.BusinessObject"/>
            that only had one id property. 
            </summary>
        </member>
        <member name="M:VC3.ComponentModel.SimpleIdentifier.#ctor(VC3.ComponentModel.BusinessObject.IdAttribute,System.Object)">
            <summary>
            Creates a new <see cref="T:VC3.ComponentModel.SimpleIdentifier"/> for the specified id.
            </summary>
        </member>
        <member name="M:VC3.ComponentModel.SimpleIdentifier.ToString">
            <summary>
            Overriden to return the string representation of the underlying
            base type value for the identifier.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VC3.ComponentModel.SimpleIdentifier.Equals(System.Object)">
            <summary>
            Overriden to determine if two <see cref="T:VC3.ComponentModel.SimpleIdentifier"/>
            represent the same identifier.
            </summary>
            <param name="o">The object to compare</param>
            <returns>True if the identifiers are the same, otherwise false</returns>
        </member>
        <member name="M:VC3.ComponentModel.SimpleIdentifier.GetHashCode">
            <summary>
            Gets the hash code for the underlying base type value
            for the identifier.
            </summary>
            <returns>The hash value</returns>
        </member>
        <member name="P:VC3.ComponentModel.SimpleIdentifier.Values">
            <summary>
            Gets the values that the identifier represents.
            </summary>
        </member>
        <member name="T:VC3.ComponentModel.ComplexIdentifier">
            <summary>
            Represents an identifier for a <see cref="T:VC3.ComponentModel.BusinessObject"/>
            that has more than one id property. 
            </summary>
        </member>
        <member name="M:VC3.ComponentModel.ComplexIdentifier.#ctor(VC3.ComponentModel.BusinessObject.IdAttribute[],System.Object[])">
            <summary>
            Creates a new <see cref="T:VC3.ComponentModel.ComplexIdentifier"/> for the specified ids.
            </summary>
            <param name="idas">Array of BusinessObject.IdAttributes used to describe the id values</param>
            <param name="id">Array of values that together for the identifier</param>
        </member>
        <member name="M:VC3.ComponentModel.ComplexIdentifier.ToString">
            <summary>
            Gets the string representation of the identifier.
            </summary>
            <returns>The string id</returns>
        </member>
        <member name="M:VC3.ComponentModel.ComplexIdentifier.Equals(System.Object)">
            <summary>
            Determines whether the specified object represents the same
            id as the current <see cref="T:VC3.ComponentModel.ComplexIdentifier"/> instance
            by comparing the string representations.
            </summary>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:VC3.ComponentModel.ComplexIdentifier.GetHashCode">
            <summary>
            Gets the hash code for the identifier based on the hash
            of the string representation.
            </summary>
            <returns>The hash code</returns>
        </member>
        <member name="M:VC3.ComponentModel.ComplexIdentifier.CompileStringRecursive(System.Text.StringBuilder,VC3.ComponentModel.BusinessObject.IdAttribute[],System.Int32)">
            <summary>
            Recursively builds the string representation of the identifier.
            </summary>
            <param name="idBuilder">The string builder usedto construct the id string</param>
            <param name="ids">The <see cref="T:VC3.ComponentModel.BusinessObject.IdAttribute"/> instances that comprise the identifier</param>
            <param name="index">The current index into the array of id values"/&gt;</param>
        </member>
        <member name="P:VC3.ComponentModel.ComplexIdentifier.Values">
            <summary>
            Gets the values that the identifier represents.
            </summary>
        </member>
        <member name="T:VC3.ComponentModel.MetaDataAttribute">
            <summary>
            Summary description for MetaDataAttribute.
            </summary>
        </member>
        <member name="F:VC3.ComponentModel.Context.ThreadScopeContext">
            <summary>
            Context currently used by thread-scoped objects
            </summary>
        </member>
        <member name="F:VC3.ComponentModel.Context.SharedScopeContext">
            <summary>
            Context currently being used by non-thread scoped objects
            </summary>
        </member>
        <member name="M:VC3.ComponentModel.Context.OnCommit(VC3.ComponentModel.Context,VC3.ComponentModel.CommitEventArgs)">
            <summary>
            Clears all <see cref="T:VC3.ComponentModel.CachedObjectBase"/> objects
            </summary>
        </member>
        <member name="M:VC3.ComponentModel.Context.RegisterForCommit(VC3.ComponentModel.BusinessObject)">
            <summary>
            Registers the specified object for engagement in the commit process.
            </summary>
            <param name="instance"></param>
        </member>
        <member name="M:VC3.ComponentModel.Context.RegisterForCommit(VC3.ComponentModel.BusinessObjectList)">
            <summary>
            Registers the specified list for engagement in the commit process.
            </summary>
            <param name="list"></param>
        </member>
        <member name="M:VC3.ComponentModel.Context.CommitChanges(VC3.ComponentModel.BusinessObject)">
            <summary>
            Commits all changes for objects in the context.
            </summary>
            <param name="root"></param>
        </member>
        <member name="M:VC3.ComponentModel.Context.CommitChanges(VC3.ComponentModel.BusinessObjectList)">
            <summary>
            Commits all changes for objects in the context.
            </summary>
            <param name="root"></param>
        </member>
        <member name="M:VC3.ComponentModel.Context.GetDependencies(VC3.ComponentModel.BusinessObject,System.Boolean)">
            <summary>
            Gets the fields that are business object dependencies for the specified type. With optionally filter
            objects that are not pending commit.
            </summary>
            <param name="instance"></param>
            <param name="onlyPendingCommit">If true, does not return objects that are not pending commit</param>
            <returns></returns>
        </member>
        <member name="M:VC3.ComponentModel.Context.GetDependents(VC3.ComponentModel.BusinessObject,System.Boolean)">
            <summary>
            Gets the fields that are business object dependencies for the specified type.
            </summary>
        </member>
        <member name="M:VC3.ComponentModel.Context.GetDependentLists(VC3.ComponentModel.BusinessObject)">
            <summary>
            Gets the fields that are business object dependencies for the specified type.
            </summary>
        </member>
        <member name="M:VC3.ComponentModel.Context.GetContext(System.Type,VC3.ComponentModel.ITransactionProvider)">
            <summary>
            Gets the business object context for the specified type.
            </summary>
        </member>
        <member name="M:VC3.ComponentModel.Context.Restore">
            <summary>
            Ensures that the current business object context is appropriately restored
            to the appropriate scope cache, such as following deserialization, after a 
            thread switch, or between postbacks within a web application.
            </summary>
        </member>
        <member name="M:VC3.ComponentModel.Context.Suspend">
            <summary>
            Suspends the current context to allow changes to occur without affecting the context.
            </summary>
            <returns>A suspension instance that will restore the context when disposed</returns>
        </member>
        <member name="M:VC3.ComponentModel.Context.AddDependency(VC3.ComponentModel.BusinessObject,VC3.ComponentModel.BusinessObject)">
            <summary>
            This method informs the context of a dependency that it should take into
            account during CommitChanges. Some dependencies cannot be found
            automatically by the context during the commit process. A common example of
            this when an object is removed from the graph and needs to be deleted due to
            an <see cref="T:VC3.ComponentModel.OwnerAttribute"/>.
            </summary>
            <param name="obj">The object with a dependency</param>
            <param name="dependency">Another object that the first one depends upon</param>
        </member>
        <member name="M:VC3.ComponentModel.Context.ResetThreadScopeContext">
            <summary>
            Resets the thread scope context.
            </summary>
        </member>
        <member name="E:VC3.ComponentModel.Context.Commit">
            <summary>
            Raised to notify subscribers of the commit progress.
            </summary>
        </member>
        <member name="P:VC3.ComponentModel.Context.Item(System.Object)">
            <summary>
            Stores context-scoped data in a dictionary.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="P:VC3.ComponentModel.Context.Item(System.Object,System.Object)">
            <summary>
            Stores context-scoped data in a dictionary.
            </summary>
            <param name="owner"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="P:VC3.ComponentModel.Context.Locker">
            <summary>
            Used to synchronize access to the context
            </summary>
        </member>
        <member name="M:VC3.ComponentModel.Context.Suspension.#ctor(VC3.ComponentModel.ThreadLocal{VC3.ComponentModel.Context})">
            <summary>
            Creates a new suspension period for the specified context.
            </summary>
            <param name="contextRef">The context to suspend</param>
        </member>
        <member name="M:VC3.ComponentModel.Context.Suspension.Suspend">
            <summary>
            Suspends the current context by replacing it with a temporary context.
            </summary>
        </member>
        <member name="M:VC3.ComponentModel.Context.Suspension.Resume">
            <summary>
            Restores the original context when the suspension period is over.
            </summary>
        </member>
        <member name="T:VC3.ComponentModel.CommitEventHandler">
            <summary>
            Delegate for handling commit events.
            </summary>
        </member>
        <member name="T:VC3.ComponentModel.CommitEventArgs">
            <summary>
            Base class for context events raised by <see cref="T:VC3.ComponentModel.BusinessObject"/>
            </summary>
        </member>
        <member name="T:VC3.ComponentModel.SessionContext">
            <summary>
            Container object responsible for maintaining shared storage across objects
            in a graph within the same scope.
            </summary>
        </member>
        <member name="M:VC3.ComponentModel.SessionContext.#ctor(VC3.ComponentModel.ITransactionProvider)">
            <summary>
            Creates a new context within the scope of the type of the specified object.
            </summary>
        </member>
        <member name="M:VC3.ComponentModel.SessionContext.RegisterForCommit(VC3.ComponentModel.BusinessObject)">
            <summary>
            Registers the specified object for engagement in the commit process.
            </summary>
            <param name="instance"></param>
        </member>
        <member name="M:VC3.ComponentModel.SessionContext.RegisterForCommit(VC3.ComponentModel.BusinessObjectList)">
            <summary>
            Registers the specified list for engagement in the commit process.
            </summary>
            <param name="list"></param>
        </member>
        <member name="M:VC3.ComponentModel.SessionContext.CommitChanges(VC3.ComponentModel.BusinessObject)">
            <summary>
            Commits all changes for objects in the context.
            </summary>
            <param name="root"></param>
        </member>
        <member name="M:VC3.ComponentModel.SessionContext.CommitChanges(VC3.ComponentModel.BusinessObjectList)">
            <summary>
            Commits all changes for objects in the context.
            </summary>
            <param name="root"></param>
        </member>
        <member name="M:VC3.ComponentModel.SessionContext.CommitChanges(System.Object)">
            <summary>
            Commits all pending changes in the current context.
            </summary>
        </member>
        <member name="M:VC3.ComponentModel.SessionContext.ProcessItems``1(System.Collections.Generic.LinkedList{``0})">
            <summary>
            Iterates sequentially over items in a linked list, assuming that any additions or removals
            will always occur on or after the current node.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:VC3.ComponentModel.SessionContext.BeforeCommitDependencies(VC3.ComponentModel.BusinessObject)">
            <summary>
            Tracks items being committed to prevent circular dependencies from causing stack overflows.
            </summary>
            <param name="instance"></param>
        </member>
        <member name="M:VC3.ComponentModel.SessionContext.AfterCommitDependencies(VC3.ComponentModel.BusinessObject)">
            <summary>
            Tracks items being committed to prevent circular dependencies from causing stack overflows.
            </summary>
            <param name="instance"></param>
        </member>
        <member name="M:VC3.ComponentModel.SessionContext.CommitNewInstance(VC3.ComponentModel.BusinessObject)">
            <summary>
            Recursively commits new instances in dependency order
            </summary>
            <param name="instance"></param>
        </member>
        <member name="M:VC3.ComponentModel.SessionContext.DeleteInstance(VC3.ComponentModel.BusinessObject)">
            <summary>
            Recursively deletes instances in dependency order
            </summary>
            <param name="instance"></param>
        </member>
        <member name="M:VC3.ComponentModel.SessionContext.GetDependencies(VC3.ComponentModel.BusinessObject,System.Boolean)">
            <summary>
            Gets the fields that are business object dependencies for the specified type. With optionally filter
            objects that are not pending commit.
            </summary>
            <param name="instance"></param>
            <param name="onlyPendingCommit">If true, does not return objects that are not pending commit</param>
            <returns></returns>
        </member>
        <member name="M:VC3.ComponentModel.SessionContext.GetDependents(VC3.ComponentModel.BusinessObject,System.Boolean)">
            <summary>
            Gets the fields that are business object dependencies for the specified type.
            </summary>
        </member>
        <member name="M:VC3.ComponentModel.SessionContext.GetDependentLists(VC3.ComponentModel.BusinessObject)">
            <summary>
            Gets the fields that are business object dependencies for the specified type.
            </summary>
        </member>
        <member name="M:VC3.ComponentModel.SessionContext.Join(VC3.ComponentModel.SessionContext)">
            <summary>
            Causes two contexts to join together.
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:VC3.ComponentModel.SessionContext.Equals(System.Object)">
            <summary>
            Causes two contexts to be considered equal when they share the same internal state.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:VC3.ComponentModel.SessionContext.GetHashCode">
            <summary>
            Returns the hashcode of the internal state.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VC3.ComponentModel.SessionContext.Suspend">
            <summary>
            Suspends the current context to allow changes to occur without affecting the context.
            </summary>
            <returns>A suspension instance that will restore the context when disposed</returns>
        </member>
        <member name="M:VC3.ComponentModel.SessionContext.Restore">
            <summary>
            Ensures that the current business object context is appropriately restored
            to the appropriate scope cache, such as following deserialization, after a 
            thread switch, or between postbacks within a web application.
            </summary>
        </member>
        <member name="M:VC3.ComponentModel.SessionContext.AddDependency(VC3.ComponentModel.BusinessObject,VC3.ComponentModel.BusinessObject)">
            <summary>
            This method informs the context of a dependency that it should take into
            account during CommitChanges. Some dependencies cannot be found
            automatically by the context during the commit process. A common example of
            this when an object is removed from the graph and needs to be deleted due to
            an <see cref="T:VC3.ComponentModel.OwnerAttribute"/>.
            </summary>
            <param name="obj">The object with a dependency</param>
            <param name="dependency">Another object that the first one depends upon</param>
        </member>
        <member name="P:VC3.ComponentModel.SessionContext.Item(System.Object)">
            <summary>
            Stores context-scoped data in a dictionary.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="P:VC3.ComponentModel.SessionContext.Item(System.Object,System.Object)">
            <summary>
            Stores context-scoped data in a dictionary.
            </summary>
            <param name="owner"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="T:VC3.ComponentModel.SessionContext.State">
            <summary>
            Private class used to store the state of a context.
            </summary>
        </member>
        <member name="F:VC3.ComponentModel.SessionContext.State.DirtyObjectsVersion">
            <summary>
            Represents the version of the dirty list. Changes only when adds are performed
            </summary>
        </member>
        <member name="F:VC3.ComponentModel.SessionContext.State.DirtyListsVersion">
            <summary>
            Represents the version of the dirty list. Changes only when adds are performed
            </summary>
        </member>
        <member name="T:VC3.ComponentModel.SessionContext.Graph">
            <summary>
            Object containing the unexpanded (object for which the child dependents and 
            dependencies have not been evaluated) objects that existin in a object graph and
            the objects that exists within the graph.
            </summary>
        </member>
        <member name="M:VC3.ComponentModel.SessionContext.Graph.#ctor(System.Object,VC3.ComponentModel.SessionContext)">
            <summary>
            Constructs a new object from a root object
            </summary>
            <param name="root"></param>
            <param name="context"></param>
        </member>
        <member name="M:VC3.ComponentModel.SessionContext.Graph.Contains(System.Object)">
            <summary>
            Gets whether the object exists within the graph
            An object is the graph if it meets any one of the following conditions:
            1) The object is an existing, dirty object (!IsNew) or is the root
            2) The object IsNew and is refered to by another object in the graph
            3) The object IsNew and is contained in a list that has an owner that is in the graph
            </summary>
        </member>
        <member name="T:VC3.ComponentModel.SessionContext.Graph.ReferenceComparer">
            <summary>
            Implements reference equality comparison for objects.
            </summary>
        </member>
        <member name="F:VC3.ComponentModel.NullContext.GlobalInstance">
            <summary>
            Null context used for objects in a multithreaded scope (global scope)
            </summary>
        </member>
        <member name="F:VC3.ComponentModel.NullContext.SuspensionInstance">
            <summary>
            Null context used for suspensions.  This is a slight optimization above simply using
            the <see cref="F:VC3.ComponentModel.NullContext.GlobalInstance"/> due to there being less locking overhead
            </summary>
        </member>
        <member name="M:VC3.ComponentModel.NullContext.#ctor(VC3.ComponentModel.IReaderWriterLock)">
            <summary>
            Creates a new context within the scope of the type of the specified object.
            </summary>
        </member>
        <member name="P:VC3.ComponentModel.NullContext.Item(System.Object)">
            <summary>
            Stores context-scoped data in a dictionary.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="P:VC3.ComponentModel.NullContext.Item(System.Object,System.Object)">
            <summary>
            Stores context-scoped data in a dictionary.
            </summary>
            <param name="owner"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="E:VC3.ComponentModel.NullContext.BeforeCommit">
            <summary>
            Overridden to prevent reference that would prevent GC on objects in
            context
            </summary>
        </member>
        <member name="E:VC3.ComponentModel.NullContext.AfterCommit">
            <summary>
            Overridden to prevent reference that would prevent GC on objects in
            context
            </summary>
        </member>
        <member name="E:VC3.ComponentModel.NullContext.CommitSucceeded">
            <summary>
            Overridden to prevent reference that would prevent GC on objects in
            context
            </summary>
        </member>
        <member name="E:VC3.ComponentModel.NullContext.CommitFailed">
            <summary>
            Overridden to prevent reference that would prevent GC on objects in
            context
            </summary>
        </member>
        <member name="T:VC3.Security.CryptoAlgorithm">
            <summary>
            Defines the set of cryptographic algorithms supported by the
            CryptoUtil class for encrypting and decrypting string values.
            </summary>
        </member>
        <member name="T:VC3.Security.HashType">
            <summary>
            Defines the types of hashing algorithms supported by the
            CryptoUtil class for hashing string values.
            </summary>
        </member>
        <member name="T:VC3.Security.CryptoUtil">
            <summary>
            Provides static cryptographic utility methods for encrypting,
            decrypting, and hashing string values.
            </summary>
        </member>
        <member name="M:VC3.Security.CryptoUtil.Encrypt(System.String,VC3.Security.CryptoAlgorithm,System.String)">
            <summary>
            Encrypts string values using the specified algorithm and encryption key.
            </summary>
            <param name="value">The string value to encrypt.</param>
            <param name="algorithm">The cryptographic algorithm to use:
            DES, RC2, Rijndael, TripleDES, or RSA.</param>
            <param name="key">A arbitrary string key which is hashed to
            create the necessary key and vector byte arrays.</param>
            <returns>The encrypted value as a string.</returns>
        </member>
        <member name="M:VC3.Security.CryptoUtil.EncryptSymmetric(System.String,VC3.Security.CryptoAlgorithm,System.Byte[],System.Byte[])">
            <summary>
            Encrypts string values using the specified algorithm and encryption key.
            </summary>
            <param name="value">The string value to encrypt.</param>
            <param name="algorithm">The cryptographic algorithm to use:
            DES, RC2, Rijndael, or TripleDES.</param>
            <param name="key">The key to use when encrypting the data.</param>
            <param name="vector">The initialization vector to use when encrypting the value.</param>
            <returns>The encrypted value as a string.</returns>
        </member>
        <member name="M:VC3.Security.CryptoUtil.EncryptAsymmetric(System.String,VC3.Security.CryptoAlgorithm,System.String)">
            <summary>
            Encrypts string values using the specified algorithm and encryption key.
            </summary>
            <param name="value">The string value to encrypt.</param>
            <param name="algorithm">The cryptographic algorithm to use: RSA.</param>
            <param name="key">The key to use when encrypting the data.</param>
            <returns>The encrypted value as a string.</returns>
        </member>
        <member name="M:VC3.Security.CryptoUtil.Decrypt(System.String,VC3.Security.CryptoAlgorithm,System.String)">
            <summary>
            Decrypts string values using the specified algorithm and decryption key.
            </summary>
            <param name="value">The string value to decrypt.</param>
            <param name="algorithm">The cryptographic algorithm to use:
            DES, RC2, Rijndael, TripleDES, or RSA</param>
            <param name="key">A arbitrary string key which is hashed to
            create the necessary key and vector byte arrays</param>
            <returns>The decrypted value as a string</returns>
        </member>
        <member name="M:VC3.Security.CryptoUtil.DecryptSymmetric(System.String,VC3.Security.CryptoAlgorithm,System.Byte[],System.Byte[])">
            <summary>
            Decrypts string values using the specified algorithm and decryption key.
            </summary>
            <param name="value">The string value to decrypt</param>
            <param name="algorithm">The cryptographic algorithm to use:
            DES, RC2, Rijndael, or TripleDES</param>
            <param name="key">The key to use when decrypting the data</param>
            <param name="vector">The initialization vector to use when decrypting the value</param>
            <returns>The decrypted value as a string</returns>
        </member>
        <member name="M:VC3.Security.CryptoUtil.DecryptAsymmetric(System.String,VC3.Security.CryptoAlgorithm,System.String)">
            <summary>
            Decrypts string values using the specified algorithm and decryption key.
            </summary>
            <param name="value">The Base 64 string value to decrypt</param>
            <param name="algorithm">The cryptographic algorithm to use: RSA</param>
            <param name="key">The key to use when decrypting the data</param>
            <returns>The decrypted value as a string</returns>
        </member>
        <member name="M:VC3.Security.CryptoUtil.GetSymmetricProvider(VC3.Security.CryptoAlgorithm)">
            <summary>
            Gets the symmetric cryptography provider based on the specified algorithm.
            </summary>
            <param name="algorithm">The algorithm to return the provider for</param>
            <returns>The symmetric cryptography provider</returns>
        </member>
        <member name="M:VC3.Security.CryptoUtil.Transform(System.Byte[],System.Security.Cryptography.ICryptoTransform)">
            <summary>
            Performs the cryptographic transformation and returns the result as byte array.
            </summary>
            <param name="data">The value to transform</param>
            <param name="transform">The transformation to use</param>
            <returns>The transformed value</returns>
        </member>
        <member name="M:VC3.Security.CryptoUtil.Sign(System.String,VC3.Security.CryptoAlgorithm,VC3.Security.HashType,System.String)">
            <summary>
            Creates a signature for the data using the specified algorithm and key.
            </summary>
            <param name="data">The data to sign</param>
            <param name="algorithm">The cryptography algorithm to use: RSA</param>
            <param name="hashType">The type of hashing to use: MD5, SHA1, SHA256, SHA384, SHA512</param>
            <param name="key">The cryptography key to use</param>
            <returns>The signature for the data</returns>
        </member>
        <member name="M:VC3.Security.CryptoUtil.Sign(System.IO.Stream,VC3.Security.CryptoAlgorithm,VC3.Security.HashType,System.String)">
            <summary>
            Creates a signature for the data using the specified algorithm, hash type and key.
            </summary>
            <param name="file">The file to sign</param>
            <param name="algorithm">The cryptography algorithm to use: RSA</param>
            <param name="hashType">The type of hashing to use: MD5, SHA1, SHA256, SHA384, SHA512</param>
            <param name="key">The cryptography key to use</param>
            <returns>The signature for the data</returns>
        </member>
        <member name="M:VC3.Security.CryptoUtil.Verify(System.String,System.String,VC3.Security.CryptoAlgorithm,VC3.Security.HashType,System.String)">
            <summary>
            Verifies a signature for the data using the specified algorithm and key.
            </summary>
            <param name="data">The data to verify the signature for</param>
            <param name="signature">The signature to verify</param>
            <param name="algorithm">The cryptography algorithm to use: RSA</param>
            <param name="hashType">The type of hashing to use: MD5, SHA1, SHA256, SHA384, SHA512</param>
            <param name="key">The cryptography key to use</param>
            <returns>True if the signature is valid, otherwise false</returns>
        </member>
        <member name="M:VC3.Security.CryptoUtil.Verify(System.IO.Stream,System.String,VC3.Security.CryptoAlgorithm,VC3.Security.HashType,System.String)">
            <summary>
            Verifies a signature for the data using the specified algorithm and key.
            </summary>
            <param name="file">The file to verify</param>
            <param name="signature">The signature to verify</param>
            <param name="algorithm">The cryptography algorithm to use: RSA</param>
            <param name="hashType">The type of hashing to use: MD5, SHA1, SHA256, SHA384, SHA512</param>
            <param name="key">The cryptography key to use</param>
            <returns>True if the signature is valid, otherwise false</returns>
        </member>
        <member name="M:VC3.Security.CryptoUtil.ComputeHash(System.String,VC3.Security.HashType)">
            <summary>
            Calculates hash for the specified string value and hash type.
            </summary>
            <param name="value">The string to calculate the hash for.</param>
            <param name="type">The type of hash to compute.</param>
            <returns>The hash.</returns>
        </member>
        <member name="M:VC3.Security.CryptoUtil.ComputeHash(System.IO.Stream,VC3.Security.HashType)">
            <summary>
            Calculates hash for the specified file and hash type.
            </summary>
            <param name="file">The stream for the file to hash.</param>
            <param name="type">The type of hash to compute.</param>
            <returns>The hash.</returns>
        </member>
        <member name="M:VC3.Security.CryptoUtil.ComputeHash(System.String,System.Int32)">
            <summary>
            Calculates a hash of a specific size for the specified string value.
            </summary>
            <param name="value">The string to calculate the hash for.</param>
            <param name="size">The size of hash to compute.</param>
            <returns>The hash.</returns>
        </member>
        <member name="T:VC3.Diagnostics.Notifier">
            <summary>
            Base class for event notifiers
            </summary>
        </member>
        <member name="M:VC3.Diagnostics.Notifier.CreateCondition(System.Xml.XmlNode)">
            <summary>
            Creates a <see cref="T:VC3.Diagnostics.RuleCondition"/> collection
            </summary>
        </member>
        <member name="M:VC3.Diagnostics.Notifier.CreateActions(System.Xml.XmlNode)">
            <summary>
            Creates a <see cref="T:VC3.Diagnostics.RuleActionList"/> collection
            </summary>
            <param name="section"></param>
            <returns></returns>
        </member>
        <member name="M:VC3.Diagnostics.Notifier.CreateGlobalRules(System.Xml.XmlNode,VC3.Diagnostics.RuleList)">
            <summary>
            Populates a rule list that will always execute. This method
            is used to maintain backward compatibility.
            </summary>
            <param name="section"></param>
            <param name="rules"></param>
        </member>
        <member name="M:VC3.Diagnostics.Notifier.CreateConditionalRules(System.Xml.XmlNode,VC3.Diagnostics.RuleList)">
            <summary>
            Populates a rule list that will execute based on conditions. 
            </summary>
            <param name="section"></param>
            <param name="rules"></param>
        </member>
        <member name="M:VC3.Diagnostics.Notifier.ParseRules(System.Xml.XmlNode)">
            <summary>
            Parses an XML definition of a ruleset. XML must be in the same structure as expected within
            application config files (root node should be 'notifier' and rules in 'notifier/rules').
            </summary>
            <param name="xmlConfig">XML with root node of 'notifier'</param>
            <returns>Ruleset based on the configuration</returns>
        </member>
        <member name="M:VC3.Diagnostics.Notifier.ParseRules(System.String)">
            <summary>
            Parses an XML definition of a ruleset. XML must be in the same structure as expected within
            application config files (root node should be 'notifier' and rules in 'notifier/rules').
            </summary>
            <param name="xmlConfig">XML text with root node of 'notifier'</param>
            <returns>Ruleset based on the configuration</returns>
        </member>
        <member name="M:VC3.Diagnostics.Notifier.NotifyAll(System.Collections.Specialized.NameValueCollection)">
            <summary>
            Processes the notification based on the current rules
            specified in the application config file (<see cref="P:VC3.Diagnostics.Notifier.Rules"/>).
            </summary>
            <param name="args">Notification data</param>
        </member>
        <member name="M:VC3.Diagnostics.Notifier.NotifyAll(System.Collections.Specialized.NameValueCollection,VC3.Diagnostics.RuleList)">
            <summary>
            Processes the notification based on the specified rules
            </summary>
            <param name="args">Notification data</param>
            <param name="rules">Rule to use to process the notification</param>
        </member>
        <member name="M:VC3.Diagnostics.Notifier.IsContextValid(System.Web.HttpContext)">
            <summary>
            Returns true if context is valid.
            </summary>
        </member>
        <member name="M:VC3.Diagnostics.Notifier.GetFullStackTrace(System.Exception)">
            <summary>
            Utility method for getting the full stack trace for a list
            of chained exceptions.
            </summary>
            <param name="error">Last exception in chain</param>
            <returns>Stack trace</returns>
        </member>
        <member name="M:VC3.Diagnostics.Notifier.AddLongArg(System.String,System.Collections.Specialized.NameValueCollection,System.String)">
            <summary>
            Breaks a longer string, into 2K byte chunks
            </summary>
            <param name="arg"></param>
            <param name="args"></param>
            <param name="namePrefix"></param>
        </member>
        <member name="M:VC3.Diagnostics.Notifier.NotifyAll(System.Exception,VC3.ComponentModel.License)">
            <summary>
            Delivers event to all notifiers.  Error exception info
            and the web request info (if any) will be available for use
            in the notification template.
            </summary>
            <remarks>
            See the NotifyAll(Exception, NameValueCollection) overload for
            the list of template parameters.
            </remarks>
        </member>
        <member name="M:VC3.Diagnostics.Notifier.NotifyAll(System.Exception)">
            <summary>
            Delivers event to all notifiers.  Error exception info
            and the web request info (if any) will be available for use
            in the notification template.
            </summary>
            <remarks>
            See the NotifyAll(Exception, NameValueCollection) overload for
            the list of template parameters.
            </remarks>
        </member>
        <member name="M:VC3.Diagnostics.Notifier.NotifyAll(System.Exception,System.String)">
            <summary>
            Delivers event to all notifiers.  Error exception info
            and the web request info (if any) will be available for use
            in the notification template.
            </summary>
            <remarks>
            See the NotifyAll(Exception, NameValueCollection) overload for
            the list of template parameters.
            </remarks>
        </member>
        <member name="M:VC3.Diagnostics.Notifier.NotifyAll(System.Exception,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Delivers event to all notifiers.  Error exception info
            and the web request info (if any) will be available for use
            in the notification template.
            </summary>
            <remarks>
            See the NotifyAll(Exception, License, NameValueCollection) overload for
            the list of template parameters.
            </remarks>
        </member>
        <member name="M:VC3.Diagnostics.Notifier.NotifyAll(System.Exception,VC3.ComponentModel.License,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Delivers event to all notifiers.  Error exception info
            and the web request info (if any) will be available for use
            in the notification template.  The specified custom template values will
            also be available.
            </summary>
            <remarks>
            <para>
            Notification templates can include parameters that will contain
            specific values when an event occurs.  Templates are evaluated
            by the <see cref="T:VC3.Text.TemplateEvaluator"/>.
            </para>
            
            <para>
            The following template parameters can be included in the
            notification template:
            
            <list type="table">
            
            <listheader>
            <term>Name</term>
            <description>Description</description>
            </listheader>
            
            <item>
            <term>Exception.Exists</term>
            <description>True/False.  Indicates that an exception is associated with this notification.</description>
            </item>
            
            <item>
            <term>Exception.Type</term>
            <description>If an exception occured, full class name of the base exception</description>
            </item>
            
            <item>
            <term>Exception.StackTrace</term>
            <description>If an exception occured, complete stack trace</description>
            </item>
            
            <item>
            <term>Exception.Message</term>
            <description>If an exception occured, the error message of the base exception</description>
            </item>
            
            <item>
            <term>Exception.ShortMessage</term>
            <description>If an exception occured, the first line of the error message of the base exception</description>
            </item>
            
            <item>
            <term>User.Description</term>
            <description>
            Description of the current user 
            (the return value of <see cref="P:System.Threading.Thread.CurrentPrincipal"/>.ToString())
            </description>
            </item>
            
            <item>
            <term>Web.Exists</term>
            <description>True/False depending of if the notification occured during a web request.
            If "True" the additional web-related parameters will be available.
            </description>
            </item>
            
            <item>
            <term>Web.Url</term>
            <description>The requested Url</description>
            </item>
            
            <item>
            <term>Web.RefererUrl</term>
            <description>The refering url, if any</description>
            </item>
            
            <item>
            <term>Web.ServerAddress</term>
            <description>IP address of the web server</description>
            </item>
            
            <item>
            <term>Web.ServerName</term>
            <description>Server name taken from the "Host" header.</description>
            </item>
            
            <item>
            <term>Web.UserHostAddress</term>
            <description>IP address of the client machine that made the web request</description>
            </item>
            
            <item>
            <term>Web.UserHostName</term>
            <description>Resolved IP address of the client machine that made the web request</description>
            </item>
            
            <item>
            <term>Web.Browser</term>
            <description>User agent that make the web request</description>
            </item>
            
            <item>
            <term>Web.Cookies</term>
            <description>Cookies, if any, sent with the web request</description>
            </item>
            
            <item>
            <term>Web.RequestMethod</term>
            <description>The HTTP request method (GET, POST, etc)</description>
            </item>
            
            <item>
            <term>Web.Header[HeaderName]</term>
            <description>Value of the HeaderName HTTP header sent from the client</description>
            </item>
            
            <item>
            <term>Web.IsClientConnected</term>
            <description>True if the client is still connected to the web server.</description>
            </item>
            
            <item>
            <term>Assembly[AssemblyName].Version</term>
            <description>Version number for assembly "VersionName". Example: Assembly[VC3.Web].Version}.
            Available for any loaded assembly.
            </description>
            </item>
            </list>
            </para>
            </remarks>
            <param name="error">The error to process</param>
            <param name="license">The current application license use to identify the application environment</param>
            <param name="args">Custom template values</param>
        </member>
        <member name="M:VC3.Diagnostics.Notifier.AddLicenseDetailArgs(VC3.ComponentModel.License,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Adds the license detail args if available.
            </summary>
            <param name="license"></param>
            <param name="args"></param>
        </member>
        <member name="P:VC3.Diagnostics.Notifier.Rules">
            <summary>
            Gets the list of rules
            </summary>
        </member>
        <member name="P:VC3.Diagnostics.Notifier.InLocalWebRequest">
            <summary>
            Returns true if called from a web request made locally from the web server.
            </summary>
        </member>
        <member name="T:VC3.Diagnostics.NotificationMode">
            <summary>
            Indicates if the notifier is active or not
            </summary>
        </member>
        <member name="F:VC3.Diagnostics.NotificationMode.Off">
            <summary>
            Never send notification
            </summary>
        </member>
        <member name="F:VC3.Diagnostics.NotificationMode.On">
            <summary>
            Always send notification
            </summary>
        </member>
        <member name="F:VC3.Diagnostics.NotificationMode.RemoteOnly">
            <summary>
            Only send notification when users are not running their browser on the local Web server.
            </summary>
        </member>
        <member name="T:VC3.Diagnostics.EmailAction">
            <summary>
            An instance of this class is created for each 'email' config section
            </summary>
        </member>
        <member name="M:VC3.Diagnostics.RuleAction.SafelyLogError(System.Exception)">
            <summary>
            Can be called by a notifier to safely log an error delivering a notification.
            This method will not cause an exception to be thrown.
            Writes info to the debugger.  You can run DebugView on a production system
            to view these messages.  Also, the error will be written to the event log
            if a source named "VC3 Notifier" exists.
            </summary>
            <param name="error">Error that cause the notification to fail</param>
        </member>
        <member name="M:VC3.Diagnostics.RuleAction.ReadConfig(System.Xml.XmlNode)">
            <summary>
            Initializes the Notifier. Should override in sub classes
            to read custom config data. Sub classes should always call
            base.ReadConfig() however.
            </summary>
            <param name="config"></param>
        </member>
        <member name="M:VC3.Diagnostics.RuleAction.Execute(System.Collections.Specialized.NameValueCollection)">
            <summary>
            Executes the action.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:VC3.Diagnostics.RuleAction.OnExecute(System.Collections.Specialized.NameValueCollection)">
            <summary>
            Override in sub classes to execute the action.
            </summary>
            <param name="args"></param>
        </member>
        <member name="P:VC3.Diagnostics.RuleAction.Id">
            <summary>
            Gets the id of this RuleAction
            </summary>
        </member>
        <member name="P:VC3.Diagnostics.RuleAction.Mode">
            <summary>
            Used to determine if the notifier is active or not.
            </summary>
        </member>
        <member name="P:VC3.Diagnostics.RuleAction.RequiresLicense">
            <summary>
            Indicates if the rule requires a license to execute properly.
            </summary>
        </member>
        <member name="P:VC3.Diagnostics.RuleAction.LicenseWait">
            <summary>
            How long in Seconds the application should wait a license before sending the notification anyways.
            </summary>
        </member>
        <member name="M:VC3.Diagnostics.EmailAction.OnExecute(System.Collections.Specialized.NameValueCollection)">
            <summary>
            Sends a notification via email
            </summary>
            <param name="args"></param>
        </member>
        <member name="T:VC3.Diagnostics.EventLogAction">
            <summary>
            Sends notifications to the windows event log.
            An instance is created for each eventLog section.
            </summary>
        </member>
        <member name="M:VC3.Diagnostics.EventLogAction.OnExecute(System.Collections.Specialized.NameValueCollection)">
            <summary>
            Write notification to the event log
            </summary>
            <param name="args"></param>
        </member>
        <member name="T:VC3.Diagnostics.WebPostAction">
            <summary>
            Posts notifications to a web page to enable remote notification.
            </summary>
        </member>
        <member name="M:VC3.Diagnostics.WebPostAction.OnExecute(System.Collections.Specialized.NameValueCollection)">
            <summary>
            Post event information to a web page.
            </summary>
            <param name="args">The arguments to post to the page</param>
        </member>
        <member name="P:VC3.Diagnostics.WebPostAction.Url">
            <summary>
            Url to post the notification values to
            </summary>
        </member>
        <member name="T:VC3.Diagnostics.WebRedirectAction">
            <summary>
            Redirect to a web page to enable custom error notification.
            </summary>
        </member>
        <member name="M:VC3.Diagnostics.WebRedirectAction.OnExecute(System.Collections.Specialized.NameValueCollection)">
            <summary>
            Redirect to a web page.
            </summary>
            <param name="args">The arguments to post to the page</param>
        </member>
        <member name="P:VC3.Diagnostics.WebRedirectAction.Url">
            <summary>
            Url to post the notification values to
            </summary>
        </member>
        <member name="T:VC3.Diagnostics.StopAction">
            <summary>
            Stops execution of the rules engine
            </summary>
        </member>
        <member name="T:VC3.Diagnostics.RuleConditionList">
            <summary>
            Define a collection of <see cref="T:VC3.Diagnostics.RuleCondition"/> objects
            </summary>
        </member>
        <member name="T:VC3.Diagnostics.RuleList">
            <summary>
            Define a collection of <see cref="T:VC3.Diagnostics.Rule"/> objects
            </summary>
        </member>
        <member name="T:VC3.Diagnostics.RuleActionList">
            <summary>
            Define a collection of <see cref="T:VC3.Diagnostics.RuleAction"/> objects
            </summary>
        </member>
        <member name="M:VC3.Diagnostics.RuleActionList.#ctor(System.Boolean)">
            <summary>
            Constructs a rule action list. If ensureUniqueIds is true, the collection
            enforces the 'Id' property the <see cref="T:VC3.Diagnostics.RuleAction"/> objects in its 
            collection must be unique.
            </summary>
            <param name="ensureUniqueIds"></param>
        </member>
        <member name="T:VC3.Diagnostics.Rule">
            <summary>
            Defines an class that control the execution of 
            diagnostic information for an application.
            </summary>
        </member>
        <member name="M:VC3.Diagnostics.Rule.Process(System.Collections.Specialized.NameValueCollection)">
            <summary>
            Process all rule conditions and executes actions
            if the rule conditions evalutate to true.
            </summary>
            <param name="args"></param>
            <returns>true if rule processing should continue;
            false otherwise</returns>
        </member>
        <member name="P:VC3.Diagnostics.Rule.Condition">
            <summary>
            Gets or sets the <see cref="T:VC3.Diagnostics.RuleCondition"/>
            </summary>
        </member>
        <member name="P:VC3.Diagnostics.Rule.Actions">
            <summary>
            Gets or sets a collection of RuleActions
            </summary>
        </member>
        <member name="T:VC3.Diagnostics.RuleCondition">
            <summary>
            Defines a single condition that define the 
            execution of a rule action.
            </summary>
        </member>
        <member name="M:VC3.Diagnostics.RuleCondition.ReadConfig(System.Xml.XmlNode)">
            <summary>
            Override in base types to parse configuration settings
            </summary>
            <param name="config"></param>
        </member>
        <member name="M:VC3.Diagnostics.RuleCondition.Evaluate(System.Collections.Specialized.NameValueCollection)">
            <summary>
            Override in base types to evaluates a rule condition
            </summary>
            <param name="args">A collection of arguments</param>
            <returns>true if the rule action should
            be processed base on this condition; false otherwise</returns>
        </member>
        <member name="T:VC3.Diagnostics.CompositeCondition">
            <summary>
            Defines a collection of <see cref="T:VC3.Diagnostics.RuleCondition"/> objects
            that define the execution of rule action.
            </summary>
        </member>
        <member name="P:VC3.Diagnostics.CompositeCondition.Conditions">
            <summary>
            Gets or sets an collection of <see cref="T:VC3.Diagnostics.RuleCondition"/>.
            </summary>
        </member>
        <member name="T:VC3.Diagnostics.AllCondition">
            <summary>
            Defines a set of rule conditions that must all evaluate
            to true for this rule to be proccessed
            </summary>
        </member>
        <member name="T:VC3.Diagnostics.AnyCondition">
            <summary>
            Defines a set of rule conditions for which any one rule
            condition must evalutate to true for this rule to be proccessed
            </summary>
        </member>
        <member name="M:VC3.Diagnostics.AnyCondition.Evaluate(System.Collections.Specialized.NameValueCollection)">
            <summary>
            Evaluates all rule conditions in its collection
            </summary>
            <returns>true if any rule condition evaluates to true;
            false otherwise</returns>
        </member>
        <member name="T:VC3.Diagnostics.AlwaysCondition">
            <summary>
            Defines a rule condition that will always 
            be evalutated
            </summary>
        </member>
        <member name="T:VC3.Diagnostics.CompareCondition">
            <summary>
            Defines a rule condition that will evaluate
            an expression
            </summary>
        </member>
        <member name="M:VC3.Diagnostics.CompareCondition.Compare(System.String,System.String)">
            <summary>
            Override in sub classes to compare two properties
            </summary>
            <param name="argValue"></param>
            <param name="compareValue"></param>
            <returns></returns>
        </member>
        <member name="T:VC3.Diagnostics.NotCondition">
            <summary>
            Specifies a condition that negates another 
            condition
            </summary>
        </member>
        <member name="T:VC3.Diagnostics.ExistsCondition">
            <summary>
            Evaluates whether a property exists
            </summary>
        </member>
        <member name="T:VC3.Diagnostics.EqualsCondition">
            <summary>
            Defines a condition that compares two values
            for equality
            </summary>
        </member>
        <member name="T:VC3.Diagnostics.MatchesCondition">
            <summary>
            Defines a condition that evaluate a value
            against a regular expression
            </summary>
        </member>
        <member name="T:VC3.Diagnostics.NeverCondition">
            <summary>
            Defines a rule condition that will never 
            be evalutated
            </summary>
        </member>
        <member name="T:VC3.Data.CloseReaderEventHandler">
            <summary>
            Delegate for events relating to the execution of an <see cref="T:System.Data.IDbCommand"/>
            </summary>
        </member>
        <member name="T:VC3.Data.DataLayerBase">
            <summary>
            Summary description for DataLayerBase.
            </summary>
        </member>
        <member name="M:VC3.Data.DataLayerBase.ExecuteView(System.String,System.Data.IDbDataParameter[])">
            <summary>
            Executes the specified parameterized sql statement or stored procedure.
            </summary>
            <param name="sql">A parameterized sql statement or stored procedure name.</param>
            <param name="parameters">Optional array of parameters created using CreateParameter().</param>
            <returns>A <see cref="T:System.Data.DataView"/> containing the query results.</returns>
        </member>
        <member name="M:VC3.Data.DataLayerBase.ExecuteView(System.String,System.Boolean,System.Data.IDbDataParameter[])">
            <summary>
            Executes the specified parameterized sql statement or stored procedure.
            </summary>
            <param name="sql">A parameterized sql statement or stored procedure name.</param>
            <param name="parameters">Optional array of parameters created using CreateParameter().</param>
            <returns>A <see cref="T:System.Data.DataView"/> containing the query results.</returns>
        </member>
        <member name="M:VC3.Data.DataLayerBase.ExecuteView(System.String,System.String,System.Data.IDbDataParameter[])">
            <summary>
            Executes the specified parameterized sql statement or stored procedure.
            </summary>
            <param name="sql">A parameterized sql statement or stored procedure name.</param>
            <param name="parameters">Optional array of parameters created using CreateParameter().</param>
            <returns>A <see cref="T:System.Data.DataView"/> containing the query results.</returns>
        </member>
        <member name="M:VC3.Data.DataLayerBase.ExecuteReader(System.String,System.Data.IDbDataParameter[])">
            <summary>
            Executes the specified parameterized sql statement or stored procedure.
            </summary>
            <param name="sql">A parameterized sql statement or stored procedure name.</param>
            <param name="parameters">Optional array of parameters created using CreateParameter().</param>
            <returns>An IDataReader containing the query results.</returns>
        </member>
        <member name="M:VC3.Data.DataLayerBase.ExecuteReader(System.String,System.Boolean,System.Data.IDbDataParameter[])">
            <summary>
            Executes the specified parameterized sql statement or stored procedure.
            </summary>
            <param name="sql">A parameterized sql statement or stored procedure name.</param>
            <param name="parameters">Optional array of parameters created using CreateParameter().</param>
            <returns>An IDataReader containing the query results.</returns>
        </member>
        <member name="M:VC3.Data.DataLayerBase.ExecuteReader(System.String,System.String,System.Data.IDbDataParameter[])">
            <summary>
            Executes the specified parameterized sql statement or stored procedure.
            </summary>
            <param name="sql">A parameterized sql statement or stored procedure name.</param>
            <param name="commandName">The fully db qualified name of the stored procedure or the name of the command as set in the settings file</param>
            <param name="parameters">Optional array of parameters created using CreateParameter().</param>
            <returns>An IDataReader containing the query results.</returns>
        </member>
        <member name="M:VC3.Data.DataLayerBase.ExecuteScalar(System.String,System.Data.IDbDataParameter[])">
            <summary>
            Executes the specified parameterized sql statement or stored procedure.
            </summary>
            <param name="sql">A parameterized sql statement or stored procedure name.</param>
            <param name="parameters">Optional array of parameters created using CreateParameter().</param>
            <returns>A single object value from the first column and row of the query results.</returns>
        </member>
        <member name="M:VC3.Data.DataLayerBase.ExecuteScalar(System.String,System.Boolean,System.Data.IDbDataParameter[])">
            <summary>
            Executes the specified parameterized sql statement or stored procedure.
            </summary>
            <param name="sql">A parameterized sql statement or stored procedure name.</param>
            <param name="parameters">Optional array of parameters created using CreateParameter().</param>
            <returns>A single object value from the first column and row of the query results.</returns>
        </member>
        <member name="M:VC3.Data.DataLayerBase.ExecuteScalar(System.String,System.String,System.Data.IDbDataParameter[])">
            <summary>
            Executes the specified parameterized sql statement or stored procedure.
            </summary>
            <param name="sql">A parameterized sql statement or stored procedure name.</param>
            <param name="commandName">The fully db qualified name of the stored procedure or the name of the command as set in the settings file.</param>
            <param name="parameters">Optional array of parameters created using CreateParameter().</param>
            <returns>A single object value from the first column and row of the query results.</returns>
        </member>
        <member name="M:VC3.Data.DataLayerBase.ExecuteNonQuery(System.String,System.Data.IDbDataParameter[])">
            <summary>
            Executes the specified non-result returning parameterized sql statement or stored procedure.
            </summary>
            <param name="sql">A parameterized sql statement or stored procedure name.</param>
            <param name="parameters">Optional array of parameters created using CreateParameter().</param>
        </member>
        <member name="M:VC3.Data.DataLayerBase.ExecuteNonQuery(System.String,System.Boolean,System.Data.IDbDataParameter[])">
            <summary>
            Executes the specified non-result returning parameterized sql statement or stored procedure.
            </summary>
            <param name="sql">A parameterized sql statement or stored procedure name.</param>
            <param name="parameters">Optional array of parameters created using CreateParameter().</param>
        </member>
        <member name="M:VC3.Data.DataLayerBase.ExecuteNonQuery(System.String,System.String,System.Data.IDbDataParameter[])">
            <summary>
            Executes the specified non-result returning parameterized sql statement or stored procedure.
            </summary>
            <param name="sql">A parameterized sql statement or stored procedure name.</param>
            <param name="commandName">The fully db qualified name of the stored procedure or the name of the command as set in the settings file</param>
            <param name="parameters">Optional array of parameters created using CreateParameter().</param>
            <returns></returns>
        </member>
        <member name="M:VC3.Data.DataLayerBase.CreateParameter(System.String,System.Data.DbType,System.Int32,System.Object)">
            <summary>
            Creates a parameter with the specified name and value.
            </summary>
            <param name="name">The name of the parameter.</param>
            <param name="type">The type of the parameter.</param>
            <param name="size">The size of the parameter if the type is variable length, 0 otherwise.</param>
            <param name="value">The value of the parameter.</param>
            <returns>An initialized parameter.</returns>
        </member>
        <member name="M:VC3.Data.DataLayerBase.CreateParameter(System.String,System.Data.DbType,System.Int32,System.Byte,System.Byte,System.Object)">
            <summary>
            Creates a parameter with the specified name and value.
            </summary>
            <param name="name">The name of the parameter.</param>
            <param name="type">The type of the parameter.</param>
            <param name="size">The size of the parameter if the type is variable length, 0 otherwise.</param>
            <param name="precision">The precision of the parameter.</param>
            <param name="scale">The scale of the parameter.</param>
            <param name="value">The value of the parameter.</param>
            <returns>An initialized parameter.</returns>
        </member>
        <member name="M:VC3.Data.DataLayerBase.CreateParameter(System.String,System.Data.DbType,System.Object)">
            <summary>
            Creates a parameter with the specified name and value.
            </summary>
            <param name="name">The name of the parameter.</param>
            <param name="type">The type of the parameter.</param>
            <param name="value">The value of the parameter.</param>
            <returns>An initialized parameter.</returns>
        </member>
        <member name="M:VC3.Data.DataLayerBase.CreateParameter(System.String,System.Array)">
            <summary>
            Creates a parameter with the specified name and value.
            </summary>
            <param name="name">The name of the parameter.</param>
            <param name="value">The value of the parameter.</param>
            <returns>An initialized parameter.</returns>
        </member>
        <member name="M:VC3.Data.DataLayerBase.CreateParameter(System.String,VC3.ComponentModel.BusinessObject.IdentifierList)">
            <summary>
            Creates a parameter with the specified name and value.
            </summary>
            <param name="name">The name of the parameter.</param>
            <param name="value">The value of the parameter.</param>
            <returns>An initialized parameter.</returns>
        </member>
        <member name="M:VC3.Data.DataLayerBase.CreateParameter(System.String,System.String)">
            <summary>
            Creates a parameter for an encoded array of identifiers.
            Correctly handles passing long lists of ids.
            </summary>
            <param name="name">The name of the parameter.</param>
            <param name="ids">The value of the parameter.</param>
            <returns>An initialized parameter.</returns>
        </member>
        <member name="M:VC3.Data.DataLayerBase.GetQueryPlan(System.String)">
            <summary>
            Gets the query plan for the first statement a batch
            </summary>
            <param name="sql">SQL to analyze</param>
            <returns></returns>
        </member>
        <member name="M:VC3.Data.DataLayerBase.BulkCopyData(System.String,System.Data.IDataReader)">
            <summary>
            Bulk copy data into the provided destination table from the given DataReader, with the default timeout of 60 seconds.  
            Currently only supported with Sql Server
            </summary>
            <param name="destTable">Destination table</param>
            <param name="reader">An <see cref="T:System.Data.IDataReader"/> to use as the data source for the bulk copy</param>
        </member>
        <member name="M:VC3.Data.DataLayerBase.BulkCopyData(System.String,System.Data.IDataReader,System.Int32)">
            <summary>
            Bulk copy data into the provided destination table from the given DataReader, with the default timeout of 60 seconds.  
            Currently only supported with Sql Server
            </summary>
            <param name="destTable">Destination table</param>
            <param name="reader">An <see cref="T:System.Data.IDataReader"/> to use as the data source for the bulk copy</param>
            <param name="timeout">The timeout (in seconds) to perform the operation</param>
        </member>
        <member name="T:VC3.ComponentModel.EnforcementMode">
            <summary>
            Enumeration identifying the three modes under which property preconditions
            may be enforced.
            </summary>
        </member>
        <member name="F:VC3.ComponentModel.EnforcementMode.PropertySet">
            <summary>
            Mode indicating that the precondition enforcement is occurring
            during a property set operation.  Useful when the preconditions
            must alter the value or prevent the property from being set to
            enforce business rules.
            </summary>
        </member>
        <member name="F:VC3.ComponentModel.EnforcementMode.PropertyCheck">
            <summary>
            Mode indicating that a value is being statically checked against
            the preconditions of a property.  The object instance will not
            be available, so only static preconditions should be enforced.
            </summary>
        </member>
        <member name="F:VC3.ComponentModel.EnforcementMode.Object">
            <summary>
            Mode indicating that the entire object is being validated in
            preparation for committing changes to the object in some way.
            This mode enables cross-property validation to occur by ensuring
            that all properties of an object are enforced at the same time.
            </summary>
        </member>
        <member name="T:VC3.ComponentModel.PropertyPreconditions">
            <summary>
            Represents a collection of PreconditionAttribute subclasses and enables
            the retrieval and enforcement of these property preconditions.
            </summary>
        </member>
        <member name="M:VC3.ComponentModel.PropertyPreconditions.Enforce(System.Object,System.Object,VC3.ComponentModel.EnforcementMode)">
            <summary>
            Determines if all of the preconditions were met.
            </summary>
            <param name="instance">The instance to enforce preconditions on.</param>
            <param name="value">The value to test.</param>
            <param name="mode">The enforcement mode: Object, ProperyCheck, or PropertySet.</param>
            <returns>
            The validated value.  This may be different than the value parameter because
            a precondition can change a value in order to make it valid.
            </returns>
            <exception cref="T:VC3.ComponentModel.PreconditionsViolatedException">
            Thrown when the value did not pass 1 or more precondition tests.
            </exception>
        </member>
        <member name="M:VC3.ComponentModel.PropertyPreconditions.GetPreconditions(System.Object,System.String)">
            <summary>
            Gets preconditions for the specified property.
            </summary>
            <param name="instance">The instance containing the property.</param>
            <param name="property">The name of the property.</param>
            <returns>A PropertyPrecondition instance.</returns>
        </member>
        <member name="M:VC3.ComponentModel.PropertyPreconditions.GetPreconditions(System.Type,System.String)">
            <summary>
            Gets preconditions for the specified property.
            </summary>
            <param name="type">The type containing the property.</param>
            <param name="property">The name of the property.</param>
            <returns>A PropertyPrecondition instance.</returns>
        </member>
        <member name="M:VC3.ComponentModel.PropertyPreconditions.Enforce(System.Object,System.String,System.Object)">
            <summary>
            Determines if all static preconditions were met for the specified property.
            </summary>
            <param name="instance">The object instance.</param>
            <param name="property">The name of the property.</param>
            <param name="value">The value to test.</param>
            <returns>
            The validated value.  This may be different than the value parameter because
            a precondition can change a value in order to make it valid.
            </returns>
            <remarks>
            Only static preconditions are enforced by this method.  Preconditions requiring
            object instances, such as comparison conditions, are ignored.
            </remarks>
            <exception cref="T:VC3.ComponentModel.PreconditionsViolatedException">
            Thrown when the value did not pass 1 or more precondition tests.
            </exception>
        </member>
        <member name="M:VC3.ComponentModel.PropertyPreconditions.Enforce(System.Type,System.String,System.Object)">
            <summary>
            Determines if all static preconditions were met for the specified property.
            </summary>
            <param name="type">The type of the object.</param>
            <param name="property">The name of the property.</param>
            <param name="value">The value to test.</param>
            <returns>
            The validated value.  This may be different than the value parameter because
            a precondition can change a value in order to make it valid.
            </returns>
            <remarks>
            Only static preconditions are enforced by this method.  Preconditions requiring
            object instances, such as comparison conditions, are ignored.
            </remarks>
            <exception cref="T:VC3.ComponentModel.PreconditionsViolatedException">
            Thrown when the value did not pass 1 or more precondition tests.
            </exception>
        </member>
        <member name="M:VC3.ComponentModel.PropertyPreconditions.Enforce(System.Object)">
            <summary>
            Enforces all preconditions for all properties on the specified object.
            </summary>
            <param name="instance">The object instance.</param>
            <exception cref="T:VC3.ComponentModel.PreconditionsViolatedException">
            Thrown when a property does not pass one or more precondition tests.
            </exception>
        </member>
        <member name="P:VC3.ComponentModel.PropertyPreconditions.Item(System.Int32)">
            <summary>
            Returns the precondition at the specified index.
            </summary>
        </member>
        <member name="T:VC3.ComponentModel.PreconditionAttribute">
            <summary>
            Abstract base class for all attributes that represent a property precondition
            that should be enforced during property sets and object commits.
            </summary>
        </member>
        <member name="M:VC3.ComponentModel.PreconditionAttribute.OnPropertyInitialized">
            <summary>
            Notifies subclasses that the <see cref="P:VC3.ComponentModel.PreconditionAttribute.Property"/> property has
            been initialized, allowing them to perform additional setup work.
            </summary>
        </member>
        <member name="M:VC3.ComponentModel.PreconditionAttribute.IsValidValue(System.Object,System.Object@,VC3.ComponentModel.EnforcementMode)">
            <summary>
            Abstract method that must be implemented by subclasses to determine
            whether the specific value is valid based on the precondition rules
            and the state of the specified instance.
            </summary>
            <param name="instance">
            The instance of the property parent to validate, which will be null
            for property checks.
            </param>
            <param name="value"></param>
            <param name="mode"></param>
            <returns></returns>
        </member>
        <member name="P:VC3.ComponentModel.PreconditionAttribute.Property">
            <summary>
            The property the attribute is assigned to.
            </summary>
        </member>
        <member name="P:VC3.ComponentModel.PreconditionAttribute.AllowableModes">
            <summary>
            The enforcement modes supported by the attribute subclass.
            </summary>
        </member>
        <member name="T:VC3.ComponentModel.CompareAttribute">
            <summary>
            Enforces that "AttributedProperty op propertyName" holds true.
            </summary>
        </member>
        <member name="M:VC3.ComponentModel.CompareAttribute.#ctor(System.String,VC3.ComponentModel.ComparisonOperator)">
            <summary>
            Enforces that "AttributedProperty op propertyName" holds true.
            </summary>
            <param name="propertyName"></param>
            <param name="op"></param>
        </member>
        <member name="M:VC3.ComponentModel.CompareAttribute.#ctor(System.String,VC3.ComponentModel.ComparisonOperator,System.String)">
            <summary>
            Enforces that "AttributedProperty op propertyName" holds true.
            </summary>
            <param name="propertyName"></param>
            <param name="op"></param>
            <param name="descriptionPropertyName">Message to display when validation not satisfied</param>
        </member>
        <member name="M:VC3.ComponentModel.CompareAttribute.IsValidValue(System.Object,System.Object@)">
            <summary>
            A safe way to compare values, will never throw errors
            </summary>
            <param name="instance"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:VC3.ComponentModel.CompareAttribute.GetComparisonText(VC3.ComponentModel.ComparisonOperator)">
            <summary>
            Returns a textual representation of the comparison operator used during validity evaluation
            </summary>
            <param name="op"></param>
            <returns></returns>
        </member>
        <member name="P:VC3.ComponentModel.CompareAttribute.ComparisonValue">
            <summary>
            After "IsValidValue" is called, this will hold the value the instance was compared to 
            May be null
            </summary>
        </member>
        <member name="P:VC3.ComponentModel.CompareAttribute.ComparisonText">
            <summary>
            Gets a textual representation of the comparison operator used during validity evaluation
            </summary>
        </member>
        <member name="T:VC3.ComponentModel.ConditionalAttribute">
            <summary>
            Abstract base class for precondition attributes that are only
            enforced when other properties have specific values.
            </summary>
        </member>
        <member name="M:VC3.ComponentModel.RequiredIfAttribute.#ctor(System.String)">
            <summary>
            Indicates that the property on which the attribute is applied
            is required if the property with the specified name is not null.
            </summary>
            <param name="propertyName">The name of the property to evaluate</param>
            <remarks>
            Generally, the specified property will be considered null if the
            value equals one of the <see cref="T:VC3.ComponentModel.DataConverter"/> null constants.
            However, for boolean properties that do not have a null constant
            the attribute will consider the property to be required if the 
            value of the specified property is true.
            </remarks>
        </member>
        <member name="M:VC3.ComponentModel.RequiredIfAttribute.#ctor(System.String,System.Object)">
            <summary>
            Indicates that the property on which the attribute is applied
            is required if the property with the specified name equals the 
            specified value.
            </summary>
            <param name="propertyName">The name of the property to evaluate</param>
            <param name="comparisonValue">The value to check for equality against</param>
        </member>
        <member name="M:VC3.ComponentModel.RequiredIfAttribute.#ctor(System.String,VC3.ComponentModel.ComparisonOperator,System.Object)">
            <summary>
            Indicates that the property on which the attribute is applied
            is required if expression represented by the property, operator,
            and value parameters evaluates to true.
            </summary>
            <param name="propertyName">The name of the property to evaluate</param>
            <param name="op">The operator to use when comparing the property with the value</param>
            <param name="comparisonValue">The value to check for equality against</param>
        </member>
        <member name="M:VC3.ComponentModel.RequiredAttribute.#ctor(System.Boolean)">
            <summary>
            Creates a RequiredAttribute
            </summary>
            <param name="trimValue">True to trim spaces and non printing characters from the value if it is a string. If the property type is not string, setting this value has no effect.</param>
        </member>
        <member name="M:VC3.ComponentModel.Formatter.Reformat(System.String)">
            <summary>
            Converts a string into a consistent format
            </summary>
        </member>
        <member name="M:VC3.ComponentModel.Formatter.Format(System.Object)">
            <summary>
            Converts an object from its native type to a string
            </summary>
        </member>
        <member name="M:VC3.ComponentModel.PhoneNumberFormatter.Reformat(System.String)">
            <summary>
            Overridden to handle optional area codes.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:VC3.ComponentModel.BooleanFormatAttribute">
            <summary>
            Shortcut format attribute class for email properties.
            </summary>
        </member>
        <member name="T:VC3.ComponentModel.YesNoAttribute">
            <summary>
            Shortcut format attribute class for email properties.
            </summary>
        </member>
        <member name="T:VC3.ComponentModel.ShortDateAttribute">
            <summary>
            Shortcut format attribute class for short date properties.
            </summary>
        </member>
        <member name="T:VC3.ComponentModel.ShortTimeAttribute">
            <summary>
            Shortcut format attribute class for short time properties.
            </summary>
        </member>
        <member name="T:VC3.ComponentModel.ShortDateTimeAttribute">
            <summary>
            Shortcut format attribute class for short date time properties.
            </summary>
        </member>
        <member name="T:VC3.ComponentModel.LongDateAttribute">
            <summary>
            Shortcut format attribute class for long date properties.
            </summary>
        </member>
        <member name="T:VC3.ComponentModel.LongTimeAttribute">
            <summary>
            Shortcut format attribute class for long time properties.
            </summary>
        </member>
        <member name="T:VC3.ComponentModel.LongDateTimeAttribute">
            <summary>
            Shortcut format attribute class for long date time properties.
            </summary>
        </member>
        <member name="T:VC3.ComponentModel.CurrencyAttribute">
            <summary>
            Shortcut format attribute class for currency properties.
            </summary>
        </member>
        <member name="T:VC3.ComponentModel.WholeNumberCurrencyAttribute">
            <summary>
            Shortcut format attribute class for whole number currency properties.
            </summary>
        </member>
        <member name="T:VC3.ComponentModel.PercentageAttribute">
            <summary>
            Shortcut format attribute class for percentage properties.
            </summary>
        </member>
        <member name="T:VC3.ComponentModel.PhoneAttribute">
            <summary>
            Shortcut format attribute class for phone number properties.
            </summary>
        </member>
        <member name="T:VC3.ComponentModel.PhoneAreaCodeOptionalAttribute">
            <summary>
            Shortcut format attribute class for phone number properties with an optional areas code.
            </summary>
        </member>
        <member name="T:VC3.ComponentModel.EmailAttribute">
            <summary>
            Shortcut format attribute class for email properties.
            </summary>
        </member>
        <member name="T:VC3.ComponentModel.EmailListAttribute">
            <summary>
            Shortcut format attribute class for lists of emails.
            </summary>
        </member>
        <member name="T:VC3.ComponentModel.SSNAttribute">
            <summary>
            Shortcut format attribute class for SSN properties.
            </summary>
        </member>
        <member name="T:VC3.ComponentModel.NameAttribute">
            <summary>
            Shortcut format attribute class for Alpha properties
            </summary>
        </member>
        <member name="T:VC3.ComponentModel.ZipCodeAttribute">
            <summary>
            Shortcut format attribute class for zip code properties.
            </summary>
        </member>
        <member name="T:VC3.ComponentModel.UrlAttribute">
            <summary>
            Shortcut format attribute class for Url properties.
            </summary>
        </member>
        <member name="T:VC3.ComponentModel.NumberAttribute">
            <summary>
            Shortcut format attribute class for numeric properties.
            </summary>
        </member>
        <member name="T:VC3.ComponentModel.PreconditionsViolatedException">
            <summary>
            Thrown to indicate that one or more preconditions were not met.
            </summary>
        </member>
        <member name="M:VC3.ComponentModel.PreconditionsViolatedException.#ctor(VC3.ComponentModel.PreconditionAttribute,System.Object,System.Object)">
            <summary>
            Creates a new exception.
            </summary>
            <param name="precondition">A precondition that was violated.</param>
            <param name="instance">BusinessObject who's preconditions were violated</param>
            <param name="value">The value that was invalid.</param>
        </member>
        <member name="M:VC3.ComponentModel.PreconditionsViolatedException.Add(VC3.ComponentModel.PreconditionAttribute)">
            <summary>
            Adds another precondition to the list of violated preconditions.
            </summary>
            <param name="precondition"></param>
        </member>
        <member name="P:VC3.ComponentModel.PreconditionsViolatedException.Preconditions">
            <summary>
            The set of preconditions that were violated.
            </summary>
        </member>
        <member name="P:VC3.ComponentModel.PreconditionsViolatedException.Message">
            <summary>
            Describes the precondition violations.
            </summary>
        </member>
        <member name="T:VC3.ComponentModel.OwnerAttribute">
            <summary>
            Used to indicate that the object referenced by this
            property "owns" this object.  If the property
            is ever null, the object should be deleted when
            CommitChanges is called.
            </summary>
        </member>
        <member name="T:VC3.ComponentModel.OnChangeAttribute">
            <summary>
            Invokes the specified method when the value of a property changes.
            </summary>
        </member>
        <member name="T:VC3.ComponentModel.DataConverter">
            <summary>
            Summary description for DataConverter.
            </summary>
        </member>
        <member name="M:VC3.ComponentModel.DataConverter.IsChar(System.Int32)">
            <summary>
            Indicates whether the specified column is of type char(1) and
            can be returned as a <see cref="T:System.Char"/>.
            </summary>
            <param name="index">The index of the column</param>
            <returns>True if the column is a single character char, otherwise false.</returns>
            <remarks>
            Allocates memory for isChar boolean array if it has not been allocated or
            its dimension should be expanded since another dataset has larger FieldCount 
            than the previously returned dataset. The second senario only occurs when 
            multiple record sets are returned. 
            </remarks>
        </member>
        <member name="T:VC3.ComponentModel.StringConverter">
            <summary>
            Summary description for CharConverter.
            </summary>
        </member>
        <member name="T:VC3.ComponentModel.BooleanConverter">
            <summary>
            Summary description for DateTimeConverter.
            </summary>
        </member>
        <member name="T:VC3.ComponentModel.NullableBooleanConverter">
            <summary>
            This class handles converting Nullable Booleans to/from various types
            </summary>
        </member>
        <member name="T:VC3.ComponentModel.CharConverter">
            <summary>
            Summary description for CharConverter.
            </summary>
        </member>
        <member name="T:VC3.ComponentModel.DateTimeConverter">
            <summary>
            Summary description for DateTimeConverter.
            </summary>
        </member>
        <member name="T:VC3.ComponentModel.DecimalConverter">
            <summary>
            Summary description for DecimalConverter.
            </summary>
        </member>
        <member name="T:VC3.ComponentModel.DoubleConverter">
            <summary>
            Summary description for DoubleConverter.
            </summary>
        </member>
        <member name="T:VC3.ComponentModel.SingleConverter">
            <summary>
            Summary description for SingleConverter.
            </summary>
        </member>
        <member name="T:VC3.ComponentModel.GuidConverter">
            <summary>
            Summary description for GuidConverter.
            </summary>
        </member>
        <member name="T:VC3.ComponentModel.Int16Converter">
            <summary>
            Summary description for Int16Converter.
            </summary>
        </member>
        <member name="T:VC3.ComponentModel.Int32Converter">
            <summary>
            Summary description for Int32Converter.
            </summary>
        </member>
        <member name="T:VC3.ComponentModel.Int64Converter">
            <summary>
            Summary description for Int64Converter.
            </summary>
        </member>
        <member name="T:VC3.Util.SerializationUtil">
            <summary>
            Utility class to simplify serialization.
            </summary>
        </member>
        <member name="M:VC3.Util.SerializationUtil.Serialize(System.Object,System.Runtime.Serialization.ISurrogateSelector)">
            <summary>
            Utility method for serializing objects into a binary format.
            <seealso cref="M:VC3.Util.SerializationUtil.Deserialize(System.Byte[],System.Runtime.Serialization.ISurrogateSelector)"/>
            </summary>
        </member>
        <member name="M:VC3.Util.SerializationUtil.Serialize(System.Object)">
            <summary>
            Utility method for serializing objects into a binary format.
            <seealso cref="M:VC3.Util.SerializationUtil.Deserialize(System.Byte[])"/>
            </summary>
        </member>
        <member name="M:VC3.Util.SerializationUtil.Deserialize(System.Byte[],System.Runtime.Serialization.ISurrogateSelector)">
            <summary>
            Utility method for de-serializing objects into a binary format
            <seealso cref="M:VC3.Util.SerializationUtil.Serialize(System.Object,System.Runtime.Serialization.ISurrogateSelector)"/>
            </summary>
        </member>
        <member name="M:VC3.Util.SerializationUtil.Deserialize(System.Byte[])">
            <summary>
            Utility method for de-serializing objects into a binary format
            <seealso cref="M:VC3.Util.SerializationUtil.Serialize(System.Object)"/>
            </summary>
        </member>
        <member name="M:VC3.Util.SerializationUtil.SerializeBase64(System.Object,System.Runtime.Serialization.ISurrogateSelector)">
            <summary>
            Utility method for serializing objects into a base64 format.
            <seealso cref="M:VC3.Util.SerializationUtil.DeserializeBase64(System.String,System.Runtime.Serialization.ISurrogateSelector)"/>.  Null object references will 
            be serialized correctly without causing an exception.
            </summary>
        </member>
        <member name="M:VC3.Util.SerializationUtil.SerializeBase64(System.Object)">
            <summary>
            Utility method for serializing objects into a base64 format.
            <seealso cref="M:VC3.Util.SerializationUtil.DeserializeBase64(System.String)"/>.  Null object references will 
            be serialized correctly without causing an exception.
            </summary>
        </member>
        <member name="M:VC3.Util.SerializationUtil.DeserializeBase64(System.String,System.Runtime.Serialization.ISurrogateSelector)">
            <summary>
            Utility method for de-serializing objects from a base64 format.
            <seealso cref="M:VC3.Util.SerializationUtil.SerializeBase64(System.Object,System.Runtime.Serialization.ISurrogateSelector)"/>. Null object references will 
            be deserialized correctly without causing an exception.
            </summary>
        </member>
        <member name="M:VC3.Util.SerializationUtil.DeserializeBase64(System.String)">
            <summary>
            Utility method for de-serializing objects from a base64 format.
            <seealso cref="M:VC3.Util.SerializationUtil.SerializeBase64(System.Object)"/>. Null object references will 
            be deserialized correctly without causing an exception.
            </summary>
        </member>
        <member name="M:VC3.Util.SerializationUtil.SerializeXml(System.Object,System.Text.Encoding)">
            <summary>
            Serializes object into an XML format.  Provides special handling
            for when <paramref name="o"/> is an IDictionary b/c IDictionary objects
            are not handled by the <see cref="T:System.Xml.Serialization.XmlSerializer"/> .
            </summary>
            <param name="o">object to serialize</param>
            <returns>XML string representing the object</returns>
        </member>
        <member name="M:VC3.Util.SerializationUtil.SerializeXml(System.Object)">
            <summary>
            Serializes object into an XML format.  Provides special handling
            for when <paramref name="o"/> is an IDictionary b/c IDictionary objects
            are not handled by the <see cref="T:System.Xml.Serialization.XmlSerializer"/> .
            </summary>
            <param name="o">object to serialize</param>
            <returns>XML string representing the object</returns>
        </member>
        <member name="M:VC3.Util.SerializationUtil.DeserializeXml(System.String,System.Type,System.Text.Encoding)">
            <summary>
            Deserializes XML.  Provides special handling
            for when data is an IDictionary b/c IDictionary objects
            are not handled by the <see cref="T:System.Xml.Serialization.XmlSerializer"/> .
            </summary>
            <param name="data">XML string representing the object to deserialize</param>
            <param name="objectType">Expected object type to return</param>
            <returns>Deserialized object</returns>
        </member>
        <member name="M:VC3.Util.SerializationUtil.DeserializeXml(System.String,System.Type)">
            <summary>
            Deserializes XML.  Provides special handling
            for when data is an IDictionary b/c IDictionary objects
            are not handled by the <see cref="T:System.Xml.Serialization.XmlSerializer"/> .
            </summary>
            <param name="data">XML string representing the object to deserialize</param>
            <param name="objectType">Expected object type to return</param>
            <returns>Deserialized object</returns>
        </member>
        <member name="M:VC3.Util.SerializationUtil.SerializeFile(System.String,System.Object,System.Runtime.Serialization.ISurrogateSelector)">
            <summary>
            Utility method for serializing objects into a binary format to a file.
            <seealso cref="M:VC3.Util.SerializationUtil.DeserializeFile(System.String,System.Runtime.Serialization.ISurrogateSelector)"/>
            </summary>
        </member>
        <member name="M:VC3.Util.SerializationUtil.SerializeFile(System.String,System.Object)">
            <summary>
            Utility method for serializing objects into a binary format to a file.
            <seealso cref="M:VC3.Util.SerializationUtil.DeserializeFile(System.String)"/>
            </summary>
        </member>
        <member name="M:VC3.Util.SerializationUtil.DeserializeFile(System.String,System.Runtime.Serialization.ISurrogateSelector)">
            <summary>
            Utility method for de-serializing objects in a binary format from a file.
            <seealso cref="M:VC3.Util.SerializationUtil.SerializeFile(System.String,System.Object,System.Runtime.Serialization.ISurrogateSelector)"/>
            </summary>
        </member>
        <member name="M:VC3.Util.SerializationUtil.DeserializeFile(System.String)">
            <summary>
            Utility method for de-serializing objects in a binary format from a file.
            <seealso cref="M:VC3.Util.SerializationUtil.SerializeFile(System.String,System.Object)"/>
            </summary>
        </member>
        <member name="M:VC3.Util.SerializationUtil.MakeSerializable(System.Delegate)">
            <summary>
            Removes non-public method targets from a delegate so that they
            can be safely serialized.
            </summary>
            <param name="d">The multicast or singlecast delegate to process</param>
            <returns>A delegate with only the public methods or null if all methods are non-public</returns>
        </member>
        <member name="M:VC3.Util.SerializationUtil.EnableCyclicalReferences(System.Runtime.Serialization.ISerializationSurrogate)">
            <summary>
            Wraps an ISerializationSurrogate surrogate with special one to enable cyclical references during serialization
            if hotfix http://support.microsoft.com/kb/931634, or later is installed.  Wrapping the surrogate
            should fix the "The object with ID X was referenced in a fixup but does not exist." error that occurs during
            deserialization.
            </summary>
        </member>
        <member name="T:VC3.Text.PropertyReflectorMatchEvaluator">
            <summary>
            Replaces regular expressions matches
            based of the results of expressions evaulated against
            an object.
            </summary>
        </member>
        <member name="M:VC3.Text.PropertyReflectorMatchEvaluator.Create(System.Object)">
            <summary>
            Creates a MatchEvaluator that will replaces regular expression matches
            based of the results of expressions evaulated against the object specified.
            </summary>
            <param name="source">Object the matches will be evaluated against</param>
        </member>
        <member name="M:VC3.Text.PropertyReflectorMatchEvaluator.Create(System.Object,System.String)">
            <summary>
            Creates a MatchEvaluator that will replaces regular expression matches
            based of the results of expressions evaulated against the object specified.
            </summary>
            <param name="source">Object the matches will be evaluated against</param>
            <param name="rootExpression">Expression that resolves to the source object.</param>
        </member>
        <member name="T:VC3.Text.TemplateEvaluator">
            <summary>
            Summary description for TemplateEvaluator.
            </summary>
        </member>
        <member name="M:VC3.Text.TemplateEvaluator.Eval(System.String)">
            <summary>
            Performs the substitution of tokens on the template argument
            </summary>
            <param name="template"></param>
            <returns></returns>
        </member>
        <member name="M:VC3.Text.TemplateEvaluator.Eval(System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Performs the substitution of tokens on the template argument.
            </summary>
            <param name="template">The template to perform the substitution on</param>
            <param name="tokens">The tokens to subsitute with</param>
            <returns>The template string with tokens replaced</returns>
        </member>
        <member name="M:VC3.Text.TemplateEvaluator.Eval(System.String,System.Text.RegularExpressions.MatchEvaluator)">
            <summary>
            Performs the substitution of tokens on the template argument.
            </summary>
            <param name="template">The template to perform the substitution on</param>
            <param name="evaluator">The evalurator used to subsitute token values</param>
            <returns>The template string with tokens replaced</returns>
        </member>
        <member name="M:VC3.Text.TemplateEvaluator.GetMatchContent(System.Text.RegularExpressions.Match)">
            <summary>
            Extracts the content, sans delimiters, from a match within the template.
            </summary>
        </member>
        <member name="P:VC3.Text.TemplateEvaluator.StartDelimiter">
            <summary>
            Gets or sets the start delimiter used by the parser. 
            </summary>
        </member>
        <member name="P:VC3.Text.TemplateEvaluator.EndDelimiter">
            <summary>
            Gets or sets the end delimiter used by the parser. 
            </summary>
        </member>
        <member name="P:VC3.Text.TemplateEvaluator.Mode">
            <summary>
            Gets or sets the output mode used by the parser. 
            </summary>
        </member>
        <member name="M:VC3.Security.Cryptography.GnuPG.GnuPGProxyException.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="message">error message associated with exception</param>
        </member>
        <member name="T:VC3.Security.Authentication.AuthenticationModule">
            <summary>
            Summary description for AuthenticationHandler.
            </summary>
        </member>
        <member name="M:VC3.Security.Authentication.AuthenticationModule.SignIn(System.String,System.String,System.String)">
            <summary>
            Verifies the username and password combination, establishes
            an authenticated session for the user, and redirects the user
            to the page they intended to access.
            </summary>
            <param name="username">The user to sign in</param>
            <param name="password">The user's password</param>
            <param name="defaultRedirectUrl">The default url to redirect to if user requested the current not via a redirect</param>
            <remarks>
            If the user cannot be signed in, the authentication event handler
            should throw a AuthenticationException with an applicable error message.  
            
            If the user's password has expired, a PasswordExpiredException should
            be thrown to notify the application that the user needs to change their
            password.
            </remarks>
        </member>
        <member name="M:VC3.Security.Authentication.AuthenticationModule.OnAuthenticate(System.Object,System.Web.Security.FormsAuthenticationEventArgs)">
            <summary>
            Authenticates the current user, passes user information
            to the Authenticate event handler, and renews the forms
            authentication ticket.
            </summary>
            <param name="sender">The sender of the authentication event</param>
            <param name="args">The authentication arguments</param>
        </member>
        <member name="M:VC3.Security.Authentication.AuthenticationModule.SignOut">
            <summary>
            Immediately ends the user's authenticated session.
            </summary>
        </member>
        <member name="P:VC3.Security.Authentication.AuthenticationModule.Timeout">
            <summary>
            Exposes the forms authentication timeout setting
            </summary>
        </member>
        <member name="T:VC3.Net.Mail">
            <summary>
            Simple class for sending mail through an Smtp Server.
            will come from.
            </summary>
            <remarks>
            This class assumes that if the Smtp Server field is not supplied before a call to SendEmail is called that 
            the configuration is stored in the app.config file. The configuration keys are expected to be in the AppConfig 
            node. The supported keys are :
            1. "SmtpMail.SmtpServer" = The address:port of the Smtp Server to forward Emails to for sending. If port not specified, default port 25 is used.
            2. "SmtpMail.DebugMailTo" = a valid address to override the To: address of all emails with. If this value is set in the app.config 
            	then all emails will be sent to this address instead of the normally expected address.
            3. "SmtpMail.Encoding" = the encoding type for all email messages. If not set, then the type defaults to Encoding.ASCII.
            4. "SmtpMail.BodyFormat" = the body format for all email messages. If not set, then the format defaults to MailFormat.Text.
            5. "SmtpMail.FromAddress" = value overrides the from address passed in to the SendMail function.
            </remarks>
        </member>
        <member name="M:VC3.Net.Mail.#ctor">
            <summary>
            Class only exposes static public methods. No functionality is provided on an instance of this object.
            </summary>
        </member>
        <member name="M:VC3.Net.Mail.SendMail(System.String,System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Sends an individual email.
            </summary>
            <param name="to">The To Address for the email.  Comma, semi-colon, and space delimited lists are allowed (these are allowed formats of the EmailListAttribute).</param>
            <param name="bcc">The Blind Carbon Copy Address for the email.</param>
            <param name="subject">The Subject for the email.</param>
            <param name="from">The From Address for the email. If null, the to address is used.</param>
            <param name="message">The Message for the email.</param>
            <param name="throwErrors">Flag specifying whether or not to throw an error if the mail could not be delivered.</param>
        </member>
        <member name="M:VC3.Net.Mail.SendMailAsync(System.String,System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Sends an individual email async.
            </summary>
            <param name="to">The To Address for the email.  Comma, semi-colon, and space delimited lists are allowed (these are allowed formats of the EmailListAttribute).</param>
            <param name="bcc">The Blind Carbon Copy Address for the email.</param>
            <param name="subject">The Subject for the email.</param>
            <param name="from">The From Address for the email. If null, the to address is used.</param>
            <param name="message">The Message for the email.</param>
            <param name="throwErrors">Flag specifying whether or not to throw an error if the mail could not be delivered.</param>
        </member>
        <member name="M:VC3.Net.Mail.SendMail(System.String,System.String,System.String,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Sends an individual email.
            </summary>
            <param name="to">The To Address for the email.  Comma, semi-colon, and space delimited lists are allowed (these are allowed formats of the EmailListAttribute).</param>
            <param name="bcc">The Blind Carbon Copy Address for the email.</param>
            <param name="subject">The Subject for the email.</param>
            <param name="from">The From Address for the email. If null, the to address is used.</param>
            <param name="message">The Message for the email.</param>
            <param name="throwErrors">Flag specifying whether or not to throw an error if the mail could not be delivered.</param>
            <param name="useHtmlFormatting">Indicates whether to format the message as HTML or Text</param>
        </member>
        <member name="M:VC3.Net.Mail.SendMail(System.String,System.String,System.String,System.String,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Sends an individual email.
            </summary>
            <param name="to">The To Address for the email.  Comma, semi-colon, and space delimited lists are allowed (these are allowed formats of the EmailListAttribute).</param>
            <param name="cc">The Carbon Copy Address for the email.</param>
            <param name="bcc">The Blind Carbon Copy Address for the email.</param>
            <param name="subject">The Subject for the email.</param>
            <param name="from">The From Address for the email. If null, the to address is used.</param>
            <param name="message">The Message for the email.</param>
            <param name="throwErrors">Flag specifying whether or not to throw an error if the mail could not be delivered.</param>
            <param name="useHtmlFormatting">Indicates whether to format the message as HTML or Text</param>
        </member>
        <member name="M:VC3.Net.Mail.SendMail(System.Collections.ICollection,System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Sends an email to a collection of addresses.
            </summary>
            <param name="to">A collection of addresses to send the email to.</param>
            <param name="bcc">The Blind Carbon Copy Address for the email.</param>
            <param name="subject">The Subject for the email.</param>
            <param name="from">The From Address for the email. If null, the to address is used.</param>
            <param name="message">The Message for the email.</param>
            <param name="throwErrors">Flag specifying whether or not to throw an error if the mail could not be delivered.</param>
        </member>
        <member name="M:VC3.Net.Mail.SendMail(System.Collections.ICollection,System.String,System.String,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Sends an email to a collection of addresses.
            </summary>
            <param name="to">A collection of addresses to send the email to.</param>
            <param name="bcc">The Blind Carbon Copy Address for the email.</param>
            <param name="subject">The Subject for the email.</param>
            <param name="from">The From Address for the email. If null, the to address is used.</param>
            <param name="message">The Message for the email.</param>
            <param name="throwErrors">Flag specifying whether or not to throw an error if the mail could not be delivered.</param>
            <param name="useHtmlFormatting">Indicates whether to format the message as HTML or Text</param>
        </member>
        <member name="M:VC3.Net.Mail.SendMail(System.String,System.String,System.String,System.String,System.String,System.Collections.Specialized.NameValueCollection,System.Boolean)">
            <summary>
            Sends an individual email using a parameterized message.
            </summary>
            <param name="to">The To Address for the email.  Comma, semi-colon, and space delimited lists are allowed (these are allowed formats of the EmailListAttribute).</param>
            <param name="bcc">The Blind Carbon Copy Address for the email.</param>
            <param name="subject">The Subject for the email.</param>
            <param name="from">The From Address for the email. If null, the to address is used.</param>
            <param name="message">The Message for the email.</param>
            <param name="tokens">A <see cref="T:System.Collections.Specialized.NameValueCollection"/> of tokens and their values to use in evaluating the parameterized subject and message.</param>
            <param name="throwErrors">Flag specifying whether or not to throw an error if the mail could not be delivered.</param>
        </member>
        <member name="M:VC3.Net.Mail.SendMail(System.String,System.String,System.String,System.String,System.String,System.Collections.Specialized.NameValueCollection,System.Boolean,System.Boolean)">
            <summary>
            Sends an individual email using a parameterized message.
            </summary>
            <param name="to">The To Address for the email.  Comma, semi-colon, and space delimited lists are allowed (these are allowed formats of the EmailListAttribute).</param>
            <param name="bcc">The Blind Carbon Copy Address for the email.</param>
            <param name="subject">The Subject for the email.</param>
            <param name="from">The From Address for the email. If null, the to address is used.</param>
            <param name="message">The Message for the email.</param>
            <param name="tokens">A <see cref="T:System.Collections.Specialized.NameValueCollection"/> of tokens and their values to use in evaluating the parameterized subject and message.</param>
            <param name="throwErrors">Flag specifying whether or not to throw an error if the mail could not be delivered.</param>
        </member>
        <member name="M:VC3.Net.Mail.SendMail(System.Net.Mail.MailMessage)">
            <summary>
            Sends an email message via <see cref="M:System.Net.Mail.SmtpClient.Send(System.Net.Mail.MailMessage)"/> using the
            SMTP server specified in the .config file.
            </summary>
            <param name="mail">The mail message to send</param>
        </member>
        <member name="M:VC3.Net.Mail.SendMail(System.Net.Mail.MailMessage,System.Boolean)">
            <summary>
            Sends an email message  via <see cref="M:System.Net.Mail.SmtpClient.SendAsync(System.Net.Mail.MailMessage,System.Object)"/> using the
            SMTP server specified in the .config file.
            </summary>
            <param name="mail">The mail message to send</param>
            <param name="async">Whether or not to send the message async. or not.</param>
        </member>
        <member name="T:VC3.Net.MailSettings">
            <summary>
            Mail settings that can be used by the application
            </summary>
        </member>
        <member name="M:VC3.Net.MailSettings.System#Configuration#IConfigurationSectionHandler#Create(System.Object,System.Object,System.Xml.XmlNode)">
            <summary>
            Reads the "authentication" configuration section.
            </summary>
            <returns>Settings object</returns>
        </member>
        <member name="P:VC3.Net.MailSettings.SmtpServer">
            <summary>
            Gets or sets the SMTP server to use to send email messages.
            </summary>
        </member>
        <member name="P:VC3.Net.MailSettings.DebugAddress">
            <summary>
            Gets or sets the debug address of the mail settings.
            </summary>
        </member>
        <member name="P:VC3.Net.MailSettings.FromAddress">
            <summary>
            Gets or sets the from address of the mail settings.
            </summary>
        </member>
        <member name="P:VC3.Net.MailSettings.SmtpPort">
            <summary>
            Gets or sets the SMTP server to use to send email messages.
            </summary>
        </member>
        <member name="P:VC3.Net.MailSettings.Username">
            <summary>
            Gets or sets the username to send to the SMTP server if authentication is required.
            WARNING the username is sent in clear text
            </summary>
        </member>
        <member name="P:VC3.Net.MailSettings.Password">
            <summary>
            Gets or sets the password to send to the SMTP server if authentication is required.
            WARNING the password is sent in clear text
            </summary>
        </member>
        <member name="P:VC3.Net.MailSettings.Domain">
            <summary>
            Gets or sets the password to send to the SMTP server if authentication is required.
            WARNING the domain is sent in clear text
            </summary>
        </member>
        <member name="P:VC3.Net.MailSettings.Current">
            <summary>
            Returns the current settings
            </summary>
        </member>
        <member name="T:VC3.Net.MailSettings.ConfigFileProvider">
            <summary>
            Provides a IMailSettingsProvider from settings read from the
            application configuration file.
            </summary>
        </member>
        <member name="T:VC3.Net.IMailSettingsProvider">
            <summary>
            Interface for exposing a mail settings
            supported by an application.
            </summary>
        </member>
        <member name="M:VC3.Net.IMailSettingsProvider.GetSettings">
            <summary>
            Gets the mail settings for this application
            </summary>
            <returns></returns>
        </member>
        <member name="M:VC3.Net.MailSettings.ConfigFileProvider.GetSettings">
            <summary>
            Gets a MailSettings object
            </summary>
            <returns></returns>
        </member>
        <member name="T:VC3.Net.SmtpMailException">
            <summary>
            Exception that exposes a Collection of addresses that failed to successfully 
            be delivered.
            </summary>
        </member>
        <member name="P:VC3.Net.SmtpMailException.AddressList">
            <summary>
            Collection of failed email addresses.
            </summary>
        </member>
        <member name="T:VC3.IO.TranslationContext">
            <summary>
            Holds the translated value
            </summary>
        </member>
        <member name="T:VC3.IO.DataFileTranslationContext">
            <summary>
            Translation context for a data
            </summary>
        </member>
        <member name="T:VC3.IO.TranslationException">
            <summary>
            Thrown when an translation cannot be performed.
            </summary>
        </member>
        <member name="T:VC3.IO.Translator">
            <summary>
            Translates a value
            </summary>
        </member>
        <member name="M:VC3.IO.Translator.Translate(System.Object,VC3.IO.TranslationContext)">
            <summary>
            Translates a value
            </summary>
        </member>
        <member name="T:VC3.IO.TranslatorChain">
            <summary>
            Runs a list of translators
            </summary>
        </member>
        <member name="T:VC3.IO.TranslatorChain.Compiler">
            <summary>
            Compiles a TranslatorChain
            </summary>
        </member>
        <member name="T:VC3.IO.TranslatorCompiler">
            <summary>
            Creates a <see cref="T:VC3.IO.Translator"/> based on source text
            </summary>
        </member>
        <member name="M:VC3.IO.TranslatorChain.Compiler.GetCompiler(System.String)">
            <summary>
            Gets a compiler for the specified function
            </summary>
        </member>
        <member name="T:VC3.IO.MapTranslator">
            <summary>
            Translates values based on a mapping table
            </summary>
        </member>
        <member name="T:VC3.IO.ReplaceTranslator">
            <summary>
            Replaces a string value based on a regular expression
            </summary>
        </member>
        <member name="T:VC3.IO.ValidateTranslator">
            <summary>
            Validates a value based on a regular expression
            </summary>
        </member>
        <member name="T:VC3.IO.EvalTranslator">
            <summary>
            Calculates a numeric expression
            </summary>
        </member>
        <member name="T:VC3.IO.BooleanExpression">
            <summary>
            Used to parse simple boolean expressions. 'and', 'or', 'true', 'false', '(' and ')' can appear in the expression.
            </summary>
        </member>
        <member name="M:VC3.IO.BooleanExpression.Eval(VC3.IO.TranslationContext)">
            <summary>
            Evaluates the expression against the optional translation context
            </summary>
        </member>
        <member name="M:VC3.IO.BooleanExpression.Parse(System.String)">
            <summary>
            Compiles a boolean expression from a string
            </summary>
        </member>
        <member name="M:VC3.IO.BooleanExpression.Tokenize(System.String)">
            <summary>
            Splits input string into tokens
            </summary>
        </member>
        <member name="M:VC3.IO.BooleanExpression.SubExpressionTokens(System.Collections.Generic.IEnumerator{System.String})">
            <summary>
            Extracts a set of tokens within a set of parens.
            </summary>
        </member>
        <member name="M:VC3.IO.BooleanExpression.Expression(System.Collections.Generic.IEnumerator{System.String})">
            <summary>
            Parses an expression
            </summary>
        </member>
        <member name="M:VC3.IO.BooleanExpression.Element(System.Collections.Generic.IEnumerator{System.String})">
            <summary>
            Parses an element: literal or sub-expression
            </summary>
        </member>
        <member name="T:VC3.IO.TranslatorNameAttribute">
            <summary>
            Assigns a function name to a <see cref="T:VC3.IO.TranslatorCompiler"/>
            </summary>
        </member>
        <member name="P:VC3.IO.TranslatorNameAttribute.FunctionName">
            <summary>
            The name of the function to compile
            </summary>
        </member>
        <member name="T:VC3.IO.TranslatorCompilerException">
            <summary>
            Represents an error that occurs during compilation of a <see cref="T:VC3.IO.Translator"/>
            </summary>
        </member>
        <member name="T:VC3.Text.DoubleMetaphone">
            <summary>Implements the Double Metaphone phonetic matching algorithm published
                by Lawrence Phillips in June 2000 C/C++ Users Journal. 
            
                Optimized and ported to C# by Adam Nelson (anelson@nullpointer.net)
            </summary>
        </member>
        <member name="F:VC3.Text.DoubleMetaphone.m_primaryKey">
            StringBuilders used to construct the keys
        </member>
        <member name="F:VC3.Text.DoubleMetaphone.m_alternateKey">
            StringBuilders used to construct the keys
        </member>
        <member name="F:VC3.Text.DoubleMetaphone.m_primaryKeyString">
            Actual keys, populated after construction
        </member>
        <member name="F:VC3.Text.DoubleMetaphone.m_alternateKeyString">
            Actual keys, populated after construction
        </member>
        <member name="F:VC3.Text.DoubleMetaphone.m_primaryKeyLength">
            Variables to track the key length w/o having to grab the .Length attr
        </member>
        <member name="F:VC3.Text.DoubleMetaphone.m_alternateKeyLength">
            Variables to track the key length w/o having to grab the .Length attr
        </member>
        <member name="F:VC3.Text.DoubleMetaphone.m_word">
            Working copy of the word, and the original word
        </member>
        <member name="F:VC3.Text.DoubleMetaphone.m_originalWord">
            Working copy of the word, and the original word
        </member>
        <member name="F:VC3.Text.DoubleMetaphone.m_length">
            Length and last valid zero-based index into word
        </member>
        <member name="F:VC3.Text.DoubleMetaphone.m_last">
            Length and last valid zero-based index into word
        </member>
        <member name="F:VC3.Text.DoubleMetaphone.m_hasAlternate">
            Flag indicating if an alternate metaphone key was computed for the word
        </member>
        <member name="M:VC3.Text.DoubleMetaphone.#ctor">
            <summary>Default ctor, initializes by computing the keys of an empty string,
                which are both empty strings</summary>
        </member>
        <member name="M:VC3.Text.DoubleMetaphone.#ctor(System.String)">
            <summary>Constructs a new DoubleMetaphone object, and initializes it with
                the metaphone keys for a given word</summary>
            
            <param name="word">Word with which to initialize the object.  Computes the metaphone keys
                of this word.</param>
        </member>
        <member name="M:VC3.Text.DoubleMetaphone.doubleMetaphone(System.String,System.String@,System.String@)">
            <summary>Static wrapper around the class, enables computation of metaphone keys
                without instantiating a class.</summary>
            
            <param name="word">Word whose metaphone keys are to be computed</param>
            <param name="primaryKey">Ref to var to receive primary metaphone key</param>
            <param name="alternateKey">Ref to var to receive alternate metaphone key, or be set to null if
                word has no alternate key by double metaphone</param>
        </member>
        <member name="M:VC3.Text.DoubleMetaphone.computeKeys(System.String)">
            <summary>Sets a new current word for the instance, computing the new word's metaphone
                keys</summary>
            
            <param name="word">New word to set to current word.  Discards previous metaphone keys,
                and computes new keys for this word</param>
        </member>
        <member name="M:VC3.Text.DoubleMetaphone.buildMetaphoneKeys">
            Internal impl of double metaphone algorithm.  Populates m_primaryKey and m_alternateKey.  Modified copy-past of
            Phillips' original code
        </member>
        <member name="M:VC3.Text.DoubleMetaphone.isWordSlavoGermanic">
            Returns true if m_word is classified as "slavo-germanic" by Phillips' algorithm
            
            @return true if word contains strings that Lawrence's algorithm considers indicative of
                    slavo-germanic origin; else false
        </member>
        <member name="M:VC3.Text.DoubleMetaphone.isVowel(System.Int32)">
            Returns true if letter at given position in word is a Roman vowel
            
            @param pos    Position at which to check for a vowel
            
            @return True if m_word[pos] is a Roman vowel, else false
        </member>
        <member name="M:VC3.Text.DoubleMetaphone.addMetaphoneCharacter(System.String)">
            Appends the given metaphone character to the primary and alternate keys
            
            @param primaryCharacter
                          Character to append
        </member>
        <member name="M:VC3.Text.DoubleMetaphone.addMetaphoneCharacter(System.String,System.String)">
            Appends a metaphone character to the primary, and a possibly different alternate,
            metaphone keys for the word.
            
            @param primaryCharacter
                          Primary character to append to primary key, and, if no alternate char is present,
                          the alternate key as well
            @param alternateCharacter
                          Alternate character to append to alternate key.  May be null or a zero-length string,
                          in which case the primary character will be appended to the alternate key instead
        </member>
        <member name="M:VC3.Text.DoubleMetaphone.areStringsAt(System.Int32,System.Int32,System.String[])">
            Tests if any of the strings passed as variable arguments are at the given start position and
            length within word
            
            @param start   Start position in m_word
            @param length  Length of substring starting at start in m_word to compare to the given strings
            @param strings params array of zero or more strings for which to search in m_word
            
            @return true if any one string in the strings array was found in m_word at the given position
                    and length
        </member>
        <member name="P:VC3.Text.DoubleMetaphone.PrimaryKey">
            <summary>The primary metaphone key for the current word</summary>
        </member>
        <member name="P:VC3.Text.DoubleMetaphone.AlternateKey">
            <summary>The alternate metaphone key for the current word, or null if the current
                word does not have an alternate key by Double Metaphone</summary>
        </member>
        <member name="P:VC3.Text.DoubleMetaphone.Word">
            <summary>Original word for which the keys were computed</summary>
        </member>
        <member name="T:VC3.Data.ExecuteEventArgs">
            <summary>
            Information about an <see cref="T:System.Data.IDbCommand"/> that is being executed.
            </summary>
        </member>
        <member name="T:VC3.Data.ExecuteEventHandler">
            <summary>
            Delegate for events relating to the execution of an <see cref="T:System.Data.IDbCommand"/>
            </summary>
        </member>
        <member name="T:VC3.Data.ExecutionType">
            <summary>
            Indicates the type of results that will be returned by
            an <see cref="T:System.Data.IDbCommand"/>.
            </summary>
        </member>
        <member name="T:VC3.Data.Datasource">
            <summary>
               Summary description for Datasource.
            </summary>
        </member>
        <member name="M:VC3.Data.Datasource.CreateCommand(System.String,System.String,System.String,VC3.Data.IDatasourceAdapter,VC3.Data.Datasource.TransactionInfo,System.Data.IDbDataParameter[])">
            <summary>
            Creates a command to execute a database command.
            </summary>
            <param name="connectionString">Identifies the database</param>
            <param name="sql">The command</param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:VC3.Data.Datasource.CreateCommand(System.String,System.String,System.String,VC3.Data.IDatasourceAdapter,System.Data.IDbDataParameter[])">
            <summary>
            Creates a command to execute a database command.
            </summary>
            <param name="connectionString">Identifies the database</param>
            <param name="sql">The command</param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:VC3.Data.Datasource.CreateCommand(System.String,System.String,System.String,System.Boolean,VC3.Data.IDatasourceAdapter,System.Data.IDbDataParameter[])">
            <summary>
            Creates a command to execute a database command.
            </summary>
            <param name="connectionString">Identifies the database</param>
            <param name="sql">The command</param>
            <param name="parameters"></param>
            <param name="joinTransaction">If true, command will configured to execute within the current transaction, if any.</param>
            <returns></returns>
        </member>
        <member name="M:VC3.Data.Datasource.CreateCommand(System.String,System.String,System.Data.IDbDataParameter[])">
            <summary>
            Creates a command to execute a database command.
            </summary>
            <param name="connectionString">Identifies the database</param>
            <param name="sql">The command</param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:VC3.Data.Datasource.CreateCommand(System.String,System.String,System.Boolean,System.Data.IDbDataParameter[])">
            <summary>
            Creates a command to execute a database command.
            </summary>
            <param name="connectionString">Identifies the database</param>
            <param name="sql">The command</param>
            <param name="joinTransaction">If true, command will configured to execute within the current transaction, if any.</param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:VC3.Data.Datasource.CreateCommand(System.String,System.String,System.String,System.Data.IDbDataParameter[])">
            <summary>
            Creates a command to execute a database command.
            </summary>
            <param name="connectionString">Identifies the database</param>
            <param name="sql">The command</param>
            <param name="scope">The scope to create the command in.  Different scopes cannot share the same transaction.</param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:VC3.Data.Datasource.CreateCommand(System.String,System.String,System.String,System.Boolean,System.Data.IDbDataParameter[])">
            <summary>
            Creates a command to execute a database command.
            </summary>
            <param name="connectionString">Identifies the database</param>
            <param name="sql">The command</param>
            <param name="joinTransaction">If true, command will configured to execute within the current transaction, if any.</param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:VC3.Data.Datasource.CreateCommand(System.String,System.String,System.String,System.String,System.Data.IDbDataParameter[])">
            <summary>
            Creates a command to execute a database command.
            </summary>
            <param name="connectionString">Identifies the database</param>
            <param name="sql">The command</param>
            <param name="scope">The scope to create the command in.  Different scopes cannot share the same transaction.</param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:VC3.Data.Datasource.CreateCommand(System.String,System.String,System.String,System.String,System.Boolean,System.Data.IDbDataParameter[])">
            <summary>
            Creates a command to execute a database command.
            </summary>
            <param name="connectionString">Identifies the database</param>
            <param name="sql">The command</param>
            <param name="scope">The scope to create the command in.  Different scopes cannot share the same transaction.</param>
            <param name="joinTransaction">If true, command will configured to execute within the current transaction, if any.</param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:VC3.Data.Datasource.CreateParameter(System.String,System.Object)">
            <summary>
            Creates a parameter with the specified name and value.
            </summary>
            <param name="name">The name of the parameter.</param>
            <param name="value">The value of the parameter.</param>
            <returns>An initialized parameter.</returns>
        </member>
        <member name="M:VC3.Data.Datasource.CreateParameter(System.String,System.Data.DbType,System.Object)">
            <summary>
            Creates a parameter with the specified name and value.
            </summary>
            <param name="name">The name of the parameter.</param>
            <param name="type">The type of the parameter.</param>
            <param name="value">The value of the parameter.</param>
            <returns>An initialized parameter.</returns>
        </member>
        <member name="M:VC3.Data.Datasource.CreateParameter(System.String,System.Data.DbType,System.Int32,System.Object)">
            <summary>
            Creates a parameter with the specified name and value.
            </summary>
            <param name="name">The name of the parameter.</param>
            <param name="type">The type of the parameter.</param>
            <param name="size">The size of the parameter if the type is variable length.</param>
            <param name="value">The value of the parameter.</param>
            <returns>An initialized parameter.</returns>
        </member>
        <member name="M:VC3.Data.Datasource.CreateParameter(System.String,System.Data.DbType,System.Int32,System.Data.ParameterDirection,System.Byte,System.Byte,System.Object)">
            <summary>
            Creates a parameter with the specified name and value.
            </summary>
            <param name="name">The name of the parameter.</param>
            <param name="type">The type of the parameter.</param>
            <param name="size">The size of the parameter if the type is variable length.</param>
            <param name="direction">The direction of the parameter: In, Out, InOut, Return.</param>
            <param name="precision">The precision of the parameter if numeric.</param>
            <param name="scale">The scale of the parameter if numeric.</param>
            <param name="value">The value of the parameter.</param>
            <returns>An initialized parameter.</returns>
        </member>
        <member name="M:VC3.Data.Datasource.CreateParameter(System.String,VC3.Data.IDatasourceAdapter,System.Data.DbType,System.Int32,System.Data.ParameterDirection,System.Byte,System.Byte,System.Object)">
            <summary>
            Creates a parameter with the specified name and value.
            </summary>
            <param name="name">The name of the parameter.</param>
            <param name="type">The type of the parameter.</param>
            <param name="size">The size of the parameter if the type is variable length.</param>
            <param name="direction">The direction of the parameter: In, Out, InOut, Return.</param>
            <param name="precision">The precision of the parameter if numeric.</param>
            <param name="scale">The scale of the parameter if numeric.</param>
            <param name="value">The value of the parameter.</param>
            <returns>An initialized parameter.</returns>
        </member>
        <member name="M:VC3.Data.Datasource.ExecuteView(System.String,System.String,System.Int32,System.Data.IDbDataParameter[])">
            <summary>
            Executes the specified parameterized sql statement or stored procedure.
            </summary>
            <param name="connectionString">The connection string of the database to query.</param>
            <param name="sql">A parameterized sql statement or stored procedure name.</param>
            <param name="timeout">The time in seconds to wait before terminating the command.</param>
            <param name="parameters">Optional array of parameters created using CreateParameter().</param>
            <returns>A DataView containing the query results.</returns>
        </member>
        <member name="M:VC3.Data.Datasource.ExecuteView(System.String,System.String,System.Data.IDbDataParameter[])">
            <summary>
            Executes the specified parameterized sql statement or stored procedure.
            </summary>
            <param name="connectionString">The connection string of the database to query.</param>
            <param name="sql">A parameterized sql statement or stored procedure name.</param>
            <param name="parameters">Optional array of parameters created using CreateParameter().</param>
            <returns>A DataView containing the query results.</returns>
        </member>
        <member name="M:VC3.Data.Datasource.ExecuteView(System.String,System.String,System.Boolean,System.Data.IDbDataParameter[])">
            <summary>
            Executes the specified parameterized sql statement or stored procedure.
            </summary>
            <param name="connectionString">The connection string of the database to query.</param>
            <param name="sql">A parameterized sql statement or stored procedure name.</param>
            <param name="joinTransaction">If true, command will configured to execute within the current transaction, if any.</param>
            <param name="parameters">Optional array of parameters created using CreateParameter().</param>
            <returns>A DataView containing the query results.</returns>
        </member>
        <member name="M:VC3.Data.Datasource.ExecuteView(System.String,System.String,System.String,System.Data.IDbDataParameter[])">
            <summary>
            Executes the specified parameterized sql statement or stored procedure.
            </summary>
            <param name="connectionString">The connection string of the database to query.</param>
            <param name="sql">A parameterized sql statement or stored procedure name.</param>
            <param name="scope">The scope to execute the command in.  Different scopes cannot share the same transaction.</param>
            <param name="parameters">Optional array of parameters created using CreateParameter().</param>
            <returns>A DataView containing the query results.</returns>
        </member>
        <member name="M:VC3.Data.Datasource.ExecuteView(System.String,System.String,System.String,System.Object)">
            <summary>
            Executes the specified parameterized sql statement or stored procedure.
            </summary>
            <param name="connectionString">The connection string of the database to query.</param>
            <param name="sql">A parameterized sql statement or stored procedure name.</param>
            <param name="param1">The name of the first parameter.</param>
            <param name="value1">The value of the first parameter.</param>
            <returns>A DataView containing the query results.</returns>
        </member>
        <member name="M:VC3.Data.Datasource.ExecuteView(System.String,System.String,System.String,System.Object,System.String,System.Object)">
            <summary>
            Executes the specified parameterized sql statement or stored procedure.
            </summary>
            <param name="connectionString">The connection string of the database to query.</param>
            <param name="sql">A parameterized sql statement or stored procedure name.</param>
            <param name="param1">The name of the first parameter.</param>
            <param name="value1">The value of the first parameter.</param>
            <param name="param2">The name of the second parameter.</param>
            <param name="value2">The value of the second parameter.</param>
            <returns>A DataView containing the query results.</returns>
        </member>
        <member name="M:VC3.Data.Datasource.ExecuteView(System.String,System.String,System.String,System.Object,System.String,System.Object,System.String,System.Object)">
            <summary>
            Executes the specified parameterized sql statement or stored procedure.
            </summary>
            <param name="connectionString">The connection string of the database to query.</param>
            <param name="sql">A parameterized sql statement or stored procedure name.</param>
            <param name="param1">The name of the first parameter.</param>
            <param name="value1">The value of the first parameter.</param>
            <param name="param2">The name of the second parameter.</param>
            <param name="value2">The value of the second parameter.</param>
            <param name="param3">The name of the third parameter.</param>
            <param name="value3">The value of the third parameter.</param>
            <returns>A DataView containing the query results.</returns>
        </member>
        <member name="M:VC3.Data.Datasource.ExecuteView(System.String,System.String,System.String,System.Object,System.String,System.Object,System.String,System.Object,System.String,System.Object)">
            <summary>
            Executes the specified parameterized sql statement or stored procedure.
            </summary>
            <param name="connectionString">The connection string of the database to query.</param>
            <param name="sql">A parameterized sql statement or stored procedure name.</param>
            <param name="param1">The name of the first parameter.</param>
            <param name="value1">The value of the first parameter.</param>
            <param name="param2">The name of the second parameter.</param>
            <param name="value2">The value of the second parameter.</param>
            <param name="param3">The name of the third parameter.</param>
            <param name="value3">The value of the third parameter.</param>
            <param name="param4">The name of the forth parameter.</param>
            <param name="value4">The value of the forth parameter.</param>
            <returns>A DataView containing the query results.</returns>
        </member>
        <member name="M:VC3.Data.Datasource.ExecuteView(System.String,System.String,System.String,System.Object,System.String,System.Object,System.String,System.Object,System.String,System.Object,System.String,System.Object)">
            <summary>
            Executes the specified parameterized sql statement or stored procedure.
            </summary>
            <param name="connectionString">The connection string of the database to query.</param>
            <param name="sql">A parameterized sql statement or stored procedure name.</param>
            <param name="param1">The name of the first parameter.</param>
            <param name="value1">The value of the first parameter.</param>
            <param name="param2">The name of the second parameter.</param>
            <param name="value2">The value of the second parameter.</param>
            <param name="param3">The name of the third parameter.</param>
            <param name="value3">The value of the third parameter.</param>
            <param name="param4">The name of the forth parameter.</param>
            <param name="value4">The value of the forth parameter.</param>
            <param name="param5">The name of the fifth parameter.</param>
            <param name="value5">The value of the fifth parameter.</param>
            <returns>A DataView containing the query results.</returns>
        </member>
        <member name="M:VC3.Data.Datasource.ExecuteBatches(System.String,System.String)">
            <summary>
            Executes a multi-batch sql script.  Batches are seperated by "\nGO\n".
            </summary>
            <param name="connectionString">The connection string of the database to query.</param>
            <param name="sql">A sql batch statement.</param>
        </member>
        <member name="M:VC3.Data.Datasource.ExecuteBatches(System.String,System.String,System.Int32)">
            <summary>
            Executes a multi-batch sql script.  Batches are seperated by "\nGO\n".
            </summary>
            <param name="connectionString">The connection string of the database to query.</param>
            <param name="sql">A sql batch statement.</param>
            <param name="timeout">The command timeout in seconds.</param>
        </member>
        <member name="M:VC3.Data.Datasource.ExecuteBatches(System.String,System.String,System.Int32,System.Boolean)">
            <summary>
            Executes a multi-batch sql script.  Batches are seperated by "\nGO\n".
            </summary>
            <param name="connectionString">The connection string of the database to query.</param>
            <param name="sql">A sql batch statement.</param>
            <param name="timeout">The command timeout in seconds.</param>
            <param name="joinTransaction">If true, batches will be executed within the existing, if any.</param>
        </member>
        <member name="M:VC3.Data.Datasource.ExecuteBatches(System.String,System.String,System.Int32,System.String)">
            <summary>
            Executes a multi-batch sql script.  Batches are seperated by "\nGO\n".
            </summary>
            <param name="connectionString">The connection string of the database to query.</param>
            <param name="sql">A sql batch statement.</param>
            <param name="timeout">The command timeout in seconds.</param>
            <param name="scope">The scope to execute the command in.  Different scopes cannot share the same transaction.</param>
        </member>
        <member name="M:VC3.Data.Datasource.ExecuteBatches(System.String,System.String,System.Int32,System.String,System.Boolean)">
            <summary>
            Executes a multi-batch sql script.  Batches are seperated by "\nGO\n".
            </summary>
            <param name="connectionString">The connection string of the database to query.</param>
            <param name="sql">A sql batch statement.</param>
            <param name="timeout">The command timeout in seconds.</param>
            <param name="scope">The scope to execute the command in.  Different scopes cannot share the same transaction.</param>
            <param name="joinTransaction">Indicates whether or not to attempt to join a transaction</param>
        </member>
        <member name="M:VC3.Data.Datasource.ExecuteReader(System.String,System.String,System.Int32,System.Data.IDbDataParameter[])">
            <summary>
            Executes the specified parameterized sql statement or stored procedure.
            </summary>
            <param name="connectionString">The connection string of the database to query.</param>
            <param name="sql">A parameterized sql statement or stored procedure name.</param>
            <param name="timeout">The time in seconds to wait before terminating the command.</param>
            <param name="parameters">Optional array of parameters created using CreateParameter().</param>
            <returns>An IDataReader containing the query results.</returns>
        </member>
        <member name="M:VC3.Data.Datasource.ExecuteReader(System.String,System.String,System.Data.IDbDataParameter[])">
            <summary>
            Executes the specified parameterized sql statement or stored procedure.
            </summary>
            <param name="connectionString">The connection string of the database to query.</param>
            <param name="sql">A parameterized sql statement or stored procedure name.</param>
            <param name="parameters">Optional array of parameters created using CreateParameter().</param>
            <returns>An IDataReader containing the query results.</returns>
        </member>
        <member name="M:VC3.Data.Datasource.ExecuteReader(System.String,System.String,System.Boolean,System.Data.IDbDataParameter[])">
            <summary>
            Executes the specified parameterized sql statement or stored procedure.
            </summary>
            <param name="connectionString">The connection string of the database to query.</param>
            <param name="sql">A parameterized sql statement or stored procedure name.</param>
            <param name="joinTransaction">If true, command will configured to execute within the current transaction, if any.</param>
            <param name="parameters">Optional array of parameters created using CreateParameter().</param>
            <returns>An IDataReader containing the query results.</returns>
        </member>
        <member name="M:VC3.Data.Datasource.ExecuteReader(System.String,System.String,System.String,System.Data.IDbDataParameter[])">
            <summary>
            Executes the specified parameterized sql statement or stored procedure.
            </summary>
            <param name="connectionString">The connection string of the database to query.</param>
            <param name="sql">A parameterized sql statement or stored procedure name.</param>
            <param name="scope">The scope to execute the command in.  Different scopes cannot share the same transaction.</param>
            <param name="parameters">Optional array of parameters created using CreateParameter().</param>
            <returns>An IDataReader containing the query results.</returns>
        </member>
        <member name="M:VC3.Data.Datasource.ExecuteReader(System.String,System.String,System.String,System.Object)">
            <summary>
            Executes the specified parameterized sql statement or stored procedure.
            </summary>
            <param name="connectionString">The connection string of the database to query.</param>
            <param name="sql">A parameterized sql statement or stored procedure name.</param>
            <param name="param1">The name of the first parameter.</param>
            <param name="value1">The value of the first parameter.</param>
            <returns>An IDataReader containing the query results.</returns>
        </member>
        <member name="M:VC3.Data.Datasource.ExecuteReader(System.String,System.String,System.String,System.Object,System.String,System.Object)">
            <summary>
            Executes the specified parameterized sql statement or stored procedure.
            </summary>
            <param name="connectionString">The connection string of the database to query.</param>
            <param name="sql">A parameterized sql statement or stored procedure name.</param>
            <param name="param1">The name of the first parameter.</param>
            <param name="value1">The value of the first parameter.</param>
            <param name="param2">The name of the second parameter.</param>
            <param name="value2">The value of the second parameter.</param>
            <returns>An IDataReader containing the query results.</returns>
        </member>
        <member name="M:VC3.Data.Datasource.ExecuteReader(System.String,System.String,System.String,System.Object,System.String,System.Object,System.String,System.Object)">
            <summary>
            Executes the specified parameterized sql statement or stored procedure.
            </summary>
            <param name="connectionString">The connection string of the database to query.</param>
            <param name="sql">A parameterized sql statement or stored procedure name.</param>
            <param name="param1">The name of the first parameter.</param>
            <param name="value1">The value of the first parameter.</param>
            <param name="param2">The name of the second parameter.</param>
            <param name="value2">The value of the second parameter.</param>
            <param name="param3">The name of the third parameter.</param>
            <param name="value3">The value of the third parameter.</param>
            <returns>An IDataReader containing the query results.</returns>
        </member>
        <member name="M:VC3.Data.Datasource.ExecuteReader(System.String,System.String,System.String,System.Object,System.String,System.Object,System.String,System.Object,System.String,System.Object)">
            <summary>
            Executes the specified parameterized sql statement or stored procedure.
            </summary>
            <param name="connectionString">The connection string of the database to query.</param>
            <param name="sql">A parameterized sql statement or stored procedure name.</param>
            <param name="param1">The name of the first parameter.</param>
            <param name="value1">The value of the first parameter.</param>
            <param name="param2">The name of the second parameter.</param>
            <param name="value2">The value of the second parameter.</param>
            <param name="param3">The name of the third parameter.</param>
            <param name="value3">The value of the third parameter.</param>
            <param name="param4">The name of the forth parameter.</param>
            <param name="value4">The value of the forth parameter.</param>
            <returns>An IDataReader containing the query results.</returns>
        </member>
        <member name="M:VC3.Data.Datasource.ExecuteReader(System.String,System.String,System.String,System.Object,System.String,System.Object,System.String,System.Object,System.String,System.Object,System.String,System.Object)">
            <summary>
            Executes the specified parameterized sql statement or stored procedure.
            </summary>
            <param name="connectionString">The connection string of the database to query.</param>
            <param name="sql">A parameterized sql statement or stored procedure name.</param>
            <param name="param1">The name of the first parameter.</param>
            <param name="value1">The value of the first parameter.</param>
            <param name="param2">The name of the second parameter.</param>
            <param name="value2">The value of the second parameter.</param>
            <param name="param3">The name of the third parameter.</param>
            <param name="value3">The value of the third parameter.</param>
            <param name="param4">The name of the forth parameter.</param>
            <param name="value4">The value of the forth parameter.</param>
            <param name="param5">The name of the fifth parameter.</param>
            <param name="value5">The value of the fifth parameter.</param>
            <returns>An IDataReader containing the query results.</returns>
        </member>
        <member name="M:VC3.Data.Datasource.ExecuteReader(System.String,System.String,System.String,System.Object,System.String,System.Object,System.String,System.Object,System.String,System.Object,System.String,System.Object,System.String,System.Object)">
            <summary>
            Executes the specified parameterized sql statement or stored procedure.
            </summary>
            <param name="connectionString">The connection string of the database to query.</param>
            <param name="sql">A parameterized sql statement or stored procedure name.</param>
            <param name="param1">The name of the first parameter.</param>
            <param name="value1">The value of the first parameter.</param>
            <param name="param2">The name of the second parameter.</param>
            <param name="value2">The value of the second parameter.</param>
            <param name="param3">The name of the third parameter.</param>
            <param name="value3">The value of the third parameter.</param>
            <param name="param4">The name of the forth parameter.</param>
            <param name="value4">The value of the forth parameter.</param>
            <param name="param5">The name of the fifth parameter.</param>
            <param name="value5">The value of the fifth parameter.</param>
            <param name="param6">The name of the sixth parameter.</param>
            <param name="value6">The value of the sixth parameter.</param>
            <returns>An IDataReader containing the query results.</returns>
        </member>
        <member name="M:VC3.Data.Datasource.ExecuteScalar(System.String,System.String,System.Int32,System.Data.IDbDataParameter[])">
            <summary>
            Executes the specified parameterized sql statement or stored procedure.
            </summary>
            <param name="connectionString">The connection string of the database to query.</param>
            <param name="sql">A parameterized sql statement or stored procedure name.</param>
            <param name="timeout">The time in seconds to wait before terminating the command.</param>
            <param name="parameters">Optional array of parameters created using CreateParameter().</param>
            <returns>A single object value from the first column and row of the query results.</returns>
        </member>
        <member name="M:VC3.Data.Datasource.ExecuteScalar(System.String,System.String,System.Data.IDbDataParameter[])">
            <summary>
            Executes the specified parameterized sql statement or stored procedure.
            </summary>
            <param name="connectionString">The connection string of the database to query.</param>
            <param name="sql">A parameterized sql statement or stored procedure name.</param>
            <param name="parameters">Optional array of parameters created using CreateParameter().</param>
            <returns>A single object value from the first column and row of the query results.</returns>
        </member>
        <member name="M:VC3.Data.Datasource.ExecuteScalar(System.String,System.String,System.Boolean,System.Data.IDbDataParameter[])">
            <summary>
            Executes the specified parameterized sql statement or stored procedure.
            </summary>
            <param name="connectionString">The connection string of the database to query.</param>
            <param name="sql">A parameterized sql statement or stored procedure name.</param>
            <param name="joinTransaction">If true, command will configured to execute within the current transaction, if any.</param>
            <param name="parameters">Optional array of parameters created using CreateParameter().</param>
            <returns>A single object value from the first column and row of the query results.</returns>
        </member>
        <member name="M:VC3.Data.Datasource.ExecuteScalar(System.String,System.String,System.String,System.Data.IDbDataParameter[])">
            <summary>
            Executes the specified parameterized sql statement or stored procedure.
            </summary>
            <param name="connectionString">The connection string of the database to query.</param>
            <param name="sql">A parameterized sql statement or stored procedure name.</param>
            <param name="scope">The scope to execute the command in.  Different scopes cannot share the same transaction.</param>
            <param name="parameters">Optional array of parameters created using CreateParameter().</param>
            <returns>A single object value from the first column and row of the query results.</returns>
        </member>
        <member name="M:VC3.Data.Datasource.ExecuteScalar(System.String,System.String,System.String,System.Object)">
            <summary>
            Executes the specified parameterized sql statement or stored procedure.
            </summary>
            <param name="connectionString">The connection string of the database to query.</param>
            <param name="sql">A parameterized sql statement or stored procedure name.</param>
            <param name="param1">The name of the first parameter.</param>
            <param name="value1">The value of the first parameter.</param>
            <returns>A single object value from the first column and row of the query results.</returns>
        </member>
        <member name="M:VC3.Data.Datasource.ExecuteScalar(System.String,System.String,System.String,System.Object,System.String,System.Object)">
            <summary>
            Executes the specified parameterized sql statement or stored procedure.
            </summary>
            <param name="connectionString">The connection string of the database to query.</param>
            <param name="sql">A parameterized sql statement or stored procedure name.</param>
            <param name="param1">The name of the first parameter.</param>
            <param name="value1">The value of the first parameter.</param>
            <param name="param2">The name of the second parameter.</param>
            <param name="value2">The value of the second parameter.</param>
            <returns>A single object value from the first column and row of the query results.</returns>
        </member>
        <member name="M:VC3.Data.Datasource.ExecuteScalar(System.String,System.String,System.String,System.Object,System.String,System.Object,System.String,System.Object)">
            <summary>
            Executes the specified parameterized sql statement or stored procedure.
            </summary>
            <param name="connectionString">The connection string of the database to query.</param>
            <param name="sql">A parameterized sql statement or stored procedure name.</param>
            <param name="param1">The name of the first parameter.</param>
            <param name="value1">The value of the first parameter.</param>
            <param name="param2">The name of the second parameter.</param>
            <param name="value2">The value of the second parameter.</param>
            <param name="param3">The name of the third parameter.</param>
            <param name="value3">The value of the third parameter.</param>
            <returns>A single object value from the first column and row of the query results.</returns>
        </member>
        <member name="M:VC3.Data.Datasource.ExecuteScalar(System.String,System.String,System.String,System.Object,System.String,System.Object,System.String,System.Object,System.String,System.Object)">
            <summary>
            Executes the specified parameterized sql statement or stored procedure.
            </summary>
            <param name="connectionString">The connection string of the database to query.</param>
            <param name="sql">A parameterized sql statement or stored procedure name.</param>
            <param name="param1">The name of the first parameter.</param>
            <param name="value1">The value of the first parameter.</param>
            <param name="param2">The name of the second parameter.</param>
            <param name="value2">The value of the second parameter.</param>
            <param name="param3">The name of the third parameter.</param>
            <param name="value3">The value of the third parameter.</param>
            <param name="param4">The name of the forth parameter.</param>
            <param name="value4">The value of the forth parameter.</param>
            <returns>A single object value from the first column and row of the query results.</returns>
        </member>
        <member name="M:VC3.Data.Datasource.ExecuteScalar(System.String,System.String,System.String,System.Object,System.String,System.Object,System.String,System.Object,System.String,System.Object,System.String,System.Object)">
            <summary>
            Executes the specified parameterized sql statement or stored procedure.
            </summary>
            <param name="connectionString">The connection string of the database to query.</param>
            <param name="sql">A parameterized sql statement or stored procedure name.</param>
            <param name="param1">The name of the first parameter.</param>
            <param name="value1">The value of the first parameter.</param>
            <param name="param2">The name of the second parameter.</param>
            <param name="value2">The value of the second parameter.</param>
            <param name="param3">The name of the third parameter.</param>
            <param name="value3">The value of the third parameter.</param>
            <param name="param4">The name of the forth parameter.</param>
            <param name="value4">The value of the forth parameter.</param>
            <param name="param5">The name of the fifth parameter.</param>
            <param name="value5">The value of the fifth parameter.</param>
            <returns>A single object value from the first column and row of the query results.</returns>
        </member>
        <member name="M:VC3.Data.Datasource.LockConnection(System.Data.IDbConnection)">
            <summary>
            Because ambient connections from distributed transactions can be shared across threads
            access to them must be synchronized.  For normal connections that are not part of a distributed
            transaction no locking is performed for better performance.
            </summary>
        </member>
        <member name="M:VC3.Data.Datasource.ExecuteNonQuery(System.String,System.String,System.Int32,System.Data.IDbDataParameter[])">
            <summary>
            Executes the specified non-result returning parameterized sql statement or stored procedure.
            </summary>
            <param name="connectionString">The connection string of the database to query.</param>
            <param name="sql">A parameterized sql statement or stored procedure name.</param>
            <param name="timeout">The time in seconds to wait before terminating the command.</param>
            <param name="parameters">Optional array of parameters created using CreateParameter().</param>
        </member>
        <member name="M:VC3.Data.Datasource.ExecuteNonQuery(System.String,System.String,System.Boolean,System.Data.IDbDataParameter[])">
            <summary>
            Executes the specified non-result returning parameterized sql statement or stored procedure.
            </summary>
            <param name="connectionString">The connection string of the database to query.</param>
            <param name="sql">A parameterized sql statement or stored procedure name.</param>
            <param name="joinTransaction">If true, command will configured to execute within the current transaction, if any.</param>
            <param name="parameters">Optional array of parameters created using CreateParameter().</param>
        </member>
        <member name="M:VC3.Data.Datasource.ExecuteNonQuery(System.String,System.String,System.String,System.Data.IDbDataParameter[])">
            <summary>
            Executes the specified non-result returning parameterized sql statement or stored procedure.
            </summary>
            <param name="connectionString">The connection string of the database to query.</param>
            <param name="sql">A parameterized sql statement or stored procedure name.</param>
            <param name="scope">The scope to execute the command in.  Different scopes cannot share the same transaction.</param>
            <param name="parameters">Optional array of parameters created using CreateParameter().</param>
        </member>
        <member name="M:VC3.Data.Datasource.ExecuteNonQuery(System.String,System.String,System.Data.IDbDataParameter[])">
            <summary>
            Executes the specified non-result returning parameterized sql statement or stored procedure.
            </summary>
            <param name="connectionString">The connection string of the database to query.</param>
            <param name="sql">A parameterized sql statement or stored procedure name.</param>
            <param name="parameters">Optional array of parameters created using CreateParameter().</param>
        </member>
        <member name="M:VC3.Data.Datasource.ExecuteNonQuery(System.String,System.String,System.String,System.Object)">
            <summary>
            Executes the specified non-result returning parameterized sql statement or stored procedure.
            </summary>
            <param name="connectionString">The connection string of the database to query.</param>
            <param name="sql">A parameterized sql statement or stored procedure name.</param>
            <param name="param1">The name of the first parameter.</param>
            <param name="value1">The value of the first parameter.</param>
        </member>
        <member name="M:VC3.Data.Datasource.ExecuteNonQuery(System.String,System.String,System.String,System.Object,System.String,System.Object)">
            <summary>
            Executes the specified non-result returning parameterized sql statement or stored procedure.
            </summary>
            <param name="connectionString">The connection string of the database to query.</param>
            <param name="sql">A parameterized sql statement or stored procedure name.</param>
            <param name="param1">The name of the first parameter.</param>
            <param name="value1">The value of the first parameter.</param>
            <param name="param2">The name of the second parameter.</param>
            <param name="value2">The value of the second parameter.</param>
        </member>
        <member name="M:VC3.Data.Datasource.ExecuteNonQuery(System.String,System.String,System.String,System.Object,System.String,System.Object,System.String,System.Object)">
            <summary>
            Executes the specified non-result returning parameterized sql statement or stored procedure.
            </summary>
            <param name="connectionString">The connection string of the database to query.</param>
            <param name="sql">A parameterized sql statement or stored procedure name.</param>
            <param name="param1">The name of the first parameter.</param>
            <param name="value1">The value of the first parameter.</param>
            <param name="param2">The name of the second parameter.</param>
            <param name="value2">The value of the second parameter.</param>
            <param name="param3">The name of the third parameter.</param>
            <param name="value3">The value of the third parameter.</param>
        </member>
        <member name="M:VC3.Data.Datasource.ExecuteNonQuery(System.String,System.String,System.String,System.Object,System.String,System.Object,System.String,System.Object,System.String,System.Object)">
            <summary>
            Executes the specified non-result returning parameterized sql statement or stored procedure.
            </summary>
            <param name="connectionString">The connection string of the database to query.</param>
            <param name="sql">A parameterized sql statement or stored procedure name.</param>
            <param name="param1">The name of the first parameter.</param>
            <param name="value1">The value of the first parameter.</param>
            <param name="param2">The name of the second parameter.</param>
            <param name="value2">The value of the second parameter.</param>
            <param name="param3">The name of the third parameter.</param>
            <param name="value3">The value of the third parameter.</param>
            <param name="param4">The name of the forth parameter.</param>
            <param name="value4">The value of the forth parameter.</param>
        </member>
        <member name="M:VC3.Data.Datasource.ExecuteNonQuery(System.String,System.String,System.String,System.Object,System.String,System.Object,System.String,System.Object,System.String,System.Object,System.String,System.Object)">
            <summary>
            Executes the specified non-result returning parameterized sql statement or stored procedure.
            </summary>
            <param name="connectionString">The connection string of the database to query.</param>
            <param name="sql">A parameterized sql statement or stored procedure name.</param>
            <param name="param1">The name of the first parameter.</param>
            <param name="value1">The value of the first parameter.</param>
            <param name="param2">The name of the second parameter.</param>
            <param name="value2">The value of the second parameter.</param>
            <param name="param3">The name of the third parameter.</param>
            <param name="value3">The value of the third parameter.</param>
            <param name="param4">The name of the forth parameter.</param>
            <param name="value4">The value of the forth parameter.</param>
            <param name="param5">The name of the fifth parameter.</param>
            <param name="value5">The value of the fifth parameter.</param>
        </member>
        <member name="M:VC3.Data.Datasource.GetQueryPlan(System.String,System.String,System.Int32)">
            <summary>
            Gets high-level information about the first statement in a query
            </summary>
            <returns></returns>
        </member>
        <member name="M:VC3.Data.Datasource.HandleCommandError(System.Data.IDbCommand,System.Exception)">
            <summary>
            Called in catch blocks to ensure the connection is closed 
            if an error occurs during execution and that transaction is rolledback.		
            </summary>
            <param name="command">The command that failed</param>
            <param name="error">The exception</param>
            <returns>A new exception</returns>
        </member>
        <member name="M:VC3.Data.Datasource.BeginTransaction(System.String,System.String)">
            <summary>
            Begins a new transaction within the specified scope or joins an existing one.  
            IMPORTANT:  Each call to BeginTransaction MUST be
            paired with a call to <see cref="M:VC3.Data.Datasource.RollbackTransaction(System.String)"/> or 
            <see cref="M:VC3.Data.Datasource.RollbackTransaction(System.String,System.String)"/> or <see cref="M:VC3.Data.Datasource.CommitTransaction(System.String)"/> 
            or <see cref="M:VC3.Data.Datasource.CommitTransaction(System.String,System.String)"/>.  Returns new transaction depth.
            </summary>
            <param name="connectionString"></param>
            <param name="scope"></param>
        </member>
        <member name="M:VC3.Data.Datasource.BeginTransaction(System.String)">
            <summary>
            Begins a new transaction or joins an existing one.  
            IMPORTANT:  Each call to BeginTransaction MUST be
            paired with a call to <see cref="M:VC3.Data.Datasource.RollbackTransaction(System.String)"/> or 
            <see cref="M:VC3.Data.Datasource.RollbackTransaction(System.String,System.String)"/> or <see cref="M:VC3.Data.Datasource.CommitTransaction(System.String)"/> 
            or <see cref="M:VC3.Data.Datasource.CommitTransaction(System.String,System.String)"/>.  Returns new transaction depth.
            </summary>
            <param name="connectionString"></param>
        </member>
        <member name="M:VC3.Data.Datasource.BeginTransaction(System.String,VC3.Data.IDatasourceAdapter)">
            <summary>
            Begins a new transaction or joins an existing one.  
            IMPORTANT:  Each call to BeginTransaction MUST be
            paired with a call to <see cref="M:VC3.Data.Datasource.RollbackTransaction(System.String)"/> or 
            <see cref="M:VC3.Data.Datasource.RollbackTransaction(System.String,System.String)"/> or <see cref="M:VC3.Data.Datasource.CommitTransaction(System.String)"/> 
            or <see cref="M:VC3.Data.Datasource.CommitTransaction(System.String,System.String)"/>.  Returns new transaction depth.
            </summary>
            <param name="connectionString"></param>
        </member>
        <member name="M:VC3.Data.Datasource.BeginTransaction(System.String,System.Data.IsolationLevel)">
            <summary>
            Begins a new transaction or joins an existing one.  
            IMPORTANT:  Each call to BeginTransaction MUST be
            paired with a call to <see cref="M:VC3.Data.Datasource.RollbackTransaction(System.String)"/> or 
            <see cref="M:VC3.Data.Datasource.RollbackTransaction(System.String,System.String)"/> or <see cref="M:VC3.Data.Datasource.CommitTransaction(System.String)"/> 
            or <see cref="M:VC3.Data.Datasource.CommitTransaction(System.String,System.String)"/>.  Returns new transaction depth.
            </summary>
            <param name="connectionString"></param>
        </member>
        <member name="M:VC3.Data.Datasource.BeginTransaction(System.String,System.String,System.Data.IsolationLevel)">
            <summary>
            Begins a new transaction or joins an existing one within the scope.  
            IMPORTANT:  Each call to BeginTransaction MUST be
            paired with a call to <see cref="M:VC3.Data.Datasource.RollbackTransaction(System.String)"/> or 
            <see cref="M:VC3.Data.Datasource.RollbackTransaction(System.String,System.String)"/> or <see cref="M:VC3.Data.Datasource.CommitTransaction(System.String)"/> 
            or <see cref="M:VC3.Data.Datasource.CommitTransaction(System.String,System.String)"/>.  Returns new transaction depth.
            </summary>
            <param name="connectionString"></param>
            <param name="scope"></param>
            param name="level"
        </member>
        <member name="M:VC3.Data.Datasource.BeginTransaction(System.String,System.String,System.Data.IsolationLevel,VC3.Data.IDatasourceAdapter)">
            <summary>
            Begins a new transaction or joins an existing one within the scope.  
            IMPORTANT:  Each call to BeginTransaction MUST be
            paired with a call to <see cref="M:VC3.Data.Datasource.RollbackTransaction(System.String)"/> or 
            <see cref="M:VC3.Data.Datasource.RollbackTransaction(System.String,System.String)"/> or <see cref="M:VC3.Data.Datasource.CommitTransaction(System.String)"/> 
            or <see cref="M:VC3.Data.Datasource.CommitTransaction(System.String,System.String)"/>.  Returns new transaction depth.
            </summary>
            <param name="connectionString"></param>
            <param name="scope"></param>
            param name="level"
        </member>
        <member name="M:VC3.Data.Datasource.RollbackTransaction(System.String)">
            <summary>
            Aborts a transaction. Returns new transaction depth.
            </summary>
            <param name="connectionString"></param>
        </member>
        <member name="M:VC3.Data.Datasource.RollbackTransaction(System.String,System.String)">
            <summary>
            Aborts a transaction within the scope. Returns new transaction depth.
            </summary>
            <param name="connectionString"></param>
            <param name="scope"></param>
        </member>
        <member name="M:VC3.Data.Datasource.TransactionDone(VC3.Data.Datasource.TransactionInfo)">
            <summary>
            Abort or commits a transaction and releases resources associated with it.
            </summary>
            <param name="tx">Information from the transactions list</param>
        </member>
        <member name="M:VC3.Data.Datasource.CommitTransaction(System.String)">
            <summary>
            Commits a transaction unless a nested
            transaction was aborted.  Returns new transaction depth.
            </summary>
            <param name="connectionString"></param>
        </member>
        <member name="M:VC3.Data.Datasource.CommitTransaction(System.String,System.String)">
            <summary>
            Commits a transaction unless a nested
            transaction was aborted.  Restricted to the scope passed in  Returns new transaction depth.
            </summary>
            <param name="connectionString"></param>
            <param name="scope"></param>
        </member>
        <member name="M:VC3.Data.Datasource.GetAmbientConnection(System.String,VC3.Data.IDatasourceAdapter)">
            <summary>
            Gets or creates a connection that can be used with the current ambient transaction (System.Transactions.Transaction.Current).
            If no ambient transaction is present, null is returned.  If the transaction is distributed transaction then
            the connection can safely be shared across threads if needed.
            </summary>
        </member>
        <member name="M:VC3.Data.Datasource.BulkCopyData(System.String,System.String,System.Data.IDataReader,System.Int32)">
            <summary>
            Bulk copy data into the provided destination table from the given DataReader.  Currently only supported with Sql Server
            </summary>
            <param name="destTable">Destination table</param>
            <param name="reader">An <see cref="T:System.Data.IDataReader"/> to use as the data source for the bulk copy</param>
            <param name="connectionString">Connection string of the datasource to use</param>
            <param name="timeout">Timeout (in seconds) for the operation</param>
        </member>
        <member name="E:VC3.Data.Datasource.AfterExecute">
            <summary>
            Raised after a command is executed
            </summary>
        </member>
        <member name="T:VC3.Data.Datasource.TransactionInfo">
            <summary>
            Nested class to hold transaction information
            </summary>
        </member>
        <member name="M:VC3.Data.Datasource.TransactionInfo.GetTransaction(System.String)">
            <summary>
            Retrieves transaction info from the current transaction list.
            </summary>
        </member>
        <member name="M:VC3.Data.Datasource.TransactionInfo.SetTransaction(VC3.Data.Datasource.TransactionInfo,System.String)">
            <summary>
            Stores transaction info in the current transaction list.
            </summary>
        </member>
        <member name="M:VC3.Data.Datasource.TransactionInfo.GetConnectionString(System.Data.IDbConnection)">
            <summary>
            Retrieves transaction info from the current transaction list.
            </summary>
        </member>
        <member name="T:VC3.Data.QueryPlan">
            <summary>
            Provides info about a query will be executed
            </summary>
        </member>
        <member name="P:VC3.Data.QueryPlan.Cost">
            <summary>
            Estimated (cumulative) cost of this operation and all child operations.
            </summary>
        </member>
        <member name="P:VC3.Data.QueryPlan.EstimatedRows">
            <summary>
            Estimated number of rows output by this operator
            </summary>
        </member>
        <member name="P:VC3.Data.QueryPlan.EstimatedIO">
            <summary>
            Estimated I/O cost for this operator.
            </summary>
        </member>
        <member name="P:VC3.Data.QueryPlan.EstimatedCPU">
            <summary>
            Estimated CPU cost
            </summary>
        </member>
        <member name="T:VC3.Data.DatasourceException">
            <summary>
            Exception throw by the <see cref="T:VC3.Data.Datasource"/> class when an error occurs
            when accessing a database.
            </summary>
        </member>
        <member name="T:VC3.Data.IDatasourceAdapter">
            <summary>
            Defines a generic adapter for creating instances of managed data access provider classes.
            </summary>
        </member>
        <member name="M:VC3.Data.IDatasourceAdapter.CreateConnection(System.String)">
            <summary>
            Creates a new connection for a specific managed data access provider.
            </summary>
        </member>
        <member name="M:VC3.Data.IDatasourceAdapter.CreateCommand">
            <summary>
            Creates a new command for a specific managed data access provider.
            </summary>
        </member>
        <member name="M:VC3.Data.IDatasourceAdapter.CreateParameter">
            <summary>
            Creates a new parameter for a specific managed data access provider.
            </summary>
        </member>
        <member name="M:VC3.Data.IDatasourceAdapter.CreateDataAdapter">
            <summary>
            Creates a new data adapter for a specific managed data access provider.
            </summary>
        </member>
        <member name="P:VC3.Data.IDatasourceAdapter.SendRollbackOnError">
            <summary>
            If true, <see cref="T:VC3.Data.Datasource"/> will explicity rollback the transaction
            when a database error occurs. If false, then it is assumed the database
            will automattically rollback a transaction when an error occurs.
            </summary>
        </member>
        <member name="T:VC3.Data.SqlDatasourceAdapter">
            <summary>
            Implements the IDatasourceAdapter interface to enable creation of SQL Server managed provider classes.
            </summary>
        </member>
        <member name="F:VC3.Data.SqlDatasourceAdapter.UniqueIndexViolationError">
            <summary>
            This error occurs when you attempt to put duplicate index values into 
            a column or columns that have a unique index. Microsoft® SQL Server™ 
            does not allow two rows to have the same index value (including NULL) 
            in columns that have a unique index. SQL Server checks for duplicate 
            values when the index is created and each time the table is modified 
            using the INSERT or UPDATE statement.
            </summary>
        </member>
        <member name="M:VC3.Data.SqlDatasourceAdapter.IsValid(System.DateTime)">
            <summary>
            Determines if the specified value is valid for SQL Server
            </summary>
            <param name="d"></param>
            <returns></returns>
        </member>
        <member name="T:VC3.Data.OraDatasourceAdapter">
            <summary>
            Implements the IDatasourceAdapter interface to enable creation of Oracle managed provider classes.
            Connection String Example: Data Source={TNS};uid={user name};pwd={password}
            </summary>
        </member>
        <member name="T:VC3.Data.OdbcDatasourceAdapter">
            <summary>
            Implements the IDatasourceAdapter interface to enable creation of Odbc Native provider classes.
            </summary>
        </member>
        <member name="T:VC3.Data.OleDatasourceAdapter">
            <summary>
            Implements the IDatasourceAdapter interface to enable creation of OleDb Native provider classes.
            </summary>
        </member>
        <member name="T:VC3.Data.Settings">
            <summary>
            IConfigurationSectionHandler class for determining the type of class for handling transactions
            </summary>
        </member>
        <member name="M:VC3.Data.Settings.Create(System.Object,System.Object,System.Xml.XmlNode)">
            <summary>
            Create the xml section handler
            </summary>
            <param name="parent"></param>
            <param name="context"></param>
            <param name="section"></param>
            <returns></returns>
        </member>
        <member name="M:VC3.Data.Settings.SetDataSources(VC3.Data.DatasourceSettings[])">
            <summary>
            Resets all data sources to the passeed in array.  Useful for runtime connection switching
            </summary>
            <param name="settings">Array of Datasourcesettings to use</param>
        </member>
        <member name="M:VC3.Data.Settings.SetDataSource(VC3.Data.DatasourceSettings)">
            <summary>
            Sets the lone data source to use.  Useful for runtime connection switching
            </summary>
            <param name="setting">The setting to use</param>
        </member>
        <member name="P:VC3.Data.Settings.Current">
            <summary>
            Returns an instance of Settings
            </summary>
        </member>
        <member name="P:VC3.Data.Settings.GlobalSettings">
            <summary>
            Used by the Datasource class for settings not passed
            into its methods
            </summary>
        </member>
        <member name="T:VC3.Data.GlobalSettings">
            <summary>
            Used to support clients using features of the Datasource class
            that use global settings
            </summary>
        </member>
        <member name="T:VC3.Data.DatasourceSettings">
            <summary>
            IConfigurationSectionHandler class for determining the type of class for handling transactions
            </summary>
        </member>
        <member name="M:VC3.Data.DatasourceSettings.CreateAdapter">
            <summary>
            Returns an IDatasourceAdapter for the given data access class 
            based on entries in the app config file
            </summary>
            <returns></returns>
        </member>
        <member name="P:VC3.Data.DatasourceSettings.ForTypes">
            <summary>
            Used to match what times
            </summary>
        </member>
        <member name="T:VC3.Collections.DictionaryChangeEventHandler">
            <summary>
            Raised when an IDictionary changes
            </summary>
        </member>
        <member name="T:VC3.Collections.DictionaryEvents">
            <summary>
            Intercepts changes made to another <see cref="T:System.Collections.IDictionary"/> and raises associated events.
            </summary>
        </member>
        <member name="M:VC3.Collections.DictionaryEvents.#ctor(System.Collections.IDictionary)">
            <summary>
            Raises events relating to the specified dictionary
            </summary>
            <param name="inner"></param>
        </member>
        <member name="E:VC3.Collections.DictionaryEvents.Changed">
            <summary>
            Raised when items are added or removed
            </summary>
        </member>
        <member name="P:VC3.Collections.DictionaryEvents.Inner">
            <summary>
            Gets the inner dictionary that this one wraps.  Changes made
            directly to the inner dictionary will not cause events to be raised.
            </summary>
        </member>
        <member name="T:VC3.Collections.ListEvents">
            <summary>
            Intercepts changes made to another <see cref="T:System.Collections.IList"/> and raises associated events
            </summary>
        </member>
        <member name="M:VC3.Collections.ListEvents.#ctor(System.Collections.IList)">
            <summary>
            Raises events relating to the specified list
            </summary>
        </member>
        <member name="M:VC3.Collections.ListEvents.#ctor(System.Collections.IList,VC3.Collections.ListChangeEventHandler)">
            <summary>
            Raises events relating to the specified list
            </summary>
        </member>
        <member name="T:VC3.Collections.CollectionBaseWithEvents">
            <summary>
            Like <see cref="T:System.Collections.CollectionBase"/> except with a <see cref="E:VC3.Collections.CollectionBaseWithEvents.Changed"/> event added
            </summary>
        </member>
        <member name="E:VC3.Collections.CollectionBaseWithEvents.Changed">
            <summary>
            Raised when the list is changed
            </summary>
        </member>
        <member name="T:VC3.Diagnostics.MultiInstanceCounter`1">
            <summary>
            A single performance counter that has multiple instances and a total.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:VC3.Diagnostics.MultiInstanceRequestCounter`1">
            <summary>
            A counters for per instances and totals.  Two counters are defined,
            one for cumulative amounts and one for per request amounts.  The per request
            amounts are decremented at the end of each request automatically.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:VC3.Serialization.SerializableProxy">
            <summary>
            Handles serialization of an alternative object (reference) that
            can recreate the original on deserialization.
            </summary>
        </member>
        <member name="M:VC3.Serialization.SerializableProxy.Serialize(VC3.Serialization.ISerializer,System.Object,System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serializes a proxy to an object that will be serialized/deserialized
            using the specified <see cref="T:VC3.Serialization.ISerializer"/>.
            </summary>
        </member>
        <member name="T:VC3.ComponentModel.License">
            <summary>
            Represents a license to use an application for
            a specified period of time.
            </summary>
        </member>
        <member name="M:VC3.ComponentModel.License.#ctor(System.String,System.String,System.String,System.String,System.String,System.Version,System.DateTime)">
            <summary>
            Creates a new initialize <see cref="T:VC3.ComponentModel.License"/> instance.
            </summary>
            <param name="signature">Digital signature of the license</param>
            <param name="licenseKey">The raw licence key</param>
            <param name="productName">The name of the product the license is for</param>
            <param name="customerName">The name of the customer the license is for</param>
            <param name="productKey">The product key that uniquely identifies the customer and product</param>
            <param name="version">The version of the application</param>
            <param name="expiration">The date/time the license expires</param>
        </member>
        <member name="M:VC3.ComponentModel.License.#ctor(System.String,System.String,System.String,System.String,System.String,System.Version,System.DateTime,VC3.ComponentModel.FeatureLicenseList)">
            <summary>
            Creates a new initialize <see cref="T:VC3.ComponentModel.License"/> instance.
            </summary>
            <param name="signature">Digital signature of the license</param>
            <param name="licenseKey">The raw licence key</param>
            <param name="productName">The name of the product the license is for</param>
            <param name="customerName">The name of the customer the license is for</param>
            <param name="productKey">The product key that uniquely identifies the customer and product</param>
            <param name="version">The version of the application</param>
            <param name="expiration">The date/time the license expires</param>
            <param name="features">The features associated with this license</param>
        </member>
        <member name="M:VC3.ComponentModel.License.Dispose">
            <summary>
            Required implementation for license types.
            </summary>
        </member>
        <member name="M:VC3.ComponentModel.License.Validate(System.Type,System.Object)">
            <summary>
            Called to initialize the license for an application. Safe
            to call multiple times.
            </summary>
            <param name="appType"></param>
            <param name="appInstance"></param>
        </member>
        <member name="M:VC3.ComponentModel.License.ReloadLicense(System.Type,System.Object)">
            <summary>
            Reloads the current license
            </summary>
        </member>
        <member name="P:VC3.ComponentModel.License.Signature">
            <summary>
            The signature used to verify the authenticity of the license.
            </summary>
        </member>
        <member name="P:VC3.ComponentModel.License.LicenseKey">
            <summary>
            Gets the raw license key.
            </summary>
        </member>
        <member name="P:VC3.ComponentModel.License.ProductName">
            <summary>
            Gets the name of the product the license is for.
            </summary>
        </member>
        <member name="P:VC3.ComponentModel.License.CustomerName">
            <summary>
            Gets the name of the customer the license is for.
            </summary>
        </member>
        <member name="P:VC3.ComponentModel.License.ProductKey">
            <summary>
            Gets the product key that uniquely identifies the customer and product.
            </summary>
        </member>
        <member name="P:VC3.ComponentModel.License.Version">
            <summary>
            Gets the version of the application.
            </summary>
        </member>
        <member name="P:VC3.ComponentModel.License.Expiration">
            <summary>
            Gets the date/time the license expires.
            </summary>
        </member>
        <member name="P:VC3.ComponentModel.License.IsValid">
            <summary>
            Indicates whether the license is valid or has expired.
            </summary>
        </member>
        <member name="P:VC3.ComponentModel.License.Current">
            <summary>
            Gets the current license for this application.
            Initialized when <see cref="M:VC3.ComponentModel.License.Validate(System.Type,System.Object)"/> is called.
            </summary>
        </member>
        <member name="T:VC3.ComponentModel.XmlLicenseAttribute">
            <summary>
            Identifies the XML license file to use to retrieve license information
            for an application.
            </summary>
        </member>
        <member name="M:VC3.ComponentModel.XmlLicenseAttribute.#ctor(System.String)">
            <summary>
            Creates a new <see cref="T:VC3.ComponentModel.XmlLicenseAttribute"/> specifying
            the location of the license file.
            </summary>
            <param name="file">The relative path to the license file</param>
        </member>
        <member name="M:VC3.ComponentModel.XmlLicenseAttribute.#ctor(System.String,System.Boolean)">
            <summary>
            Creates a new <see cref="T:VC3.ComponentModel.XmlLicenseAttribute"/> specifying
            the location of the license file, or embedded resource.
            </summary>
            <param name="file">The relative path to the license file or name of embedded resource</param>
            <param name="isEmbedded">True if <see cref="P:VC3.ComponentModel.XmlLicenseAttribute.File"/> is an embedded resource</param>
        </member>
        <member name="M:VC3.ComponentModel.XmlLicenseAttribute.#ctor(System.String,System.Type)">
            <summary>
            Creates a new <see cref="T:VC3.ComponentModel.XmlLicenseAttribute"/> specifying
            the location of the license file.
            </summary>
            <param name="file">The relative path to the license file</param>
            <param name="featureFactory">Type of <see cref="T:VC3.ComponentModel.IFeatureFactory"/> implementation.</param>
        </member>
        <member name="M:VC3.ComponentModel.XmlLicenseAttribute.#ctor(System.String,System.Type,System.Boolean)">
            <summary>
            Creates a new <see cref="T:VC3.ComponentModel.XmlLicenseAttribute"/> specifying
            the location of the license file, or embedded resource.
            </summary>
            <param name="file">The relative path to the license file or name of embedded resource</param>
            <param name="featureFactory">Type of <see cref="T:VC3.ComponentModel.IFeatureFactory"/> implementation.</param>
            <param name="isEmbedded">True if <see cref="P:VC3.ComponentModel.XmlLicenseAttribute.File"/> is an embedded resource</param>
        </member>
        <member name="P:VC3.ComponentModel.XmlLicenseAttribute.IsEmbedded">
            <summary>
            Returns true of the value of <see cref="P:VC3.ComponentModel.XmlLicenseAttribute.File"/> is the name of
            an embedded resource rather than a physical file.  False unless
            constructed otherwise.
            </summary>
        </member>
        <member name="P:VC3.ComponentModel.XmlLicenseAttribute.File">
            <summary>
            Gets the path of the license file relative to the application
            <see cref="P:System.AppDomain.BaseDirectory"/>.
            </summary>
        </member>
        <member name="P:VC3.ComponentModel.XmlLicenseAttribute.FeatureFactory">
            <summary>
            Gets the type implementing <see cref="T:VC3.ComponentModel.IFeatureFactory"/>
            </summary>
        </member>
        <member name="T:VC3.ComponentModel.SignedXmlLicenseProvider">
            <summary>
            Creates or loads licenses from Xml files signed with RSA encryption.
            </summary>
        </member>
        <member name="F:VC3.ComponentModel.SignedXmlLicenseProvider.publicKey">
            <summary>
            Public key required to verify license signature.
            </summary>
            <remarks>
            Use the VC3.Deployment.LicenseGenerator application to generate
            license files that can be loaded and verified by this provider.
            </remarks>
        </member>
        <member name="M:VC3.ComponentModel.SignedXmlLicenseProvider.RequiresLicense(System.Object)">
            <summary>
            Determines whether the specified instances requires a valid license.
            </summary>
            <param name="instance">The instance to check</param>
            <returns>True if the instance has a <see cref="T:VC3.ComponentModel.XmlLicenseAttribute"/>, otherwise false</returns>
        </member>
        <member name="M:VC3.ComponentModel.SignedXmlLicenseProvider.CreateLicense(System.String)">
            <summary>
            Creates a new license using the specified Xml.
            </summary>
            <param name="xml">The Xml license</param>
            <returns>The verified <see cref="T:VC3.ComponentModel.License"/> based on the Xml</returns>
        </member>
        <member name="M:VC3.ComponentModel.SignedXmlLicenseProvider.CreateLicense(System.Xml.XmlDocument)">
            <summary>
            Creates a new license using the specified Xml.
            </summary>
            <param name="xml">The Xml license</param>
            <returns>The verified <see cref="T:VC3.ComponentModel.License"/> based on the Xml</returns>
        </member>
        <member name="M:VC3.ComponentModel.SignedXmlLicenseProvider.LoadLicense(System.String)">
            <summary>
            Loads a license from the specified file.
            </summary>
            <param name="file">The path to the license file</param>
            <returns>The verified <see cref="T:VC3.ComponentModel.License"/> loaded from the file</returns>
        </member>
        <member name="M:VC3.ComponentModel.SignedXmlLicenseProvider.LoadLicense(System.IO.StreamReader)">
            <summary>
            Loads a license from the specified stream reader.
            </summary>
            <returns>The verified <see cref="T:VC3.ComponentModel.License"/> loaded from the stream</returns>
        </member>
        <member name="M:VC3.ComponentModel.SignedXmlLicenseProvider.SerializeLicense(VC3.ComponentModel.License,System.String)">
            <summary>
            Serializes the specified license as Xml and signs the license
            with the specified key.
            </summary>
            <param name="license">The license to serialize</param>
            <param name="key">The private RSA key to sign the license with</param>
            <returns>The serialized license</returns>
        </member>
        <member name="M:VC3.ComponentModel.SignedXmlLicenseProvider.GetLicense(System.ComponentModel.LicenseContext,System.Type,System.Object,System.Boolean)">
            <summary>
            Gets a license using the <see cref="T:VC3.ComponentModel.XmlLicenseAttribute"/> attribute
            on the specified instance.
            </summary>
            <param name="context">The context for retrieving the license</param>
            <param name="type">The <see cref="T:System.Type"/> the license is for</param>
            <param name="instance">The instance the license is for</param>
            <param name="allowExceptions">A flag indicating whether exceptions should be thrown if the license is not valid</param>
            <returns>The verified license, or null if the license was invalid and <paramref name="allowExceptions"/> was false</returns>
        </member>
        <member name="M:VC3.ComponentModel.FeatureLicense.#ctor(System.Xml.XmlNode,VC3.ComponentModel.IFeatureFactory)">
            <summary>
            Construct a <see cref="T:VC3.ComponentModel.FeatureLicense"/> based on an xml license node from a license file
            </summary>
        </member>
        <member name="P:VC3.ComponentModel.FeatureLicense.ExpirationDate">
            <summary>
            The expiration date of this <see cref="T:VC3.ComponentModel.FeatureLicense"/>
            </summary>
        </member>
        <member name="T:VC3.ComponentModel.IFeature">
            <summary>
            Contract for implementation specific features
            </summary>
        </member>
        <member name="P:VC3.ComponentModel.IFeature.Id">
            <summary>
            The Guid identifier of this <see cref="T:VC3.ComponentModel.IFeature"/>
            </summary>
        </member>
        <member name="P:VC3.ComponentModel.IFeature.Name">
            <summary>
            The name of this <see cref="T:VC3.ComponentModel.IFeature"/>
            </summary>
        </member>
        <member name="T:VC3.ComponentModel.IFeatureFactory">
            <summary>
            Abstract factory for creating objects that implement <see cref="T:VC3.ComponentModel.IFeature"/>
            </summary>
        </member>
        <member name="M:VC3.ComponentModel.IFeatureFactory.Create(System.Guid)">
            <summary>
            Returns an instance of <see cref="T:VC3.ComponentModel.IFeature"/> identified by the specified id.
            </summary>
            <param name="Id"></param>
            <returns></returns>
        </member>
        <member name="T:VC3.ComponentModel.DefaultFeature">
            <summary>
            Default implementation of <see cref="T:VC3.ComponentModel.IFeature"/>
            </summary>
        </member>
        <member name="T:VC3.ComponentModel.DefaultFeatureFactory">
            <summary>
            Default implementation of <see cref="T:VC3.ComponentModel.IFeatureFactory"/>
            </summary>
        </member>
        <member name="T:VC3.ComponentModel.BusinessObjectList`1">
            <summary>
            Generic version of <see cref="T:VC3.ComponentModel.BusinessObjectList"/> that also implements <see cref="T:VC3.ComponentModel.IBatchableList`1"/>.
            </summary>
            <typeparam name="T">The type of <see cref="T:VC3.ComponentModel.BusinessObject"/></typeparam>
        </member>
        <member name="M:VC3.ComponentModel.BusinessObjectList`1.#ctor">
            <summary>
            Creates an empty list of objects.
            </summary>
        </member>
        <member name="M:VC3.ComponentModel.BusinessObjectList`1.#ctor(VC3.ComponentModel.BusinessObject.ListLoader)">
            <summary>
            Creates a new, empty list of objects, and registers a delegate for loading items.
            </summary>
            <param name="loader">Used to populate an uninitialized list.</param>
        </member>
        <member name="M:VC3.ComponentModel.BusinessObjectList`1.#ctor(VC3.ComponentModel.BusinessObject.ListLoader,VC3.ComponentModel.BusinessObject.ListPersister)">
            <summary>
            Creates a new, empty list of objects, and registers a delegate for loading items.
            </summary>
            <param name="loader">Used to populate an uninitialized list.</param>
            <param name="updater">Used to update relationships between owner and items in the list</param>
        </member>
        <member name="M:VC3.ComponentModel.BusinessObjectList`1.#ctor(VC3.ComponentModel.BusinessObject.ListLoader,System.String)">
            <summary>
            Creates a new, empty list of objects, and registers a delegate for loading items.
            </summary>
            <param name="loader">Used to populate an uninitialized list.</param>
            <param name="ownerPropertyName">The name of the property on the objects contained in the list that corresponds to the owner of the list</param>
        </member>
        <member name="M:VC3.ComponentModel.BusinessObjectList`1.#ctor(VC3.ComponentModel.BusinessObject.ListLoader,VC3.ComponentModel.BusinessObject.ListPersister,VC3.ComponentModel.BusinessObject.ListPersister)">
            <summary>
            Creates a new, empty list of objects, and registers a delegate for loading items.
            </summary>
            <param name="loader">Used to populate an uninitialized list.</param>
            <param name="adder">Used to save new relationships between owner and items in the list</param>
            <param name="remover">Used to remove old relationships between owner and items in the list</param>
        </member>
        <member name="M:VC3.ComponentModel.BusinessObjectList`1.IndexOf(`0)">
            <summary>
            Determines the index of a particular item in the list
            </summary>
            <param name="item">The item to search for</param>
            <returns>The index if item is found. -1 otherwise.</returns>
        </member>
        <member name="M:VC3.ComponentModel.BusinessObjectList`1.Insert(System.Int32,`0)">
            <summary>
            Adds an item to the list
            </summary>
            <param name="index">Position at which the item will be inserted</param>
            <param name="item">The item to add to the list</param>
        </member>
        <member name="M:VC3.ComponentModel.BusinessObjectList`1.RemoveAt(System.Int32)">
            <summary>
            Removes a particular item from the list
            </summary>
            <param name="index">Position of the item to remove from the list</param>
        </member>
        <member name="M:VC3.ComponentModel.BusinessObjectList`1.Add(`0)">
            <summary>
            Adds an item to the list
            </summary>
            <param name="item">The item to add to the list</param>
            <returns>The position at which the item was inserted</returns>
        </member>
        <member name="M:VC3.ComponentModel.BusinessObjectList`1.Contains(`0)">
            <summary>
            Determines if a particular item is in the list.
            </summary>
            <param name="item">The item to search for</param>
            <returns>True if item is found. False otherwise.</returns>
        </member>
        <member name="M:VC3.ComponentModel.BusinessObjectList`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the elements in the list to an array, starting at a particular array index.
            </summary>
            <param name="array">The destination array</param>
            <param name="arrayIndex">The zero-based index in array at which copying begins</param>
        </member>
        <member name="M:VC3.ComponentModel.BusinessObjectList`1.Remove(`0)">
            <summary>
            Removes a particular item from the list
            </summary>
            <param name="item">The item to search for</param>
            <returns>true if item was successfully removed from the list</returns>
        </member>
        <member name="M:VC3.ComponentModel.BusinessObjectList`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>A <see cref="T:System.Collections.Generic.IEnumerator`1"/></returns>
        </member>
        <member name="M:VC3.ComponentModel.BusinessObjectList`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adds a range of items to the list
            </summary>
            <param name="items">an <see cref="T:System.Collections.Generic.IEnumerable`1"/> of items to add to the list</param>
        </member>
        <member name="M:VC3.ComponentModel.BusinessObjectList`1.RemoveRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Remves a range of items from the list
            </summary>
            <param name="items">an <see cref="T:System.Collections.Generic.IEnumerable`1"/> of items to remove from the list</param>
        </member>
        <member name="P:VC3.ComponentModel.BusinessObjectList`1.Item(System.Int32)">
            <summary>
            Retrieves an item from the list based on position in the list
            </summary>
            <param name="index">Position of the item to remove from the list</param>
        </member>
        <member name="T:VC3.ComponentModel.BusinessObjectListChangeHandler">
            <summary>
            Event handler for BusinessObjectList.Change event.
            </summary>
        </member>
        <member name="T:VC3.ComponentModel.BusinessObjectListChangedEventArgs">
            <summary>
            Event info for BusinessObjectList.Change event.
            </summary>
        </member>
        <member name="P:VC3.ComponentModel.BusinessObjectListChangedEventArgs.Added">
            <summary>
            Item that was added to the list, if any
            </summary>
        </member>
        <member name="P:VC3.ComponentModel.BusinessObjectListChangedEventArgs.AddedAt">
            <summary>
            Gets the index that the <see cref="P:VC3.ComponentModel.BusinessObjectListChangedEventArgs.Added"/> item
            was added at.  Value if <see cref="P:VC3.ComponentModel.BusinessObjectListChangedEventArgs.Added"/> is not null.
            </summary>
        </member>
        <member name="P:VC3.ComponentModel.BusinessObjectListChangedEventArgs.Removed">
            <summary>
            Item that was removed from the list, if any
            </summary>
        </member>
        <member name="P:VC3.ComponentModel.BusinessObjectListChangedEventArgs.RemovedAt">
            <summary>
            Gets the index that the <see cref="P:VC3.ComponentModel.BusinessObjectListChangedEventArgs.Added"/> item
            was added at.  Value if <see cref="P:VC3.ComponentModel.BusinessObjectListChangedEventArgs.Added"/> is not null.
            </summary>
        </member>
        <member name="M:VC3.ComponentModel.ListPropertyFilter.GetPropertyReflector(System.String,VC3.ComponentModel.BusinessObjectList)">
            <summary>
            Converts a string to a PropertyReflector.
            </summary>
        </member>
        <member name="T:VC3.ComponentModel.DependentListsAttribute">
            <summary>
            Indicates that the field that the attribute is applied to contains, either directly
            or indirectly, an enumerable of business objects lists that are dependents of their owner.
            </summary>
        </member>
        <member name="M:VC3.ComponentModel.DependentListsAttribute.#ctor">
            <summary>
            Creates a new DependentListsAttribute with no list property, meaning that the
            value of the field itself is an enumeration of BussinessObjectList.
            </summary>
        </member>
        <member name="M:VC3.ComponentModel.DependentListsAttribute.#ctor(System.String)">
            <summary>
            Creates a new DependentListsAttribute with a list property, meaning that the value
            of the field contains a property that is an enumeration of BussinessObjectList.
            </summary>
            <param name="listPropertyName">The name of the property that is an enumeration of BussinessObjectList.</param>
        </member>
        <member name="M:VC3.ComponentModel.DependentListsAttribute.GetAttribute(System.Reflection.FieldInfo)">
            <summary>
            Returns the DependantListsAttribute that is applied to the given field.
            </summary>
            <param name="field">The field to check.</param>
            <returns>The DependantListsAttribute that is applied to the given field.</returns>
        </member>
        <member name="M:VC3.ComponentModel.DependentListsAttribute.GetEnumerable(System.Type,System.Object)">
            <summary>
            Returns an enumerable value of the dependent lists for the given field value.  If a list property is specified
            then it will be used to retrieve the enumerable, otherwise it is assumed that the value itself is enumerable.
            </summary>
            <param name="fieldType">The type of the field.</param>
            <param name="fieldValue">The value of the field.</param>
            <returns>An enumerable value of the dependent lists for the given field value.</returns>
        </member>
        <member name="M:VC3.ComponentModel.DependentListsAttribute.GetLists(System.Reflection.FieldInfo,System.Object)">
            <summary>
            Returns an array of BusinessObjectList for the given field and instance, using the
            DependentListsAttribute that is applied to the given field in order to access the values.
            </summary>
            <param name="field">The field to retrieve lists for.</param>
            <param name="instance">The object that contains the given field.</param>
            <returns>An array of BusinessObjectList for the given field and instance.</returns>
        </member>
        <member name="P:VC3.ComponentModel.DependentListsAttribute.ListPropertyName">
            <summary>
            Gets the name of the property that contains a value
            of type IEnumerable&lt;BusinessObjectList&gt;.
            </summary>
        </member>
    </members>
</doc>
