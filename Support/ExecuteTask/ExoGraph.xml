<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ExoGraph</name>
    </assembly>
    <members>
        <member name="T:ExoGraph.ReflectionGraphTypeProvider">
            <summary>
            Base class for graph contexts that work with strongly-typed object graphs based on compiled types
            using inheritence and declared properties for associations and intrinsic types.
            </summary>
        </member>
        <member name="M:ExoGraph.IGraphTypeProvider.GetGraphTypeName(System.Object)">
            <summary>
            Gets the unique name of the <see cref="T:ExoGraph.GraphType"/> for the specified graph object instance.
            </summary>
            <param name="instance">The actual graph object instance</param>
            <returns>The unique name of the graph type for the instance if it is a valid graph type, otherwise null</returns>
        </member>
        <member name="M:ExoGraph.IGraphTypeProvider.GetGraphTypeName(System.Type)">
            <summary>
            Gets the unique name of the <see cref="T:ExoGraph.GraphType"/> that corresponds to the specified <see cref="T:System.Type"/>.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:ExoGraph.IGraphTypeProvider.CreateGraphType(System.String)">
            <summary>
            Creates a <see cref="T:ExoGraph.GraphType"/> that corresponds to the specified type name.
            </summary>
            <param name="typeName"></param>
            <returns></returns>
        </member>
        <member name="M:ExoGraph.ReflectionGraphTypeProvider.#ctor(System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Creates a new <see cref="T:ExoGraph.ReflectionGraphTypeProvider"/> based on the specified types.
            </summary>
            <param name="types">The types to create graph types from</param>
        </member>
        <member name="M:ExoGraph.ReflectionGraphTypeProvider.#ctor(System.String,System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Creates a new <see cref="T:ExoGraph.ReflectionGraphTypeProvider"/> based on the specified types.
            </summary>
            <param name="types">The types to create graph types from</param>
        </member>
        <member name="M:ExoGraph.ReflectionGraphTypeProvider.#ctor(System.String,System.Collections.Generic.IEnumerable{System.Type},System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Creates a new <see cref="T:ExoGraph.ReflectionGraphTypeProvider"/> based on the specified types
            and also including properties declared on the specified base types.
            </summary>
            <param name="types">The types to create graph types from</param>
            <param name="baseTypes">The base types that contain properties to include on graph types</param>
        </member>
        <member name="M:ExoGraph.ReflectionGraphTypeProvider.CreateReferenceProperty(ExoGraph.GraphType,System.Reflection.PropertyInfo,System.String,System.Boolean,ExoGraph.GraphType,System.Boolean,System.Attribute[])">
            <summary>
            Adds a property to the specified <see cref="T:ExoGraph.GraphType"/> that represents an
            association with another <see cref="T:ExoGraph.GraphType"/> instance.
            </summary>
            <param name="name">The name of the property</param>
            <param name="isStatic">Indicates whether the property is statically defined on the type</param>
            <param name="propertyType">The <see cref="T:ExoGraph.GraphType"/> of the property</param>
            <param name="isList">Indicates whether the property represents a list of references or a single reference</param>
            <param name="attributes">The attributes assigned to the property</param>
        </member>
        <member name="M:ExoGraph.ReflectionGraphTypeProvider.CreateValueProperty(ExoGraph.GraphType,System.Reflection.PropertyInfo,System.String,System.Boolean,System.Type,System.ComponentModel.TypeConverter,System.Boolean,System.Attribute[])">
            <summary>
            Adds a property to the specified <see cref="T:ExoGraph.GraphType"/> that represents an
            strongly-typed value value with the specified <see cref="T:System.Type"/>.
            </summary>
            <param name="name">The name of the property</param>
            <param name="propertyType">The <see cref="T:System.Type"/> of the property</param>
            <param name="converter">The optional value type converter to use</param>
            <param name="attributes">The attributes assigned to the property</param>
        </member>
        <member name="M:ExoGraph.ReflectionGraphTypeProvider.ExoGraph#IGraphTypeProvider#GetGraphTypeName(System.Object)">
            <summary>
            Gets the unique name of the <see cref="T:ExoGraph.GraphType"/> for the specified graph object instance.
            </summary>
            <param name="instance">The actual graph object instance</param>
            <returns>The unique name of the graph type for the instance if it is a valid graph type, otherwise null</returns>
        </member>
        <member name="M:ExoGraph.ReflectionGraphTypeProvider.ExoGraph#IGraphTypeProvider#GetGraphTypeName(System.Type)">
            <summary>
            Gets the <see cref="T:ExoGraph.GraphType"/> that corresponds to the specified <see cref="T:System.Type"/>.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:ExoGraph.ReflectionGraphTypeProvider.ExoGraph#IGraphTypeProvider#CreateGraphType(System.String)">
            <summary>
            Creates a <see cref="T:ExoGraph.GraphType"/> that corresponds to the specified type name.
            </summary>
            <param name="typeName"></param>
            <returns></returns>
        </member>
        <member name="M:ExoGraph.ReflectionGraphTypeProvider.CreateGraphType(System.String,System.Type)">
            <summary>
            Allows subclasses to create specific subclasses of <see cref="T:ExoGraph.ReflectionGraphTypeProvider.ReflectionGraphType"/>.
            </summary>
            <param name="namespace"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:ExoGraph.ReflectionGraphTypeProvider.ReflectionGraphType">
            <summary>
            Concrete subclass of <see cref="T:ExoGraph.GraphType"/> that represents a specific <see cref="T:System.Type"/>.
            </summary>
        </member>
        <member name="T:ExoGraph.GraphType">
            <summary>
            Represents a specific type in a graph hierarchy.
            </summary>
        </member>
        <member name="M:ExoGraph.IGraphPropertySource.GetReference(System.String)">
            <summary>
            Gets the <see cref="T:ExoGraph.GraphInstance"/> assigned to the specified property.
            </summary>
            <param name="property">The name of the property</param>
            <returns>The instance assigned to the property, or null if the property does not have a value</returns>
        </member>
        <member name="M:ExoGraph.IGraphPropertySource.GetReference(ExoGraph.GraphReferenceProperty)">
            <summary>
            Gets the <see cref="T:ExoGraph.GraphInstance"/> assigned to the specified property.
            </summary>
            <param name="property">The specific <see cref="T:ExoGraph.GraphReferenceProperty"/></param>
            <returns>The instance assigned to the property, or null if the property does not have a value</returns>
        </member>
        <member name="M:ExoGraph.IGraphPropertySource.GetValue(System.String)">
            <summary>
            Gets the value assigned to the specified property.
            </summary>
            <param name="property">The name of the property</param>
            <returns>The value of the property</returns>
        </member>
        <member name="M:ExoGraph.IGraphPropertySource.GetValue(ExoGraph.GraphValueProperty)">
            <summary>
            Gets the value assigned to the specified property.
            </summary>
            <param name="property">The specific <see cref="T:ExoGraph.GraphValueProperty"/></param>
            <returns>The value of the property</returns>
        </member>
        <member name="M:ExoGraph.IGraphPropertySource.GetList(System.String)">
            <summary>
            Gets the list of <see cref="T:ExoGraph.GraphInstance"/> items assigned to the specified property.
            </summary>
            <param name="property">The name of property</param>
            <returns>The list of instances</returns>
        </member>
        <member name="M:ExoGraph.IGraphPropertySource.GetList(ExoGraph.GraphReferenceProperty)">
            <summary>
            Gets the list of <see cref="T:ExoGraph.GraphInstance"/> items assigned to the specified property.
            </summary>
            <param name="property">The specific <see cref="T:ExoGraph.GraphReferenceProperty"/></param>
            <returns>The list of instances</returns>
        </member>
        <member name="M:ExoGraph.IGraphPropertySource.SetReference(System.String,ExoGraph.GraphInstance)">
            <summary>
            Sets the reference for a property to the specified instance.
            </summary>
            <param name="property">The property the reference is for</param>
            <param name="value">The value of the property</param>
        </member>
        <member name="M:ExoGraph.IGraphPropertySource.SetReference(ExoGraph.GraphReferenceProperty,ExoGraph.GraphInstance)">
            <summary>
            Sets the reference for a property to the specified instance.
            </summary>
            <param name="property">The property the reference is for</param>
            <param name="value">The value of the property</param>
        </member>
        <member name="M:ExoGraph.IGraphPropertySource.SetValue(System.String,System.Object)">
            <summary>
            Sets a property to the specified value.
            </summary>
            <param name="property">The property to set</param>
            <param name="value">The value of the property</param>
        </member>
        <member name="M:ExoGraph.IGraphPropertySource.SetValue(ExoGraph.GraphValueProperty,System.Object)">
            <summary>
            Sets a property to the specified value.
            </summary>
            <param name="property">The property to set</param>
            <param name="value">The value of the property</param>
        </member>
        <member name="P:ExoGraph.IGraphPropertySource.Properties">
            <summary>
            Gets the set of properties exposed by the current <see cref="T:ExoGraph.IGraphPropertySource"/>.
            </summary>
        </member>
        <member name="P:ExoGraph.IGraphPropertySource.Item(System.String)">
            <summary>
            Gets or sets the value of the specified property.
            </summary>
            <param name="property">The name of the property</param>
            <returns>The underlying value of the property in the physical graph</returns>
        </member>
        <member name="P:ExoGraph.IGraphPropertySource.Item(ExoGraph.GraphProperty)">
            <summary>
            Gets or sets the value of the specified property.
            </summary>
            <param name="property">The <see cref="T:ExoGraph.GraphProperty"/> to get or set</param>
            <returns>The underlying value of the property in the physical graph</returns>
        </member>
        <member name="M:ExoGraph.GraphType.GetExtension``1">
            <summary>
            Gets or creates an extension instance linked to the current <see cref="T:ExoGraph.GraphType"/>.
            </summary>
            <typeparam name="TExtension">The type of extension to create.</typeparam>
            <returns></returns>
        </member>
        <member name="M:ExoGraph.GraphType.TryGetListItemType(System.Type,System.Type@)">
            <summary>
            Gets the item type of a list type, or returns false if the type is not a supported list type.
            </summary>
            <param name="listType"></param>
            <param name="itemType"></param>
            <returns></returns>
        </member>
        <member name="M:ExoGraph.GraphType.Initialize(ExoGraph.GraphContext)">
            <summary>
            Performs one time initialization on the <see cref="T:ExoGraph.GraphType"/> when it is registered
            with the <see cref="T:ExoGraph.GraphContext"/>.
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:ExoGraph.GraphType.AfterInitialize(System.Action)">
            <summary>
            Allow types to preform post-initialization logic
            </summary>
            <param name="afterInit"></param>
        </member>
        <member name="M:ExoGraph.GraphType.OnInit">
            <summary>
            Overriden by subclasses to perform type initialization, specifically including
            setting the base type and adding properties.  This initialization must occur inside this
            method and not in the constructor to ensure that base types are completely initialized before
            their child types.
            </summary>
        </member>
        <member name="M:ExoGraph.GraphType.AddProperty(ExoGraph.GraphProperty)">
            <summary>
            Adds the specified property to the current graph type.
            </summary>
            <param name="property"></param>
        </member>
        <member name="M:ExoGraph.GraphType.AddMethod(ExoGraph.GraphMethod)">
            <summary>
            Adds the specified method to the current graph type.
            </summary>
            <param name="method"></param>
        </member>
        <member name="M:ExoGraph.GraphType.Subscribe``1(ExoGraph.GraphType.CustomEvent{``0})">
            <summary>
            Adds a custom event handler for a specific custom event raised by the current graph type.
            </summary>
            <typeparam name="TEvent">
            The type of the custom event parameter that will be passed
            as an argument when the custom event is raised
            </typeparam>
            <param name="handler">The event handler for the custom event</param>
        </member>
        <member name="M:ExoGraph.GraphType.Unsubscribe``1(ExoGraph.GraphType.CustomEvent{``0})">
            <summary>
            Removes a custom event handler for a specific custom event raised by the current graph type.
            </summary>
            <typeparam name="TDomainEvent">
            The type of the custom event parameter that will be passed
            as an argument when the domain event is raised
            </typeparam>
            <param name="handler">The event handler for the custom event</param>
        </member>
        <member name="M:ExoGraph.GraphType.RaiseEvent``1(ExoGraph.GraphCustomEvent{``0})">
            <summary>
            Raises any domain events registered for the specified domain event type.
            </summary>
            <typeparam name="TEvent"></typeparam>
            <param name="domainEvent"></param>
        </member>
        <member name="M:ExoGraph.GraphType.HasAttribute``1">
            <summary>
            Indicates whether the current type has one or more attributes of the specified type.
            </summary>
            <typeparam name="TAttribute"></typeparam>
            <returns></returns>
        </member>
        <member name="M:ExoGraph.GraphType.GetAttribute``1(System.Boolean)">
            <summary>
            Gets the first occurence of an attribute.  Optionally searches base classes
            </summary>
            <typeparam name="TAttribute">The type of attribute to locate</typeparam>
            <param name="inherit">If true, base types will be searched</param>
            <returns>The first matching attribute</returns>
        </member>
        <member name="M:ExoGraph.GraphType.GetAttributes``1">
            <summary>
            Returns an array of attributes defined on the current type.
            </summary>
            <typeparam name="TAttribute"></typeparam>
            <returns></returns>
        </member>
        <member name="M:ExoGraph.GraphType.GetPath(System.String)">
            <summary>
            Gets the <see cref="T:ExoGraph.GraphPath"/> starting from the current <see cref="T:ExoGraph.GraphType"/> based
            on the specified path string.
            </summary>
            <param name="path"></param>
            <returns>The requested <see cref="T:ExoGraph.GraphPath"/></returns>
        </member>
        <member name="M:ExoGraph.GraphType.TryGetPath(System.String,ExoGraph.GraphPath@)">
            <summary>
             Gets the <see cref="T:ExoGraph.GraphPath"/> starting from the current <see cref="T:ExoGraph.GraphType"/> based
            on the specified path string.
            </summary>
            <param name="path"></param>
            <param name="graphPath"></param>
            <returns>True if the path is valid and was returned as an output parameter, otherwise false.</returns>
        </member>
        <member name="M:ExoGraph.GraphType.IsInstanceOfType(ExoGraph.GraphInstance)">
            <summary>
            Indicates whether the specified <see cref="T:ExoGraph.GraphInstance"/> is either of the current type
            or of a sub type of the current type.
            </summary>
            <param name="instance"></param>
            <returns></returns>
        </member>
        <member name="M:ExoGraph.GraphType.IsSubType(ExoGraph.GraphType)">
            <summary>
            Indicates whether the specified type is a subtype of the current type.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:ExoGraph.GraphType.Create">
            <summary>
            Creates a new instance of the current <see cref="T:ExoGraph.GraphType"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ExoGraph.GraphType.Create(System.String)">
            <summary>
            Creates an existing instance of the current <see cref="T:ExoGraph.GraphType"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ExoGraph.GraphType.ToString">
            <summary>
            Returns the name of the graph type.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ExoGraph.GraphType.GetReference(System.String)">
            <summary>
            Gets the <see cref="T:ExoGraph.GraphInstance"/> assigned to the specified property.
            </summary>
            <param name="property">The name of the property</param>
            <returns>The instance assigned to the property, or null if the property does not have a value</returns>
        </member>
        <member name="M:ExoGraph.GraphType.GetReference(ExoGraph.GraphReferenceProperty)">
            <summary>
            Gets the <see cref="T:ExoGraph.GraphInstance"/> assigned to the specified property.
            </summary>
            <param name="property">The specific <see cref="T:ExoGraph.GraphReferenceProperty"/></param>
            <returns>The instance assigned to the property, or null if the property does not have a value</returns>
        </member>
        <member name="M:ExoGraph.GraphType.GetValue(System.String)">
            <summary>
            Gets the value assigned to the specified property.
            </summary>
            <param name="property">The name of the property</param>
            <returns>The value of the property</returns>
        </member>
        <member name="M:ExoGraph.GraphType.GetValue(ExoGraph.GraphValueProperty)">
            <summary>
            Gets the value assigned to the specified property.
            </summary>
            <param name="property">The specific <see cref="T:ExoGraph.GraphValueProperty"/></param>
            <returns>The value of the property</returns>
        </member>
        <member name="M:ExoGraph.GraphType.GetList(System.String)">
            <summary>
            Gets the list of <see cref="T:ExoGraph.GraphInstance"/> items assigned to the specified property.
            </summary>
            <param name="property">The name of property</param>
            <returns>The list of instances</returns>
        </member>
        <member name="M:ExoGraph.GraphType.GetList(ExoGraph.GraphReferenceProperty)">
            <summary>
            Gets the list of <see cref="T:ExoGraph.GraphInstance"/> items assigned to the specified property.
            </summary>
            <param name="property">The specific <see cref="T:ExoGraph.GraphReferenceProperty"/></param>
            <returns>The list of instances</returns>
        </member>
        <member name="M:ExoGraph.GraphType.SetReference(System.String,ExoGraph.GraphInstance)">
            <summary>
            Sets the reference for a property to the specified instance.
            </summary>
            <param name="property">The property the reference is for</param>
            <param name="value">The value of the property</param>
        </member>
        <member name="M:ExoGraph.GraphType.SetReference(ExoGraph.GraphReferenceProperty,ExoGraph.GraphInstance)">
            <summary>
            Sets the reference for a property to the specified instance.
            </summary>
            <param name="property">The property the reference is for</param>
            <param name="value">The value of the property</param>
        </member>
        <member name="M:ExoGraph.GraphType.SetValue(System.String,System.Object)">
            <summary>
            Sets a property to the specified value.
            </summary>
            <param name="property">The property to set</param>
            <param name="value">The value of the property</param>
        </member>
        <member name="M:ExoGraph.GraphType.SetValue(ExoGraph.GraphValueProperty,System.Object)">
            <summary>
            Sets a property to the specified value.
            </summary>
            <param name="property">The property to set</param>
            <param name="value">The value of the property</param>
        </member>
        <member name="M:ExoGraph.GraphType.ConvertToList(ExoGraph.GraphReferenceProperty,System.Object)">
            <summary>
            Converts the specified object into a instance that implements <see cref="T:System.Collections.IList"/>.
            </summary>
            <param name="property"></param>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:ExoGraph.GraphType.OnSave(ExoGraph.GraphInstance)">
            <summary>
            Called by subclasses to notify the context that a commit has occurred.
            </summary>
            <param name="instance"></param>
        </member>
        <member name="M:ExoGraph.GraphType.SaveInstance(ExoGraph.GraphInstance)">
            <summary>
            Saves changes to the specified instance and related instances in the graph.
            </summary>
            <param name="graphInstance"></param>
        </member>
        <member name="M:ExoGraph.GraphType.IsCached(System.Object)">
            <summary>
            Indicates whether the specified instance is cached and should be prevented from maintaining 
            references to <see cref="T:ExoGraph.GraphContext"/>.
            </summary>
            <param name="instance"></param>
            <returns></returns>
        </member>
        <member name="P:ExoGraph.GraphType.Item(System.String)">
            <summary>
            Gets or sets the value of the specified property.
            </summary>
            <param name="property">The name of the property</param>
            <returns>The underlying value of the property in the physical graph</returns>
        </member>
        <member name="P:ExoGraph.GraphType.Item(ExoGraph.GraphProperty)">
            <summary>
            Gets or sets the value of the specified property.
            </summary>
            <param name="property">The <see cref="T:ExoGraph.GraphProperty"/> to get or set</param>
            <returns>The underlying value of the property in the physical graph</returns>
        </member>
        <member name="T:ExoGraph.GraphType.CustomEvent`1">
            <summary>
            Defines the delegate the custom event handlers must implement to subscribe.
            </summary>
            <typeparam name="TEvent"></typeparam>
            <param name="instance"></param>
            <param name="event"></param>
        </member>
        <member name="M:ExoGraph.ReflectionGraphTypeProvider.ReflectionGraphType.GetEligibleProperties">
            <summary>
            Gets the set of eligible properties that should be considered valid graph properties.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ExoGraph.ReflectionGraphTypeProvider.ReflectionGraphType.ConvertToList(ExoGraph.GraphReferenceProperty,System.Object)">
            <summary>
            Converts the specified object into a instance that implements <see cref="T:System.Collections.IList"/>.
            </summary>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="T:ExoGraph.GraphValueProperty">
            <summary>
            Represents a property that exposes strongly-typed data as leaves of a graph hierarchy.
            </summary>
        </member>
        <member name="T:ExoGraph.GraphProperty">
            <summary>
            Represents a property on a type in a graph hierarchy.
            </summary>
        </member>
        <member name="M:ExoGraph.GraphProperty.HasAttribute``1">
            <summary>
            Indicates whether the current property has one or more attributes of the specified type.
            </summary>
            <typeparam name="TAttribute"></typeparam>
            <returns></returns>
        </member>
        <member name="M:ExoGraph.GraphProperty.GetAttributes``1">
            <summary>
            Returns an array of attributes defined on the current property.
            </summary>
            <typeparam name="TAttribute"></typeparam>
            <returns></returns>
        </member>
        <member name="M:ExoGraph.GraphProperty.ToString">
            <summary>
            Returns the name of the property.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ExoGraph.GraphProperty.GetValue(System.Object)">
            <summary>
            Gets the value of the property on the specified instance.
            </summary>
            <param name="instance"></param>
            <returns></returns>
        </member>
        <member name="M:ExoGraph.GraphProperty.SetValue(System.Object,System.Object)">
            <summary>
            Sets the value of the property on the specified instance.
            </summary>
            <param name="instance"></param>
            <param name="value"></param>
        </member>
        <member name="T:ExoGraph.GraphReferenceProperty">
            <summary>
            Represents a property that associates two types in a graph hierarchy.
            </summary>
        </member>
        <member name="M:ExoGraph.GraphMethod.Invoke(ExoGraph.GraphInstance,System.Object[])">
            <summary>
            Invokes the method on the specified graph instance.
            </summary>
            <param name="instance"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:ExoGraph.GraphMethod.AddParameter(ExoGraph.GraphMethodParameter)">
            <summary>
            Adds a <see cref="T:ExoGraph.GraphMethodParameter"/> to the current method.
            </summary>
            <param name="parameter"></param>
        </member>
        <member name="M:ExoGraph.GraphMethod.HasAttribute``1">
            <summary>
            Indicates whether the current method has one or more attributes of the specified type.
            </summary>
            <typeparam name="TAttribute"></typeparam>
            <returns></returns>
        </member>
        <member name="M:ExoGraph.GraphMethod.GetAttributes``1">
            <summary>
            Returns an array of attributes defined on the current method.
            </summary>
            <typeparam name="TAttribute"></typeparam>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "T:ExoGraph.ReflectionGraphTypeProvider.TypeComparer" -->
        <member name="M:ExoGraph.ReflectionGraphTypeProvider.TypeComparer.GetQualifiedTypeName(System.Type)">
            <summary>
            Gets the fully-qualified name of the type including all base classes.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:ExoGraph.GraphTransaction">
            <summary>
            Tracks all <see cref="T:ExoGraph.GraphEvent"/> occurrences within a context and allows changes
            to be recorded or rolled back entirely.
            </summary>
        </member>
        <member name="M:ExoGraph.GraphTransaction.context_Event(System.Object,ExoGraph.GraphEvent)">
            <summary>
            Records <see cref="T:ExoGraph.GraphEvent"/> occurences within the current context.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:ExoGraph.GraphTransaction.GetInstance(ExoGraph.GraphType,System.String)">
            <summary>
            Gets a <see cref="T:ExoGraph.GraphInstance"/> with the specified type and id, which may be either an existing
            instance or a new instance created during the scope of the current transaction.
            </summary>
            <param name="type"></param>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:ExoGraph.GraphTransaction.Perform">
            <summary>
            Performs all of the graph events associated with the current transaction.
            </summary>
        </member>
        <member name="M:ExoGraph.GraphTransaction.Chain(ExoGraph.GraphTransaction)">
            <summary>
            Allows multiple <see cref="T:ExoGraph.GraphTransaction"/> instances to be applied in sequence, or "chained",
            by propogating information about newly created instances from one transaction to the next.
            </summary>
        </member>
        <member name="M:ExoGraph.GraphTransaction.Perform(System.Action)">
            <summary>
            Performs a set of previous changes, performs the specified operation, and records new changes that
            occur as a result of the previous changes.
            </summary>
            <param name="operation"></param>
            <returns></returns>
        </member>
        <member name="M:ExoGraph.GraphTransaction.Commit">
            <summary>
            Commits the current transaction.
            </summary>
        </member>
        <member name="M:ExoGraph.GraphTransaction.Rollback">
            <summary>
            Rolls back the current transaction by calling <see cref="!:GraphEvent.Revert"/>
            in reverse order on all graph events that occurred during the transaction.
            </summary>
        </member>
        <member name="M:ExoGraph.GraphTransaction.op_Implicit(System.Collections.Generic.List{ExoGraph.GraphEvent})~ExoGraph.GraphTransaction">
            <summary>
            Implicitly converts a array of <see cref="T:ExoGraph.GraphEvent"/> instances into a <see cref="T:ExoGraph.GraphTransaction"/>.
            </summary>
            <param name="events"></param>
            <returns></returns>
        </member>
        <member name="M:ExoGraph.GraphTransaction.op_Addition(ExoGraph.GraphTransaction,ExoGraph.GraphTransaction)">
            <summary>
            Combines two <see cref="T:ExoGraph.GraphTransaction"/> instances into a single sequential <see cref="T:ExoGraph.GraphTransaction"/>.
            </summary>
            <param name="first"></param>
            <param name="second"></param>
            <returns></returns>
        </member>
        <member name="M:ExoGraph.GraphTransaction.Combine(System.Collections.Generic.IEnumerable{ExoGraph.GraphTransaction})">
            <summary>
            Combines two or more transactions creating a new 
            </summary>
            <param name="transactions"></param>
            <returns></returns>
        </member>
        <member name="T:ExoGraph.DynamicGraphTypeProvider`2">
            <summary>
            Base class for type providers that expose properties dynamically but leverage base type providers
            for core functionality.
            </summary>
            <typeparam name="TTypeSource"></typeparam>
            <typeparam name="TPropertySource"></typeparam>
        </member>
        <member name="T:ExoGraph.DynamicGraphTypeProvider">
            <summary>
            Base class for type providers that expose properties dynamically but leverage base type providers
            for core functionality.
            </summary>
            <typeparam name="TTypeSource"></typeparam>
            <typeparam name="TPropertySource"></typeparam>
        </member>
        <member name="M:ExoGraph.DynamicGraphTypeProvider.#ctor(System.String,System.String)">
            <summary>
            Creates a new <see cref="T:ExoGraph.DynamicGraphTypeProvider"/> based on the specified types.
            </summary>
            <param name="@namespace"></param>
            <param name="baseType"></param>
        </member>
        <member name="M:ExoGraph.DynamicGraphTypeProvider.GetGraphTypeName(System.Object)">
            <summary>
            Gets the unique name of the <see cref="T:ExoGraph.GraphType"/> for the specified graph object instance.
            </summary>
            <param name="instance">The actual graph object instance</param>
            <returns>The unique name of the graph type for the instance if it is a valid graph type, otherwise null</returns>
        </member>
        <member name="M:ExoGraph.DynamicGraphTypeProvider.CreateGraphType(System.String)">
            <summary>
            Creates a <see cref="T:ExoGraph.GraphType"/> that corresponds to the specified type name.
            </summary>
            <param name="typeName"></param>
            <returns></returns>
        </member>
        <member name="M:ExoGraph.DynamicGraphTypeProvider.GetSafeId(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:ExoGraph.DynamicGraphTypeProvider.ExoGraph#IGraphTypeProvider#GetGraphTypeName(System.Object)">
            <summary>
            Gets the unique name of the <see cref="T:ExoGraph.GraphType"/> for the specified graph object instance.
            </summary>
            <param name="instance">The actual graph object instance</param>
            <returns>The unique name of the graph type for the instance if it is a valid graph type, otherwise null</returns>
        </member>
        <member name="M:ExoGraph.DynamicGraphTypeProvider.ExoGraph#IGraphTypeProvider#GetGraphTypeName(System.Type)">
            <summary>
            Gets the <see cref="T:ExoGraph.GraphType"/> that corresponds to the specified <see cref="T:System.Type"/>.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:ExoGraph.DynamicGraphTypeProvider.ExoGraph#IGraphTypeProvider#CreateGraphType(System.String)">
            <summary>
            Creates a <see cref="T:ExoGraph.GraphType"/> that corresponds to the specified type name.
            </summary>
            <param name="typeName"></param>
            <returns></returns>
        </member>
        <member name="M:ExoGraph.DynamicGraphTypeProvider`2.#ctor(System.String,System.String)">
            <summary>
            Creates a new <see cref="T:ExoGraph.DynamicGraphTypeProvider"/> based on the specified types.
            </summary>
            <param name="@namespace"></param>
            <param name="baseType"></param>
        </member>
        <member name="M:ExoGraph.DynamicGraphTypeProvider`2.GetGraphTypeName(System.Object)">
            <summary>
            Gets the unique name of the <see cref="T:ExoGraph.GraphType"/> for the specified graph object instance.
            </summary>
            <param name="instance">The actual graph object instance</param>
            <returns>The unique name of the graph type for the instance if it is a valid graph type, otherwise null</returns>
        </member>
        <member name="M:ExoGraph.DynamicGraphTypeProvider`2.CreateGraphType(System.String)">
            <summary>
            Creates a <see cref="T:ExoGraph.GraphType"/> that corresponds to the specified type name.
            </summary>
            <param name="typeName"></param>
            <returns></returns>
        </member>
        <member name="M:ExoGraph.DynamicGraphTypeProvider`2.GetTypeSource(System.String)">
            <summary>
            Gets the real object that provides type information based on the given dynamic type name.
            </summary>
            <param name="typeName"></param>
            <returns></returns>
        </member>
        <member name="M:ExoGraph.DescriptorGraphTypeProvider`1.#ctor(System.String,System.Func{System.String,`0},System.Func{ExoGraph.GraphInstance,System.String})">
            <summary>
            Creates a new <see cref="!:DescriptorGraphTypeProvider"/> based on the specified types.
            </summary>
            <param name="namespace"></param>
            <param name="create"></param>
        </member>
        <member name="T:ExoGraph.GraphPath">
            <summary>
            Represents a property path from a root <see cref="T:ExoGraph.GraphType"/> with one or more steps.
            </summary>
            <remarks>
            Due to inheritance, property paths may branch as properties with similar names appear
            on siblings in the inheritance hierarchy.
            </remarks>
        </member>
        <member name="M:ExoGraph.GraphPath.CreatePath(ExoGraph.GraphType,System.String)">
            <summary>
            Creates a new <see cref="T:ExoGraph.GraphPath"/> instance for the specified root <see cref="T:ExoGraph.GraphType"/>
            and path string.
            </summary>
            <param name="rootType"></param>
            <param name="path"></param>
        </member>
        <member name="M:ExoGraph.GraphPath.GetSteps(ExoGraph.GraphPath,ExoGraph.GraphType,System.Collections.Generic.List{System.String},System.Int32)">
            <summary>
            Recursively builds the steps along a property path.
            </summary>
            <param name="path"></param>
            <param name="graphType"></param>
            <param name="properties"></param>
            <param name="depth"></param>
            <returns></returns>
        </member>
        <member name="M:ExoGraph.GraphPath.Notify(ExoGraph.GraphInstance)">
            <summary>
            Notify path subscribers that the path has changed.
            </summary>
            <param name="instance"></param>
        </member>
        <member name="M:ExoGraph.GraphPath.GetGraph(ExoGraph.GraphInstance)">
            <summary>
            Gets the graph for the specified root object including all objects on the path.
            </summary>
            <param name="root"></param>
            <returns></returns>
        </member>
        <member name="M:ExoGraph.GraphPath.AddToGraph(ExoGraph.GraphInstance,ExoGraph.GraphStep,System.Collections.Generic.HashSet{ExoGraph.GraphInstance})">
            <summary>
            Recursively walks path steps to add instances to the graph.
            </summary>
            <param name="instance"></param>
            <param name="step"></param>
            <param name="graph"></param>
        </member>
        <member name="M:ExoGraph.GraphPath.GetSiblings(ExoGraph.GraphInstance)">
            <summary>
            Gets all siblings of the specified value instance based on the hierarchy represented by the path.
            </summary>
            <param name="value"></param>
            <returns></returns>
            <remarks>
            For example, assuming a path defined as A.B.C, an instance of C would be passed in
            and a list of C instances would be returned that share a common A root along a direct
            path from A to B to C.
            </remarks>
        </member>
        <member name="M:ExoGraph.GraphPath.LoadLastSteps(ExoGraph.GraphStep,System.Collections.Generic.IList{ExoGraph.GraphStep})">
            <summary>
            Recursively loads the last steps for the current path.
            </summary>
            <param name="value"></param>
            <param name="step"></param>
            <param name="roots"></param>
        </member>
        <member name="M:ExoGraph.GraphPath.LoadRoots(ExoGraph.GraphInstance,ExoGraph.GraphStep,System.Collections.Generic.IList{ExoGraph.GraphInstance})">
            <summary>
            Recursively loads the roots starting with the last step of the current path.
            </summary>
            <param name="value"></param>
            <param name="step"></param>
            <param name="roots"></param>
        </member>
        <member name="M:ExoGraph.GraphPath.AddToSiblings(ExoGraph.GraphInstance,ExoGraph.GraphStep,System.Collections.Generic.IDictionary{ExoGraph.GraphInstance,ExoGraph.GraphInstance})">
            <summary>
            Recursively walks path steps to add instances to the graph.
            </summary>
            <param name="instance"></param>
            <param name="step"></param>
            <param name="graph"></param>
        </member>
        <member name="M:ExoGraph.GraphPath.ToString">
            <summary>
            Returns the string representation of the path.
            </summary>
            <returns></returns>
        </member>
        <member name="P:ExoGraph.GraphPath.Path">
            <summary>
            The string path the current instance represents.
            </summary>
        </member>
        <member name="P:ExoGraph.GraphPath.RootType">
            <summary>
            The root <see cref="T:ExoGraph.GraphType"/> the path starts from.
            </summary>
        </member>
        <member name="P:ExoGraph.GraphPath.FirstStep">
            <summary>
            The first <see cref="!:Step"/> along the path.
            </summary>
        </member>
        <member name="E:ExoGraph.GraphPath.Change">
            <summary>
            Event that is raised when any property along the path is changed.
            </summary>
        </member>
        <member name="T:ExoGraph.GraphFilter">
            <summary>
            Represents a filter on a graph of objects based on a specified root and 
            one or more predicate paths.
            </summary>
            <typeparam name="TRoot"></typeparam>
        </member>
        <member name="M:ExoGraph.GraphFilter.#ctor(ExoGraph.GraphInstance,System.String[])">
            <summary>
            Creates a new graph filter for the specified root object.
            </summary>
            <param name="root"></param>
            <param name="predicates"></param>
        </member>
        <member name="M:ExoGraph.GraphFilter.Contains(ExoGraph.GraphInstance)">
            <summary>
            Indicate if the specified <see cref="T:ExoGraph.GraphInstance"/> is in the current graph.
            </summary>
            <param name="instance"></param>
            <returns></returns>
        </member>
        <member name="M:ExoGraph.GraphFilter.Load(ExoGraph.GraphInstance,ExoGraph.GraphStep)">
            <summary>
            Recursively loads a property path in the graph by walking steps.
            </summary>
            <param name="parent"></param>
            <param name="step"></param>
        </member>
        <member name="M:ExoGraph.GraphFilter.path_PathChanged(System.Object,ExoGraph.GraphPathChangeEvent)">
            <summary>
            Updates the graph based on changes to a specific path.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:ExoGraph.GraphFilter.RaiseOnChanged">
            <summary>
            Updates the graph based on changes to paths and raises the <see cref="E:ExoGraph.GraphFilter.Changed"/> event.
            </summary>
        </member>
        <member name="M:ExoGraph.GraphFilter.CombinePathGraphs">
            <summary>
            Combines all of the graphs for the paths the filter is monitoring.
            </summary>
        </member>
        <member name="P:ExoGraph.GraphFilter.Root">
            <summary>
            Gets the root the graph filter is based on.
            </summary>
        </member>
        <member name="E:ExoGraph.GraphFilter.Changed">
            <summary>
            Notifies subscribers that the underlying graph has changed.
            </summary>
        </member>
        <member name="T:ExoGraph.GraphEvent">
            <summary>
            Base class for classes that represent specific events with an object graph.
            </summary>
        </member>
        <member name="M:ExoGraph.GraphEvent.#ctor(ExoGraph.GraphType,System.String)">
            <summary>
            Creates a new <see cref="T:ExoGraph.GraphEvent"/> for the specified <see cref="T:ExoGraph.GraphType"/> and id.
            </summary>
            <param name="id"></param>
            <param name="type"></param>
        </member>
        <member name="M:ExoGraph.GraphEvent.#ctor(ExoGraph.GraphInstance)">
            <summary>
            Creates a new <see cref="T:ExoGraph.GraphEvent"/> for the specified <see cref="T:ExoGraph.GraphInstance"/>.
            </summary>
            <param name="instance">The instance the event is for</param>
        </member>
        <member name="M:ExoGraph.GraphEvent.Notify">
            <summary>
            Starts a new <see cref="T:ExoGraph.GraphEventScope"/>, allows subclasses to perform
            event specific notifications by overriding <see cref="M:ExoGraph.GraphEvent.OnNotify"/>, and
            notifies the context that the event has occurred.
            </summary>
        </member>
        <member name="M:ExoGraph.GraphEvent.OnNotify">
            <summary>
            Allows subclasses to perform event specific notification logic.
            </summary>
        </member>
        <member name="M:ExoGraph.GraphEvent.EnsureInstance(ExoGraph.GraphTransaction,ExoGraph.GraphInstance)">
            <summary>
            Verifies that the specified <see cref="T:ExoGraph.GraphInstance"/> refers to a valid real instance
            and if not, uses the type and id information to look up the real instance.
            </summary>
            <param name="transaction"></param>
            <param name="instance"></param>
            <returns></returns>
        </member>
        <member name="P:ExoGraph.GraphEvent.Instance">
            <summary>
            Gets the <see cref="T:ExoGraph.GraphInstance"/> the event is for.
            </summary>
        </member>
        <member name="P:ExoGraph.GraphEvent.InstanceId">
            <summary>
            Gets the id of the instance at the moment the event occurred, which may be different than the current id of the instance.
            </summary>
        </member>
        <member name="T:ExoGraph.GraphPropertyList">
            <summary>
            Exposes a list of <see cref="T:ExoGraph.GraphProperty"/> instances keyed by name.
            </summary>
        </member>
        <member name="T:ExoGraph.ReadOnlyList`1">
            <summary>
            Base class for read only lists of items keyed by name.
            </summary>
        </member>
        <member name="M:ExoGraph.ReadOnlyList`1.Contains(System.String)">
            <summary>
            Determines whether an item in the list exists with the specified name.
            </summary>
            <param name="name">The name of the item to find</param>
            <returns>True if the item exists, otherwise false</returns>
        </member>
        <member name="M:ExoGraph.ReadOnlyList`1.Contains(`0)">
            <summary>
            Determines whether an item is in the list.
            </summary>
            <param name="item">The item to find</param>
            <returns>True if the item exists, otherwise false</returns>
        </member>
        <member name="M:ExoGraph.ReadOnlyList`1.System#Collections#Generic#IEnumerable{TItem}#GetEnumerator">
            <summary>
            Enumerates over the items in the list.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ExoGraph.ReadOnlyList`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Enumerates over the items in the list.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ExoGraph.ReadOnlyList`1.GetName(`0)">
            <summary>
            Returns the name of the item.
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:ExoGraph.ReadOnlyList`1.Add(`0)">
            <summary>
            Allows subclasses to add items to the internal list.
            </summary>
            <param name="item">The item to add</param>
        </member>
        <member name="P:ExoGraph.ReadOnlyList`1.Count">
            <summary>
            Gets the number of items in the list.
            </summary>
        </member>
        <member name="P:ExoGraph.ReadOnlyList`1.Item(System.String)">
            <summary>
            Gets the item in the list with the specified name or
            returns null if an item does not exist with the given name.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="T:ExoGraph.GraphDeleteEvent">
            <summary>
            Represents the creation of a graph instance.
            </summary>
        </member>
        <member name="T:ExoGraph.GraphValuePropertyList">
            <summary>
            Exposes a list of <see cref="T:ExoGraph.GraphValueProperty"/> instances keyed by name.
            </summary>
        </member>
        <member name="T:ExoGraph.GraphContext">
            <summary>
            Base class for context classes tracking the type information and events
            for a set of objects in graph.
            </summary>
        </member>
        <member name="F:ExoGraph.GraphContext.graphTypes">
            <summary>
            Tracks the types of objects in the graph.
            </summary>
        </member>
        <member name="F:ExoGraph.GraphContext.typeProviders">
            <summary>
            Tracks providers registered to create <see cref="T:ExoGraph.GraphType"/> instances.
            </summary>
        </member>
        <member name="F:ExoGraph.GraphContext.nextId">
            <summary>
            Tracks the next auto-generated id assigned to new instances.
            </summary>
        </member>
        <member name="F:ExoGraph.GraphContext.uninitialized">
            <summary>
            Queue to store a FIFO list of types to be initialized
            </summary>
        </member>
        <member name="F:ExoGraph.GraphContext.initializing">
            <summary>
            Flag to indicate whether or not an initialization scope is in effect
            </summary>
        </member>
        <member name="F:ExoGraph.GraphContext.initialized">
            <summary>
            List of graph types that have been initialized
            </summary>
        </member>
        <member name="F:ExoGraph.GraphContext.pendingGetProperties">
            <summary>
            List of properties that are being accessed for the first time.
            </summary>
        </member>
        <member name="M:ExoGraph.GraphContext.BeginTransaction">
            <summary>
            Begins a transaction within the current graph context.
            </summary>
            <returns>The transaction instance</returns>
            <remarks>
            The transaction subscribes to graph events and should be used inside a using block
            to ensure that the subscriptions are eventually released.
            <see cref="M:ExoGraph.GraphTransaction.Commit"/> must be called to ensure the transaction is not rolled back.
            <see cref="!:Rollback"/> may be called at any time to force the transaction to roll back.
            After <see cref="!:Commit"/> or <see cref="!:Rollback"/> occurs, further graph events
            will not be tracked by the transaction.
            </remarks>
        </member>
        <member name="M:ExoGraph.GraphContext.Notify(ExoGraph.GraphEvent)">
            <summary>
            Called by each <see cref="T:ExoGraph.GraphEvent"/> to notify the context that a graph event has occurred.
            </summary>
            <param name="graphEvent"></param>
        </member>
        <member name="M:ExoGraph.GraphContext.GenerateId">
            <summary>
            Generates a unique identifier to assign to new instances that do not yet have an id.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ExoGraph.GraphContext.AddPendingPropertyGet(ExoGraph.GraphInstance,ExoGraph.GraphProperty)">
            <summary>
            Notify that a property is being accessed for the first time.
            </summary>
            <param name="instance"></param>
            <param name="property"></param>
        </member>
        <member name="M:ExoGraph.GraphContext.RemovePendingPropertyGet(ExoGraph.GraphInstance,ExoGraph.GraphProperty)">
            <summary>
            Notify that a property was accessed for the first time.
            </summary>
            <param name="instance"></param>
            <param name="property"></param>
        </member>
        <member name="M:ExoGraph.GraphContext.IsPropertyBeingAccessed(ExoGraph.GraphInstance,ExoGraph.GraphProperty)">
            <summary>
            Indicates that the given property is being accessed for the first time on the given graph instance,
            so property get events should be temporarily suspended.
            </summary>
            <param name="instance"></param>
            <param name="property"></param>
            <returns></returns>
        </member>
        <member name="M:ExoGraph.GraphContext.Reset">
            <summary>
            Resets the current context in preparation for being reused after being cached in a context pool.
            </summary>
        </member>
        <member name="M:ExoGraph.GraphContext.GetGraphInstance(System.Object)">
            <summary>
            Gets the <see cref="T:ExoGraph.GraphInstance"/> associated with the specified real instance.
            </summary>
            <param name="instance"></param>
            <returns></returns>
        </member>
        <member name="M:ExoGraph.GraphContext.GetGraphType(System.String)">
            <summary>
            Gets the <see cref="T:ExoGraph.GraphType"/> that corresponds to the specified type name.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:ExoGraph.GraphContext.GetGraphType``1">
            <summary>
            Gets the <see cref="T:ExoGraph.GraphType"/> that corresponds to TType.
            </summary>
            <typeparam name="TType"></typeparam>
            <returns></returns>
        </member>
        <member name="M:ExoGraph.GraphContext.GetGraphType(System.Type)">
            <summary>
            Gets the <see cref="T:ExoGraph.GraphType"/> that corresponds to the specified <see cref="T:System.Type"/>.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:ExoGraph.GraphContext.GetGraphType(System.Object)">
            <summary>
            Gets the <see cref="T:ExoGraph.GraphType"/> that corresponds to the specified instance.
            </summary>
            <param name="instance"></param>
            <returns></returns>
        </member>
        <member name="M:ExoGraph.GraphContext.AddGraphTypeProvider(ExoGraph.IGraphTypeProvider)">
            <summary>
            Adds a new <see cref="T:ExoGraph.IGraphTypeProvider"/> to the set of providers used to resolve
            and create new <see cref="T:ExoGraph.GraphType"/> instances.  
            </summary>
            <param name="typeProvider">The <see cref="T:ExoGraph.IGraphTypeProvider"/> to add</param>
            <remarks>
            Providers added last will be given precedence over previously added providers.
            </remarks>
        </member>
        <member name="P:ExoGraph.GraphContext.Current">
            <summary>
            Gets or sets the current graph context.
            </summary>
        </member>
        <member name="P:ExoGraph.GraphContext.Provider">
            <summary>
            Gets or sets the <see cref="T:ExoGraph.IGraphContextProvider"/> provider responsible for
            creating and storing the <see cref="T:ExoGraph.GraphContext"/> for the application.
            </summary>
        </member>
        <member name="E:ExoGraph.GraphContext.Event">
            <summary>
            Notifies when all <see cref="T:ExoGraph.GraphEvent"/> occurrences are raised within the current graph context.
            </summary>
        </member>
        <member name="E:ExoGraph.GraphContext.TypeInit">
            <summary>
            Notifies when new types are initialized within the current graph context.
            </summary>
        </member>
        <member name="E:ExoGraph.GraphContext.ContextInit">
            <summary>
            Notifies when a new <see cref="T:ExoGraph.GraphContext"/> is initialized.
            </summary>
        </member>
        <member name="T:ExoGraph.GraphPropertyGetEvent">
            <summary>
            Represents the retrieval of a property in the graph.
            </summary>
        </member>
        <member name="M:ExoGraph.GraphPropertyGetEvent.RaisePropertyGet">
            <summary>
            Raises the <see cref="T:ExoGraph.GraphPropertyGetEvent"/> on all types in the type hierarchy
            of the current instance that have the property that is being accessed.
            </summary>
        </member>
        <member name="T:ExoGraph.GraphTypeList">
            <summary>
            Exposes a list of <see cref="T:ExoGraph.GraphType"/> instances keyed by name.
            </summary>
        </member>
        <member name="T:ExoGraph.IGraphContextProvider">
            <summary>
            Interface for providers that handle creation and storage of <see cref="T:ExoGraph.GraphContext"/>
            implementations for an application.
            </summary>
            <remarks>
            The <see cref="P:ExoGraph.GraphContext.Provider"/> property must be set at application startup
            to the appropriate implementation of this interface.  The singleton will be accessed through
            the <see cref="P:ExoGraph.GraphContext.Current"/> property to expose the appropriate context for
            the current thread of execution.  Implementations will be responsible for performing both
            the appropriate initialization and storage of the <see cref="T:ExoGraph.GraphContext"/>.
            </remarks>
        </member>
        <member name="T:ExoGraph.GraphInstanceList">
            <summary>
            Exposes an editable list of instances for a specific list property.
            </summary>
        </member>
        <member name="M:ExoGraph.GraphInstanceList.Add(ExoGraph.GraphInstance)">
            <summary>
            Adds the specified instance to the list.
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:ExoGraph.GraphInstanceList.Clear">
            <summary>
            Removes all of the instances from the list.
            </summary>
        </member>
        <member name="M:ExoGraph.GraphInstanceList.Contains(ExoGraph.GraphInstance)">
            <summary>
            Determines if the specified instance is in the list.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:ExoGraph.GraphInstanceList.System#Collections#Generic#ICollection{ExoGraph#GraphInstance}#CopyTo(ExoGraph.GraphInstance[],System.Int32)">
            <summary>
            Copies the instances into an array.
            </summary>
            <param name="array"></param>
            <param name="arrayIndex"></param>
        </member>
        <member name="M:ExoGraph.GraphInstanceList.Remove(ExoGraph.GraphInstance)">
            <summary>
            Removes the specified instance from the list.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="P:ExoGraph.GraphInstanceList.Count">
            <summary>
            Gets the number of items in the list.
            </summary>
        </member>
        <member name="P:ExoGraph.GraphInstanceList.System#Collections#Generic#ICollection{ExoGraph#GraphInstance}#IsReadOnly">
            <summary>
            Indicates whether the list of read only.
            </summary>
        </member>
        <member name="T:ExoGraph.GraphReferencePropertyList">
            <summary>
            Exposes a list of <see cref="T:ExoGraph.GraphReferenceProperty"/> instances keyed by name.
            </summary>
        </member>
        <member name="T:ExoGraph.GraphCustomEvent`1">
            <summary>
            Represents the creation of a graph instance.
            </summary>
        </member>
        <member name="T:ExoGraph.GraphContextProvider">
            <summary>
            Implementation of <see cref="T:ExoGraph.IGraphContextProvider"/> that initializes a thread
            or web-request scoped <see cref="T:ExoGraph.GraphContext"/> subclass, and allows subclasses
            to perform additional initialization work when new contexts are created.
            </summary>
        </member>
        <member name="M:ExoGraph.GraphContextProvider.#ctor">
            <summary>
            Creates a new <see cref="T:ExoGraph.GraphContextProvider"/> and automatically assigns the instance
            as the current <see cref="P:ExoGraph.GraphContext.Provider"/> implementation.
            </summary>
        </member>
        <member name="M:ExoGraph.GraphContextProvider.AddToPool(ExoGraph.GraphContext)">
            <summary>
            Adds the specified <see cref="T:ExoGraph.GraphContext"/> to the context pool.
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:ExoGraph.GraphContextProvider.FlushPool">
            <summary>
            Removes all <see cref="T:ExoGraph.GraphContext"/> instances from the pool.
            </summary>
        </member>
        <member name="M:ExoGraph.GraphContextProvider.OnCreateContext">
            <summary>
            Base implementation that creates a new <see cref="T:ExoGraph.GraphContext"/> instance.
            </summary>
            <returns>The new context</returns>
            <remarks>
            Subclasses may override <see cref="E:ExoGraph.GraphContextProvider.CreateContext"/> to perform additional context initialization
            or even implement a context pool to select existing contexts that are not currently in use.
            </remarks>
        </member>
        <member name="M:ExoGraph.GraphContextProvider.GetStorage">
            <summary>
            Gets thread static or <see cref="T:System.Web.HttpContext"/> storage for the <see cref="T:ExoGraph.GraphContext"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="P:ExoGraph.GraphContextProvider.Context">
            <summary>
            Gets or sets the current <see cref="T:ExoGraph.GraphContext"/>.
            </summary>
        </member>
        <member name="E:ExoGraph.GraphContextProvider.CreateContext">
            <summary>
            Event which allows subscribers to create a new <see cref="T:ExoGraph.GraphContext"/> on behalf
            of the current <see cref="T:ExoGraph.GraphContextProvider"/>.
            </summary>
        </member>
        <member name="T:ExoGraph.GraphContextProvider.CreateContextEventArgs">
            <summary>
            Event arguments for the <see cref="E:ExoGraph.GraphContextProvider.CreateContext"/> event.
            </summary>
        </member>
        <member name="M:ExoGraph.GraphContextProvider.CreateContextEventArgs.#ctor(ExoGraph.GraphContextProvider)">
            <summary>
            Creates a new <see cref="T:ExoGraph.GraphContextProvider.CreateContextEventArgs"/> which allows
            event subscribers to create a new <see cref="T:ExoGraph.GraphContext"/>.
            </summary>
            <param name="provider"></param>
        </member>
        <member name="P:ExoGraph.GraphContextProvider.CreateContextEventArgs.Context">
            <summary>
            Gets or sets the <see cref="T:ExoGraph.GraphContext"/> for the current provider.
            </summary>
        </member>
        <member name="T:ExoGraph.GraphContextProvider.Storage">
            <summary>
            Reference class used to provide storage for the context.
            </summary>
        </member>
        <member name="T:ExoGraph.GraphInstance">
            <summary>
            Represents an instance of a <see cref="T:ExoGraph.GraphType"/> in a physical graph.
            </summary>
        </member>
        <member name="M:ExoGraph.GraphInstance.#ctor(System.Object)">
            <summary>
            Creates a new <see cref="T:ExoGraph.GraphInstance"/> for the specified <see cref="T:ExoGraph.GraphType"/>
            and actual graph object instance.
            </summary>
            <param name="graphType"></param>
            <param name="instance"></param>
        </member>
        <member name="M:ExoGraph.GraphInstance.#ctor(ExoGraph.GraphType,System.String)">
            <summary>
            Creates a new <see cref="T:ExoGraph.GraphInstance"/> for the specified <see cref="T:ExoGraph.GraphType"/>
            and id, but does not yet represent a real <see cref="T:ExoGraph.GraphInstance"/>.
            </summary>
            <param name="graphType"></param>
            <param name="id"></param>
        </member>
        <member name="M:ExoGraph.GraphInstance.GetExtension``1">
            <summary>
            Gets or creates an extension of the specified type that will be associated with the
            current <see cref="T:ExoGraph.GraphInstance"/>.  Once created, the extension will continue to be
            associated with the instance and cannot be replaced.
            </summary>
            <typeparam name="TExtension"></typeparam>
            <returns></returns>
        </member>
        <member name="M:ExoGraph.GraphInstance.GetOutReference(ExoGraph.GraphReferenceProperty,ExoGraph.GraphInstance)">
            <summary>
            Gets the <see cref="T:ExoGraph.GraphReference"/> established for the specified 
            <see cref="T:ExoGraph.GraphReferenceProperty"/> and <see cref="T:ExoGraph.GraphInstance"/>.
            </summary>
            <param name="property">The property the reference is for</param>
            <param name="instance">The child instance associated with the property</param>
            <returns>The requested reference, if established, otherwise null</returns>
        </member>
        <member name="M:ExoGraph.GraphInstance.AddReference(ExoGraph.GraphReferenceProperty,ExoGraph.GraphInstance,System.Boolean)">
            <summary>
            Adds a reference for the specified instance and property.
            </summary>
            <param name="property">The property the reference is for</param>
            <param name="instance">The instance the reference is for</param>
            <param name="isLoading">
            Indicates whether the reference is being establish while the graph is loading
            or represents a real change
            </param>
        </member>
        <member name="M:ExoGraph.GraphInstance.RemoveReference(ExoGraph.GraphReference)">
            <summary>
            Removes the specified reference.
            </summary>
            <param name="reference">The reference to remove</param>
        </member>
        <member name="M:ExoGraph.GraphInstance.OnAccess">
            <summary>
            Performs initialization and raises the init event for an instance when it is first used.
            </summary>
        </member>
        <member name="M:ExoGraph.GraphInstance.OnFirstAccess(ExoGraph.GraphProperty)">
            <summary>
            Performs special initialization of the graph when a property is first accessed.
            </summary>
            <param name="property"></param>
        </member>
        <member name="M:ExoGraph.GraphInstance.HasBeenAccessed(ExoGraph.GraphProperty)">
            <summary>
            Indicates whether the property has been accessed on this instance.
            </summary>
            <param name="property"></param>
            <returns></returns>
        </member>
        <member name="M:ExoGraph.GraphInstance.GetReference(System.String)">
            <summary>
            Gets the <see cref="T:ExoGraph.GraphInstance"/> assigned to the specified property.
            </summary>
            <param name="property">The name of the property</param>
            <returns>The instance assigned to the property, or null if the property does not have a value</returns>
        </member>
        <member name="M:ExoGraph.GraphInstance.GetReference(ExoGraph.GraphReferenceProperty)">
            <summary>
            Gets the <see cref="T:ExoGraph.GraphInstance"/> assigned to the specified property.
            </summary>
            <param name="property">The specific <see cref="T:ExoGraph.GraphReferenceProperty"/></param>
            <returns>The instance assigned to the property, or null if the property does not have a value</returns>
        </member>
        <member name="M:ExoGraph.GraphInstance.GetValue(System.String)">
            <summary>
            Gets the value assigned to the specified property.
            </summary>
            <param name="property">The name of the property</param>
            <returns>The value of the property</returns>
        </member>
        <member name="M:ExoGraph.GraphInstance.GetValue(ExoGraph.GraphValueProperty)">
            <summary>
            Gets the value assigned to the specified property.
            </summary>
            <param name="property">The specific <see cref="T:ExoGraph.GraphValueProperty"/></param>
            <returns>The value of the property</returns>
        </member>
        <member name="M:ExoGraph.GraphInstance.GetList(System.String)">
            <summary>
            Gets the list of <see cref="T:ExoGraph.GraphInstance"/> items assigned to the specified property.
            </summary>
            <param name="property">The name of property</param>
            <returns>The list of instances</returns>
        </member>
        <member name="M:ExoGraph.GraphInstance.GetList(ExoGraph.GraphReferenceProperty)">
            <summary>
            Gets the list of <see cref="T:ExoGraph.GraphInstance"/> items assigned to the specified property.
            </summary>
            <param name="property">The specific <see cref="T:ExoGraph.GraphReferenceProperty"/></param>
            <returns>The list of instances</returns>
        </member>
        <member name="M:ExoGraph.GraphInstance.SetReference(System.String,ExoGraph.GraphInstance)">
            <summary>
            Sets the reference for a property to the specified instance.
            </summary>
            <param name="property">The property the reference is for</param>
            <param name="value">The value of the property</param>
        </member>
        <member name="M:ExoGraph.GraphInstance.SetReference(ExoGraph.GraphReferenceProperty,ExoGraph.GraphInstance)">
            <summary>
            Sets the reference for a property to the specified instance.
            </summary>
            <param name="property">The property the reference is for</param>
            <param name="value">The value of the property</param>
        </member>
        <member name="M:ExoGraph.GraphInstance.SetValue(System.String,System.Object)">
            <summary>
            Sets a property to the specified value.
            </summary>
            <param name="property">The property to set</param>
            <param name="value">The value of the property</param>
        </member>
        <member name="M:ExoGraph.GraphInstance.SetValue(ExoGraph.GraphValueProperty,System.Object)">
            <summary>
            Sets a property to the specified value.
            </summary>
            <param name="property">The property to set</param>
            <param name="value">The value of the property</param>
        </member>
        <member name="M:ExoGraph.GraphInstance.Save">
            <summary>
            Saves changes to the current <see cref="T:ExoGraph.GraphInstance"/> and all related 
            instances in the graph.
            </summary>
        </member>
        <member name="M:ExoGraph.GraphInstance.Delete">
            <summary>
            Deletes the current <see cref="T:ExoGraph.GraphInstance"/>.
            </summary>
        </member>
        <member name="M:ExoGraph.GraphInstance.RaiseEvent``1(``0)">
            <summary>
            Raises a custom event for the current instance.
            </summary>
            <typeparam name="TEvent"></typeparam>
            <param name="customEvent"></param>
        </member>
        <member name="M:ExoGraph.GraphInstance.ToString">
            <summary>
            Returns the string representation of the underlying graph instance.
            </summary>
            <returns></returns>
        </member>
        <member name="P:ExoGraph.GraphInstance.Type">
            <summary>
            The <see cref="T:ExoGraph.GraphType"/> of the instance in the graph.
            </summary>
        </member>
        <member name="P:ExoGraph.GraphInstance.Id">
            <summary>
            Gets the identifier for persisted instances.
            </summary>
        </member>
        <member name="P:ExoGraph.GraphInstance.OriginalId">
            <summary>
            Gets the original id of the instance, which may be different from the
            current id if the instance has transitioned from new to existing.
            </summary>
        </member>
        <member name="P:ExoGraph.GraphInstance.IsNew">
            <summary>
            Indicates whether the instance is new or has been persisted.
            </summary>
        </member>
        <member name="P:ExoGraph.GraphInstance.Instance">
            <summary>
            The actual graph object instance.
            </summary>
        </member>
        <member name="P:ExoGraph.GraphInstance.Item(System.String)">
            <summary>
            Gets or sets the value of the specified property.
            </summary>
            <param name="property">The name of the property</param>
            <returns>The underlying value of the property in the physical graph</returns>
        </member>
        <member name="P:ExoGraph.GraphInstance.Item(ExoGraph.GraphProperty)">
            <summary>
            Gets or sets the value of the specified property.
            </summary>
            <param name="property">The <see cref="T:ExoGraph.GraphProperty"/> to get or set</param>
            <returns>The underlying value of the property in the physical graph</returns>
        </member>
        <member name="P:ExoGraph.GraphInstance.ExoGraph#IGraphPropertySource#Properties">
            <summary>
            Explicit implementation of <see cref="T:ExoGraph.IGraphPropertySource"/> exposing the set of properties for the current instance.
            </summary>
        </member>
        <member name="T:ExoGraph.GraphInstance.ReferenceSet">
            <summary>
            Represents a list of in or out references maintained by a <see cref="T:ExoGraph.GraphInstance"/>.
            </summary>
            <remarks>
            For performance reasons, the set is optimized to store single <see cref="T:ExoGraph.GraphReference"/> instances
            without having to create a dictionary.
            </remarks>
        </member>
        <member name="M:ExoGraph.GraphInstance.ReferenceSet.#ctor(ExoGraph.GraphInstance.ReferenceDirection)">
            <summary>
            Creates a new <see cref="T:ExoGraph.GraphInstance.ReferenceSet"/> with the specified reference direction.
            </summary>
            <param name="direction"></param>
        </member>
        <member name="M:ExoGraph.GraphInstance.ReferenceSet.Add(ExoGraph.GraphReference)">
            <summary>
            Adds the <see cref="T:ExoGraph.GraphReference"/> to the current set.
            </summary>
            <param name="reference"></param>
        </member>
        <member name="M:ExoGraph.GraphInstance.ReferenceSet.Remove(ExoGraph.GraphReference)">
            <summary>
            Removes the <see cref="T:ExoGraph.GraphReference"/> from the current set.
            </summary>
            <param name="reference"></param>
        </member>
        <member name="M:ExoGraph.GraphInstance.ReferenceSet.GetEnumerator">
            <summary>
            Enumerates over the <see cref="T:ExoGraph.GraphReference"/> instances in the set.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ExoGraph.GraphInstance.ReferenceSet.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Enumerates over the <see cref="T:ExoGraph.GraphReference"/> instances in the set.
            </summary>
            <returns></returns>
        </member>
        <member name="P:ExoGraph.GraphInstance.ReferenceSet.Item(ExoGraph.GraphInstance)">
            <summary>
            Gets the <see cref="T:ExoGraph.GraphReference"/> that corresponds to the specified <see cref="T:ExoGraph.GraphInstance"/>.
            </summary>
            <param name="instance"></param>
            <returns></returns>
        </member>
        <member name="T:ExoGraph.GraphInstance.ReferenceDirection">
            <summary>
            Specifies the direction of a <see cref="T:ExoGraph.GraphInstance.ReferenceSet"/>.
            </summary>
        </member>
        <member name="T:ExoGraph.GraphSaveEvent">
            <summary>
            Represents the creation of a new or existing graph instance.
            </summary>
        </member>
        <member name="M:ExoGraph.Extensions.ToHashSet``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Creates a hashset from a linq expression.
            See http://blogs.windowsclient.net/damonwildercarr/archive/2008/09/10/expose-new-linq-operations-from-the-screaming-hashset-lt-t-gt-collection.aspx
            for more information
            </summary>
            <typeparam name="T"></typeparam>
            <param name="fromEnumerable"></param>
            <param name="comparer"></param>
            <returns></returns>
        </member>
        <member name="T:ExoGraph.GraphListChangeEvent">
            <summary>
            Represents the additional or removal of instances from a list associated with a parent graph instance.
            </summary>
        </member>
        <member name="T:ExoGraph.GraphInitEvent">
            <summary>
            Represents the creation of a new or existing graph instance.
            </summary>
        </member>
        <member name="T:ExoGraph.GraphInitEvent.InitNew">
            <summary>
            Represents the creation of a new <see cref="T:ExoGraph.GraphInstance"/>.
            </summary>
        </member>
        <member name="M:ExoGraph.GraphInitEvent.InitNew.ExoGraph#ITransactedGraphEvent#Perform(ExoGraph.GraphTransaction)">
            <summary>
            Creates a new <see cref="T:ExoGraph.GraphInstance"/> of the specified <see cref="T:ExoGraph.GraphType"/>.
            </summary>
        </member>
        <member name="M:ExoGraph.GraphInitEvent.InitNew.ExoGraph#ITransactedGraphEvent#Commit(ExoGraph.GraphTransaction)">
            <summary>
            
            </summary>
        </member>
        <member name="M:ExoGraph.GraphInitEvent.InitNew.ExoGraph#ITransactedGraphEvent#Rollback(ExoGraph.GraphTransaction)">
            <summary>
            Deletes and removes the reference to the <see cref="T:ExoGraph.GraphInstance"/> associated with
            the current event, which effectively removes the instance from existence.
            </summary>
        </member>
        <member name="T:ExoGraph.GraphInitEvent.InitExisting">
            <summary>
            Represents the creation of an existing <see cref="T:ExoGraph.GraphInstance"/>.
            </summary>
        </member>
        <member name="M:ExoGraph.GraphStep.AddNextStep(ExoGraph.GraphStep)">
            <summary>
            Adds a step to the list of next steps.
            </summary>
            <param name="step">The step to add</param>
        </member>
        <member name="M:ExoGraph.GraphStep.Notify(ExoGraph.GraphInstance)">
            <summary>
            Recursively walks up the path the current step is a member of until the
            root is reached and then initiates path change notification events.
            </summary>
            <param name="instance"></param>
        </member>
        <member name="M:ExoGraph.GraphStep.ToString">
            <summary>
            Returns the name of the property the step represents.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ExoGraph.GraphStep.Dispose">
            <summary>
            Unsubscribe to graph changes.
            </summary>
        </member>
        <member name="T:ExoGraph.GraphEventScope">
            <summary>
            Represents and tracks the scope of an event within the graph.
            </summary>
        </member>
        <member name="M:ExoGraph.GraphEventScope.#ctor">
            <summary>
            Creates a new <see cref="T:ExoGraph.GraphEventScope"/> that represents a generic event
            within the object graph.
            </summary>
        </member>
        <member name="M:ExoGraph.GraphEventScope.#ctor(ExoGraph.GraphEvent)">
            <summary>
            Creates a new <see cref="T:ExoGraph.GraphEventScope"/> that represents a specific event
            within the object graph.
            </summary>
            <param name="property"></param>
        </member>
        <member name="M:ExoGraph.GraphEventScope.OnExit(System.Action)">
            <summary>
            Causes the specified action to be performed when the outermost graph event
            scope has exited, or performs the action immediately if there is not a current scope.
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:ExoGraph.GraphEventScope.System#IDisposable#Dispose">
            <summary>
            Invokes the <see cref="E:ExoGraph.GraphEventScope.Exited"/> event if this is the outermost <see cref="T:ExoGraph.GraphEventScope"/>.
            </summary>
        </member>
        <member name="P:ExoGraph.GraphEventScope.Event">
            <summary>
            Gets the type of reference that was modified as a result of the change
            </summary>
        </member>
        <member name="P:ExoGraph.GraphEventScope.Current">
            <summary>
            Gets the current <see cref="T:ExoGraph.GraphEventScope"/>.
            </summary>
        </member>
        <member name="P:ExoGraph.GraphEventScope.Parent">
            <summary>
            Gets the parent <see cref="T:ExoGraph.GraphEventScope"/> for this scope.
            </summary>
        </member>
        <member name="E:ExoGraph.GraphEventScope.Exited">
            <summary>
            Notifies subscribers when the outermost <see cref="T:ExoGraph.GraphEventScope"/> has exited.
            </summary>
        </member>
        <member name="T:ExoGraph.DynamicGraphTypeProvider`3">
            <summary>
            Base class for type providers that expose properties dynamically but leverage base type providers
            for core functionality.
            </summary>
            <typeparam name="TBaseType"></typeparam>
            <typeparam name="TTypeSource"></typeparam>
            <typeparam name="TPropertySource"></typeparam>
        </member>
        <member name="T:ExoGraph.GraphPathList">
            <summary>
            Exposes a list of <see cref="T:ExoGraph.GraphPath"/> instances keyed by name.
            </summary>
        </member>
        <member name="T:ExoGraph.GraphValueChangeEvent">
            <summary>
            Represents a change to a value property in the graph.
            </summary>
        </member>
        <member name="M:ExoGraph.GraphValueChangeEvent.OnNotify">
            <summary>
            Notify subscribers that the property value has changed.
            </summary>
        </member>
        <member name="M:ExoGraph.GraphValueChangeEvent.ToString">
            <summary>
            Returns the description of the property value change.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ExoGraph.GraphValueChangeEvent.ExoGraph#ITransactedGraphEvent#Rollback(ExoGraph.GraphTransaction)">
            <summary>
            Restores the property to the old value.
            </summary>
        </member>
        <member name="T:ExoGraph.GraphReferenceChangeEvent">
            <summary>
            Represents a change to an reference property in the graph.
            </summary>
        </member>
        <member name="M:ExoGraph.GraphReferenceChangeEvent.ExoGraph#ITransactedGraphEvent#Perform(ExoGraph.GraphTransaction)">
            <summary>
            Sets the reference property to the new value.
            </summary>
        </member>
        <member name="M:ExoGraph.GraphReferenceChangeEvent.ExoGraph#ITransactedGraphEvent#Rollback(ExoGraph.GraphTransaction)">
            <summary>
            Sets the reference property back to the old value.
            </summary>
        </member>
        <member name="T:ExoGraph.GraphReference">
            <summary>
            Represents the association between two graph instances.
            </summary>
        </member>
        <member name="M:ExoGraph.GraphReference.#ctor(ExoGraph.GraphReferenceProperty,ExoGraph.GraphInstance,ExoGraph.GraphInstance)">
            <summary>
            Creates a new <see cref="T:ExoGraph.GraphReference"/> linking two instances through the specified property.
            </summary>
            <param name="property"></param>
            <param name="in"></param>
            <param name="out"></param>
        </member>
    </members>
</doc>
